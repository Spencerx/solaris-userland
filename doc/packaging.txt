#
# Copyright (c) 2010, 2024, Oracle and/or its affiliates.
#


                Userland Consolidation Packaging Guidelines.

    Each component that integrates into the Userland consolidation must have at
least one package manifest that describes the content to be delivered.  In some
cases components *may* deliver through multiple packages.  Canonical component
package manifests must be placed in the component's build directory.  They also
must be named *.p5m. If the package name ends in *.i386.p5m or *.sparc.p5m then
such package is built only on the corresponding architecture.

    In order to understand what must go in the content of a package manifest,
it's useful to have an understanding of how a canonical manifest is transformed
into a final manifest used for package publication.  Manifest transformation
takes the following basic path:

    canonical manifest
    (.../{component}/{component}.p5m)
            |
            v
    mogrified manifest
    (.../{component}/{build-dir}/manifest-$(MACH)-{component}.mogrified)
            |
            v
    mangled manifest file contents
    (.../{component}/{build-dir}/manifest-$(ARCH)-{component}.mangled)
            |
            v
    dependencies generated
    (.../{component}/{build-dir}/manifest-$(MACH)-{component}.depend)
            |
            v
    dependencies resolved
    (.../{component}/{build-dir}/manifest-$(MACH)-{component}.depend.res)
            |
            v
    manifest validation
    (.../{component}/{build-dir}/.linted-$(MACH))
            |
            v
    publication manifest
    (.../{component}/{build-dir}/manifest-$(MACH)-{component}.published)
            |
            v
    publication


Canonical Manifest
    The canonical manifest contains actions that can't otherwise be generated
    automatically from the data encapsulated in the component Makefile, gate
    transformations, build tree, and packaging tools.  This includes actions
    for license information, some path related attributes, legacy actions, 
    non-discoverable dependencies, users, groups, drivers, and others.

    Actions that are associated with objects that are specific to a single
    architecture should be tagged with a 'variant.arch' attribute specific to
    the architecture that applied to the action.  Ex:
        file path=/usr/lib/$(MACH64)/libx86onlybits.so variant.arch=i386

    Actions for editable files must include an appropriate 'preserve' attribute:
        file path=etc/gnu/a2ps.cfg preserve=true mode=0644

    license actions should be placed in the canonical manifest, as should a
    handful of other special actions noted in the "Manually generated actions"
    section just below.

Manually generated actions
    * com.oracle.info.description is a terse description of what utilities,
      libraries and/or services the package provides.  This should be short,
      specific, concise text, identifying the technology covered by the
      associated license(s).  It should fit naturally in the sentence "This
      package may contain XXX."  For example, "XXX" might be "the tar command"
      or "bzip2 compression software."  When appropriate, this may begin with
      "portions of" or another, more specific qualifying clause.
    * com.oracle.info.baid is the Oracle 3PLTA Business Approval ID.
    * info.classification is "org.opensolaris.category.2008:FOO" where FOO
      varies according to the sorts of utilities, libraries and/or services
      that the package provides.  Existing packages contain most useful
      values; check them out to find the closest match.  For a complete
      list of allowed values, refer to the Solaris system file
      /usr/share/lib/pkg/opensolaris.org.sections .
    * org.opensolaris.arc-caseid is typically "PSARC/YYYY/###" and multiple
      different values are allowed.
    * pkg.summary is a short synopsis of what the package provides.
    * org.opensolaris.consolidation is the name of the consolidation delivering
      the package.  In Userland, this is $(CONSOLIDATION) (which expands to
      "Userland" during the build).  Manifests in the Userland gate can also
      decorate this package attribute with an 'incorporate={incorporation-name}'
      decoration to specify where the package should be incorporated at the end
      of the userland build.  A special value of 'none' will cause the package
      to be unincorporated and float freely from the rest of the rest of the
      packages.  Note that unincorporated packages don't automatically get
      updated with the rest of the system when 'pkg update' is run unless the
      unincorporated package(s) are specified on the command line.

Mogrified Manifest
    The canonical manifest is combined with a set of the transforms
    in $(WS_TOP)/transforms, and a set of macros to more complete
    package manifest using pkgmogrify(1).  The transforms apply default
    attributes to the various actions in the canonical manifest(s).  More
    detail about the attributes can be found in the transform file themselves.
    The macros applied at the time of mogrification are as follows:
        $(MACH)
        $(MACH32)
        $(MACH64)
        $(PUBLISHER)
        $(CONSOLIDATION)
        $(BUILD_VERSION)
        $(SOLARIS_VERSION)
        $(OS_RELEASE)
        $(IPS_COMPONENT_VERSION)
        $(COMPONENT_VERSION)
        $(COMPONENT_PROJECT_URL)
        $(COMPONENT_ARCHIVE_URL)

Dependencies Generated
    The mogrified manifest and the prototype install tree are passed through
    pkgdepend(1) to generate a set of dependencies for the package content.
    These dependencies are only those that "pkgdepend generate" can determine
    on its own.  Additional dependencies that cannot be automatically
    determined by pkgdepend(1) should be placed in the canonical manifest.
    Statically defined dependencies should be described in a canonical manifest
    in an unresolved form (ie. the form generated by "pkgdepend generate").
    Ex:
	    depend fmri=__TBD pkg.debug.depend.file=etc/passwd \
		        pkg.debug.reason=usr/bin/vipw type=require

        depend fmri=__TBD pkg.debug.depend.file=sh \
                pkg.debug.depend.path=usr/bin \
                pkg.debug.depend.reason=usr/bin/psmandup \
                pkg.debug.depend.type=script type=require

    This will allow the next step to resolve all dependencies to their proper
    package(s).

Dependencies Resolved
    The manifest with unresolved dependencies is passed through pkgdepend(1)
    again to resolve dependencies against the package repositories.  The result
    is a manifest that is suitable for publication.  All these manifests are
    processed together in a single step, which is more efficient than resolving
    dependencies in each manifest separately.  While each manifest ends up with
    a .depend.res copy in the build directory, the umbrella dependency
    resolution target is {build-dir}/.resolved-$(MACH).

    The resolution step is also set up to use the -e flag to pkgdepend resolve,
    which limits the set of packages it looks at to resolve the dependencies it
    generated in the previous step.  This makes the resolution step a great deal
    faster, but requires that you include a static list of these packages in
    your component Makefile REQUIRED_PACKAGES macro.  You can automatically
    add REQURIED_PACKAGES settings for the packages used in dependency
    resolution by running "gmake REQUIRED_PACKAGES".  Once you have done so,
    you should manually verify the Makefile additions.

Manifest Validation
    The resolved manifest(s) and prototype install tree are passed through
    a set of validations.  This includes running pkglint(1), comparing the
    manifest content to the prototype install tree, and validation of the file
    content of the prototype install tree.  Any anomalies are reported.
    Content validation is performed by extension to pkglint(1) in
    $(WS_TOP)/tools/python/pkglint/userland.py

    Note that when integrating new packages, and one or more of them depends
    on or more of the others, then this may result:
        WARNING pkglint.action005.1      obsolete dependency check skipped:
            unable to find dependency (target pkg) for (source pkg)
    This means that the target package was not found in the reference repo,
    which was the source of the pkglint cache that was created when 'gmake
    setup' was run after the workspace was created; thus the warning is
    harmless and can be ignored in this circumstance.

Publication.
    Once manifest validation has occurred, the package(s) is/are finally
    published to the workspace package repository.

Facets
    Many facets are automatically set by default via transforms 
    in $(WS_TOPS)/transforms, such as facet.doc.*, facet.devel, etc.

    optional.test

    In most cases, we do not include files in the package manifest
    if they are used exclusively for testing that component.
    If we do include component test files, they should be tagged
    with the facet optional.test=true.  There is no default transform
    for such files, since they do not follow a naming pattern.
    See the components python/python3x or ruby/puppet for examples.

Renames

    Renaming IPS package is done by
     - creating a package with new name
     - creating a rename package
     - making sure that the new package requires the rename package

    For example we want to rename package aaa into new name bbb. Extra care has
    to be taken when we update version at the same time, so let's do that here.

    We have aaa@1.2.3 upstream now delivers the component renamed to bbb
    currently at version 1.2.7.

    First, create new package.
    --------------------------
    Edit aaa.p5m:

    -set name=pkg.fmri value=pkg:/aaa@$(IPS_COMPONENT_VERSION),$(BUILD_VERSION)
    +set name=pkg.fmri value=pkg:/bbb@$(IPS_COMPONENT_VERSION),$(BUILD_VERSION)

    (We also edit Makefile so that COMPONENT_VERSION=1.2.7 and possibly other
    variables there, but that is not important for the rename itself).


    Second, create a rename package.
    --------------------------------
    A package 'aaa' must exist, but it will become a rename package. In
    'history' file we add

    aaa@1.2.3-AUTO_FMRI bbb

    This instructs UL infrastructure to create a rename package for current
    build which renames aaa to bbb.

    For existing components we generally use the 'history' file in the
    component directory. If the component was deleted then
    components/meta-packages/history/history is used. Technically both provide
    the same IPS package at the end.


    Third, add optional dependency.
    -------------------------------
    We edit aaa.p5m (which now actually creates package named 'bbb' because of
    first step) again adding:

    depend type=optional fmri=aaa@1.2.3-AUTO_FMRI

    This step is not necessary but desirable. The problem is that for any
    reason (like unlocked facets) one may try to install pre-rename package aaa
    with post-rename package bbb at the same time. That is not possible because
    yesterdays aaa delivers the same files as todays bbb. IPS will not allow
    that, BUT the error message is quite cryptic. If we add this dependency, we
    say 'If you want to install bbb, you must have aaa of a version which does
    not deliver any files. It is just a rename package'. Installing old aaa and
    new bbb then gives clear error message.


    Optionally rename the manifest.
    -------------------------------
    You may consider 'hg rename aaa.p5m bbb.p5m'. It has no impact on how the
    packages are created, but it might be nice touch.


    Optionally rename the component directory.
    ------------------------------------------
    You may also consider 'hg rename components/aaa components/bbb'. Again no
    impact on packages created, but it might make sense to do so.


    Backport.
    ---------
    Special care has to be taken when rename is brought from Trunk to SRU
    branch. SRU may have different revision of aaa when compared to Trunk. In
    such case the backport must alter the history file and optional dependency
    so that it lists version of aaa available in SRU branch at the time of
    backport.

    For example, if Trunk delivers aaa@1.2.3, but SRU only delivered aaa@1.0.0,
    then the backport history file would be created or modified to contain:

    aaa@1.0.0-AUTO_FMRI bbb

    and a dependency file created or modified to contain:

    depend type=optional fmri=aaa@1.0.0-AUTO_FMRI

    even though Trunk had 1.2.3.

    REQUIRED_PACKAGES.
    ------------------
    If there are other components which do require aaa, then this is a
    complication. Ideally all such components should change:

    - REQUIRED_PACKAGES += aaa
    + REQUIRED_PACKAGES += bbb

    But only at the moment when the CBE receives the new package bbb (not at
    the moment of pushing such change to gate). This is hard to achieve, so
    instead change all components to require 'bbb' at the same time as
    renaming aaa to bbb and install the renamed to current CBE.

    Otherwise REQUIRED_PACKAGES_VALID check in make-rules/ips.mk will fail.
    There is way around that using SKIP_REQUIRED_PACKAGES_CHECK and later
    removing it in another commit, but installing the new packages right away
    to CBE is much simpler.


============
Package FMRI
============
The FMRI is specified in manifest (*.p5m) file as

value=pkg:/archiver/unrar@$(IPS_COMPONENT_VERSION),$(BUILD_VERSION)

 - The package name is hardcoded
 - IPS_COMPONENT_VERSION defaults to $(COMPONENT_VERSION), but you can override
   it in the Makefile if you need to (for example when the component version
   contains letters).
 - BUILD_VERSION is specified in make-rules/ips-buildinfo.mk and is set by
   gatekeeper when closing a gate

This means that with every build the FMRI is increased as gatekeeper modifies
ips-buildinfo.mk. This also means that if you have an old workspace you are
generating packages with an old FMRI and pkglint will print an error saying
that packages with the higher FMRI already exist.

Obsolete and renamed packages need special treatment. We need to specify that
the obsolete package has 'fixed' FMRI. No matter in which build the package is
built, it must have constant FMRI. This can be seen in the 'history' files. Or
for example in

components/meta-packages/history/docbook.p5m:
  set name=pkg.fmri value=pkg:/data/docbook@2.30.0,5.11-0.175.0.0.0.0.0

The problem is that engineer does not know into which build his change will go
into so they can't specify the FMRI manually. In such situations they can use
AUTO_FMRI keyword. This is replaced by transforms/auto_fmri script by current
build number while the package is published.

When the default branch splits into new SRU branch the keyword AUTO_FMRI is
removed from all files and replaced by current build number.

Gatekeeper uses $(hg root)/tools/replace_auto_fmri for that job.


==============================
Component EOF (End Of Feature) 
==============================
TL;DR you have to:

 1) mark all affected packages with 'set name=pkg.legacy value=true'. Either
 directly in *.p5m or in special cases in transforms/legacy by adding to them
 the attribute 'mark_legacy=true'

 2) create release note (usually in release-notes/some-text.txt)

 3) Add the note into one of the packages. If there is multiple packages in the
 component the note should be only in one (the main one supposedly). If the
 'generate' system is used, the note will go to generate/*.static file,
 otherwise just into the *.p5m. It is specified like:

    file release-notes/legacy-runtime-python-34.txt \
        path=usr/share/doc/release-notes/legacy-runtime-python-34.txt mode=0444 \
        must-display=true \
        release-note=feature/pkg/self@$(IPS_COMPONENT_VERSION)-AUTO_FMRI \
        release-note=feature/pkg/self@0

 The first release-note attribute makes "pkg update" display the note when
 upgrading from a version older than the one listed.  (If the component
 version changes during the legacy period, you may want to list the initial
 version instead of $(IPS_COMPONENT_VERSION) here to reduce the number of times
 the note is displayed on upgrade.)

 The second release-note attribute, with the "@0" notation, makes pkg display
 the note when the package is initially installed instead of being upgraded.
 See the pkg(7) man page for further details.

Longer description:

This is a brief description on how to remove a component from Userland for
an EOF. The process is described at PSARC/2018/018. That means that you will
need to make three changes to the gate.

a) Mark component as legacy
b) Make sure that no package do depend on the legacy one
c) Remove the component/package altogether

The timing is defined that

 - timer starts when a) is delivered to customer in SRU
 - c) must not happen sooner than 6 months from a). In other words customer can
   be sure that if the package was just marked legacy it will stay on the
   machine for at least 6 more months.
 - b) has to be completed at least three months before c). In other words, we
   are sure that no other package shipped by us required that removed package
   for at last three months
 - it is expected that we release one SRU a month so if the rename happened in
   SRU50 we can delete in SRU56 earliest
 - if there are reasons to deviate from the process, it is documented in the
   associated arc case

ad a) Mark component as legacy
-----------------------------------------
This stage consists of two steps:
 - you need to mark the legacy package by
   set name=pkg.legacy value=true
 - at the same time we create release note telling customer that the package is
   going away soon-ish. That note is displayed to customer once they update the
   component to legacy one.

Since PSARC/2020/053, we don't have to rename packages, making this stage of
the process much simpler.


ad b) Verification who depends on given package
-----------------------------------------------
If you are removing mysql-55* for example, you can run:

pkg search -r 'depend::database/mysql-55*'

You can ignore
 - consolidation/userland/userland-incorporation
 - packages which themselves you are moving to legacy namespace

You can potentially ignore 'developer/opensolaris/userland'. This package
contains dependency on all REQUIRED_PACKAGES from all components. You should be
removing such REQUIRED_PACKAGES while removing the named packages.

Sadly pkg search is not optimal, so YMMW. Be sure to ask in mailing list if you
have troubles.


ad c) Finally removing the components
-------------------------------------
The last step is to remove the components. This consists of two steps
 - hg rm components/my_component
 - edit components/meta-packages/history/history and add all the affected
   packages there. One line per package, but you have to include the legacy
   packages too.

  my/package@1.2.3-AUTO_FMRI
  legacy/my/package@1.2.3-AUTO_FMRI



Deleting the Component
----------------------

At some point, you will need to do a "hg remove" of the component's directory.
This can be done before or after you make the necessary entry in the
components/meta-packages/history/history file.  In this file you will see plenty
of examples like this:

backup/areca@7.1-5.12.0.0.0.85.0

You will need to make sure you have the correct package name, version, and
build you are targeting for the EOF for your new entry.  Also check for an old
SUNW entry at the top of the file.  If there is one you will need to change
this to match the targeted build.  So something like this:

SUNWareca@7.1,5.11-0.133 backup/areca@7.1-0.133

Should be changed to:

SUNWareca@7.1-5.12.0.0.0.85.0

Remember that the package may have had numerous names in its history.
Generally the way to find this is by using:

    pkg search -o search.match_type,pkg.name depend::<package name>

First with the package to be EOF'ed, and then examining each of the dependent
packages. If there are require dependencies on any of the dependents, then the
latter should be examined to see if it need to be either EOF'ed at the same
time, or at least updated to remove the dependency you're trying to EOF.

Check to see if the package you are removing is referenced by a group package
(pkg list -n 'group/*').  See the 'EOFs and Removals' and 'Group Packages'
sections in /usr/src/pkg/README.pkg from the on-gate for further details. 

Testing
-------

To test your changes the first thing you will need to do is to invoke
'gmake publish' from the components/meta-packages/history directory or at the
top level (a full Userland build) if you are removing multiple components.  Once
this is complete you will need to setup a client with the EOF package(s)
installed.

Then perform the following steps:

1. # pkg set-publisher \
     -P -p file:///net/strax/builds/your_name/your_dir/i386/repo


If you are removing just a single component:

2. pkg change-facet 'facet.version-lock.<eof_package_name_goes_here>=false'
3. pkg update pkg://nightly/<eof_package_name_goes_here>

After the update the component package should be removed from the test system.


If you are removing multiple components:

2. pkg change-facet \
     version-lock.consolidation/userland/userland-incorporation=false
3. pkg update pkg://nightly/consolidation/userland/userland-incorporation

After the update the EOF component packages should be removed from the test
system.

For languages and anything else that has modules or is otherwise part of the
Userland build environment you will need to do a full build, of both ISAs, on
the test machines you just updated.



=====================
Experimental packages
=====================
There are components which we for any reason want to have in the gate, have the
ability to build them but do not deliver them to WOS. This is called
experimental packages. Such packages will
 - be in the components/experimental directory
 - will include make-rules/experimental-only.mk in their Makefile
 - will have a record in components/meta-packages/history/history similarly as
   if you just deleted the component completely (there is section at the end
   for experimental packages)

If you run gmake install/build/publish in the component directory it will
work normally, but the package will be published into
$(hg root)/$(uname -p)/repo.experimental . If you run full gate build the
obsolete packages will be created from 'history' as usual in addition to the
packages being delivered to the experimental repo.



=====================
Python incorporations
=====================

a) incorporations
-----------------
All installed packages on a system should normally be from the same build
(or SRU). If we install packages from different builds we risk that they might
not work together. Such coherence is achieved by incorporations. Incorporation
is a package which lists what version of each package can be installed.
See pkg(7) - Depend Actions - type - incorporate.
Biggest incorporation is userland-incorporation which lists most of the
packages delivered by userland consolidation.

b) facets
---------

There are however exceptional situations when we want to install a package from
different build. For this reason the incorporations contain a mechanism which
can circumvent the incorporation limit for a specific package. For this reason
the incorporations do contain facets which allow us to disable single specific
incorporation dependency. For example the following action from userland-incorporation:

depend facet.version-lock.archiver/unrar=true fmri=archiver/unrar@6.2.10-11.4.69.0.0.165.0 type=incorporate

says that as long as userland-incorporation is installed the unrar package must
be of a specific version. But only when facet.version-lock.archiver/unrar is
set to true. Such facet is considered to be true by default.
(see FACETS AND VARIANTS in pkg(7)). If we want to install different version of
unrar we have to set the fact to false first:

pkg change-facet facet.version-lock.archiver/unrar=false

That disables the incorporation for unrar package and we can potentially
install any FMRI of unrar package.

Please note that this is simplified case. Other packages may have more
dependencies on unrar. Also unrar itself may have dependencies on the rest of
the system. All such dependencies have to be satisfied without regard to how
the facet is set.

c) freezing
-----------
Freezing a package means to allow the whole system to update with the exception
of the package. In order to achieve that you have to
 - tell IPS to make given package un-changeable (example: pkg freeze archiver/unrar)
 - tell IPS to relax incorporation depends (example: pkg change-facet facet.version-lock.archiver/unrar=false)

After that you can update whole system and leave the unrar unchanged (with the
caveat mentioned in note above).

d) groups of packages
---------------------
Some packages are logically grouped together. For example python 3.7 (or any
other version) and all it's modules. If one wants to freeze python 3.7 (perhaps
because python 3.7 is going to be removed from Solaris) one would have to apply
'freezing' as mentioned above to any and all python 3.7 related packages. This
is quite impractical. In order to solve that we are introducing python
incorporations. That means that there is new incorporation (for example
runtime/python-37-incorporation) which lists all python 3.7 modules. It
supports the same facets as userland-incorporation. When you want to freeze
python 3.7 you need to freeze only this one incorporation. For example:

pkg change-facet -v facet.version-lock.runtime/python-37-incorporation=false
pkg freeze runtime/python-37-incorporation@11.4
pkg update ...

This allows the main userland-incorporation to be updated while keeping "old"
python-37-incorporation intact. And the "old" incorporation keeps all python
3.7 modules consistent with regards to build number.

e) python incorporations
------------------------

In order to make group packages unconditionally bound by python incorporation
(similarly to other packages are bound by userland-incorporation) we must make
sure that the python incorporation is installed. Every package which uses
python does require runtime/python-XY. So it is enough to make this
runtime/python-XY require runtime/python-XY-incorporation to be present.

f) Implementation and the use of python incorporations
------------------------------------------------------------
This feature is used to be able to freeze python runtime and corresponding
modules in a simple way. Each python version has it's own incorporation.
Userland infrastructure already has means of placing a package into different
incorporation (default is userland-incorporation). Moving a package into python
incorporation is done by setting make variable

CONSOLIDATION = python

This is automatically set in make-rules/python-common.mk so any python module
is taken care of. Any other packages belonging to python-incorporation (such as
the runtime itself which does not use python-common.mk) has to include the
line above.

On the other hand packages which do use python-common.mk, but should not be
included in python incorporation must have

CONSOLIDATION = userland

this is for example mercurial. Please remember that the goal is to lock
together python interpreter and any modules. Not every package using given
python interpreter.

g) Obsoleting python
--------------------
Once we obsolete python we must make sure that the obsolete packages are not
going to be installed. We must make the python incorporation a version 99
(generally something > than 11.4). This is done by new argument to
userland-incorporator in $WS/components/Makefile:

		$(WS_TOOLS)/userland-incorporator \
			--repository $(PKG_REPO) \
			--version $(PKG_SOLARIS_VERSION),$(BUILD_VERSION) \
            --incorporation-version runtime/python-37-incorporation=99 \  <-----
            ...

# vi:set fdm=marker expandtab ts=4:
