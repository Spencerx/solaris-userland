Support for updated nscd interfaces in Solaris

--- samba-4.19.8/nsswitch/winbind_nss_solaris.c
+++ samba-4.19.8/nsswitch/winbind_nss_solaris.c
@@ -2,6 +2,9 @@ /*
   Solaris NSS wrapper for winbind
   - Shirish Kalele 2000
 
+  Support for updated nscd interfaces in Solaris
+  - Tomas Heran <tomas.heran@oracle.com> 2019
+
   Based on Luke Howard's ldap_nss module for Solaris
   */
 
@@ -26,7 +29,6 @@ */
 
 #undef DEVELOPER
 
-
 #include "winbind_client.h"
 #include <stdlib.h>
 #include <sys/types.h>
@@ -34,6 +36,7 @@ #include <sys/param.h>
 #include <string.h>
 #include <pwd.h>
 #include <syslog.h>
+#include <thread.h>
 
 #if !defined(HPUX)
 #include <sys/syslog.h>
@@ -55,6 +58,60 @@ #endif
 
 #define NSS_ARGS(args) ((nss_XbyY_args_t *)args)
 
+#if defined(SUNOS5)
+
+/* Let the nscd know we've updated to the new interfaces. */
+void *_nss_winbind_version = NULL;
+
+#ifdef NSS_DEBUG_NSCD
+#define	NSS_DEBUG _nss_winbind_printf
+#endif
+
+#define	LOGBUFLEN 1024
+extern void _nscd_vlogit(const char *format, va_list ap);
+
+#pragma weak _nscd_vlogit = _vlogit
+
+void
+_vlogit(const char *format, va_list ap)
+{
+	fprintf(stderr, "nss_winbind: ");
+	vfprintf(stderr, format, ap);
+}
+
+void
+_nss_winbind_printf(const char *fmt, ...)
+{
+	struct timeval  tv;
+	struct tm       ltime;
+	char            timestr[64];
+	char            fbuffer[LOGBUFLEN];
+	size_t          len;
+	va_list ap;
+
+	va_start(ap, fmt);
+	if (gettimeofday(&tv, NULL) != 0) {
+		(void) snprintf(fbuffer, LOGBUFLEN,
+		    "<time conversion failed> NSS_WINBIND [%d:%u]: ",
+		    (int)getpid(), thr_self());
+	} else {
+		(void) localtime_r(&tv.tv_sec, &ltime);
+		(void) strftime(timestr, 64, "%Y-%m-%dT%H:%M:%S", &ltime);
+		(void) snprintf(fbuffer,
+		    LOGBUFLEN, "%s.%06ld NSS_WINBIND [%d:%u]: ", timestr,
+		    tv.tv_usec, (int)getpid(), thr_self());
+	}
+	len = strlcat(fbuffer, fmt, LOGBUFLEN);
+	if ((len + 1) < LOGBUFLEN && len > 0 && fbuffer[len-1] != '\n') {
+		fbuffer[len] = '\n';
+		fbuffer[len+1] = '\0';
+	}
+
+	(*_nscd_vlogit)(fbuffer, ap);
+	va_end(ap);
+}
+#endif
+
 #ifdef HPUX
 
 /*
@@ -90,30 +147,91 @@ NSS_DEBUG("_nss_winbind_endpwent_solwrap
 	return _nss_winbind_endpwent();
 }
 
+static int
+update_password_buffer(nss_XbyY_args_t *argp,
+    const char *name,
+    uid_t uid, gid_t gid, const char *gecos,
+    const char *homedir, const char *shell)
+{
+	int     buflen;
+	char    *buffer;
+
+	buflen = snprintf(NULL, 0, "%s:%s:%u:%u:%s:%s:%s",
+	    name, "x", uid, gid, gecos, homedir, shell) + 1;
+
+	if (buflen > argp->buf.buflen)
+		return (-1);
+	buflen = argp->buf.buflen;
+	buffer = argp->buf.buffer;
+
+	(void) snprintf(buffer, buflen, "%s:%s:%u:%u:%s:%s:%s",
+	    name, "x", uid, gid, gecos, homedir, shell);
+
+	return (0);
+}
+
 static NSS_STATUS
 _nss_winbind_getpwent_solwrap (nss_backend_t* be, void *args)
 {
 	NSS_STATUS ret;
-	char* buffer = NSS_ARGS(args)->buf.buffer;
-	int buflen = NSS_ARGS(args)->buf.buflen;
+	char* buffer = NULL;
+	int buflen = 0;
 	struct passwd* result = (struct passwd*) NSS_ARGS(args)->buf.result;
-	int* errnop = &NSS_ARGS(args)->erange;
+	bool res_needed = (result != NULL); /* Is structured result needed? */
 	char logmsg[80];
 
+	NSS_DEBUG("_nss_winbind_getpwent_solwrap");
+
+	if (!res_needed) {
+		result = SMB_MALLOC_P(struct passwd);
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = calloc(1, buflen);
+	} else {
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = NSS_ARGS(args)->buf.buffer;
+	}
+
 	ret = _nss_winbind_getpwent_r(result, buffer,
-				      buflen, errnop);
+				      buflen, &NSS_ARGS(args)->erange);
 
-	if(ret == NSS_STATUS_SUCCESS)
-		{
-			snprintf(logmsg, 79, "_nss_winbind_getpwent_solwrap: Returning user: %s\n",
-				 result->pw_name);
-			NSS_DEBUG(logmsg);
-			NSS_ARGS(args)->returnval = (void*) result;
-		} else {
-			snprintf(logmsg, 79, "_nss_winbind_getpwent_solwrap: Returning error: %d.\n",ret);
-			NSS_DEBUG(logmsg);
-		}
+	if(ret != NSS_STATUS_SUCCESS) {
+		snprintf(logmsg, 79,
+		    "_nss_winbind_getpwent_solwrap: Returning error: %d.\n",
+		    ret);
+		NSS_DEBUG(logmsg);
+		goto out;
+	}
+
+	/*
+	 * passwd(5) format does not permit colon within gecos data field
+	 */
+	for (char *p = result->pw_gecos; (p = strchr(p, ':')) != NULL; *p = ' ');
 
+	snprintf(logmsg, 79,
+	    "_nss_winbind_getpwent_solwrap: Returning user: %s\n",
+	    result->pw_name);
+	NSS_DEBUG(logmsg);
+
+	if (res_needed) {
+		NSS_ARGS(args)->returnval = (void*) result;
+	} else {
+		(void) update_password_buffer(NSS_ARGS(args),
+		    result->pw_name,
+		    result->pw_uid,
+		    result->pw_gid,
+		    result->pw_gecos,
+		    result->pw_dir,
+		    result->pw_shell);
+		NSS_ARGS(args)->returnval = NSS_ARGS(args)->buf.buffer;
+		NSS_ARGS(args)->returnlen = strlen(NSS_ARGS(args)->buf.buffer);
+	}
+out:
+	if (!res_needed) {
+		free(result);
+		free(buffer);
+		result = NULL;
+		buffer = NULL;
+	}
 	return ret;
 }
 
@@ -122,17 +240,56 @@ _nss_winbind_getpwnam_solwrap (nss_backe
 {
 	NSS_STATUS ret;
 	struct passwd* result = (struct passwd*) NSS_ARGS(args)->buf.result;
+	bool res_needed = (result != NULL); /* Is structured result needed? */
+	char *buffer = NULL;
+	int buflen = 0;
 
 	NSS_DEBUG("_nss_winbind_getpwnam_solwrap");
 
+	if (!res_needed) {
+		result = SMB_MALLOC_P(struct passwd);
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = calloc(1, buflen);
+	} else {
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = NSS_ARGS(args)->buf.buffer;
+	}
+
 	ret = _nss_winbind_getpwnam_r (NSS_ARGS(args)->key.name,
 						result,
-						NSS_ARGS(args)->buf.buffer,
-						NSS_ARGS(args)->buf.buflen,
+						buffer,
+						buflen,
 						&NSS_ARGS(args)->erange);
-	if(ret == NSS_STATUS_SUCCESS)
-		NSS_ARGS(args)->returnval = (void*) result;
+	if(ret != NSS_STATUS_SUCCESS) {
+		goto out;
+	}
+
+	/*
+	 * passwd(5) format does not permit colon within gecos data field
+	 */
+	for (char *p = result->pw_gecos; (p = strchr(p, ':')) != NULL; *p = ' ');
 
+	if (res_needed) {
+		NSS_ARGS(args)->returnval = (void*) result;
+	} else {
+		(void) update_password_buffer(NSS_ARGS(args),
+		    result->pw_name,
+		    result->pw_uid,
+		    result->pw_gid,
+		    result->pw_gecos,
+		    result->pw_dir,
+		    result->pw_shell);
+		NSS_ARGS(args)->returnval = NSS_ARGS(args)->buf.buffer;
+		NSS_ARGS(args)->returnlen = strlen(NSS_ARGS(args)->buf.buffer);
+	}
+
+out:
+	if (!res_needed) {
+		free(result);
+		free(buffer);
+		result = NULL;
+		buffer = NULL;
+	}
 	return ret;
 }
 
@@ -141,16 +298,57 @@ _nss_winbind_getpwuid_solwrap(nss_backen
 {
 	NSS_STATUS ret;
 	struct passwd* result = (struct passwd*) NSS_ARGS(args)->buf.result;
+	bool res_needed = (result != NULL); /* Is structured result needed? */
+	char *buffer = NULL;
+	int buflen = 0;
 
 	NSS_DEBUG("_nss_winbind_getpwuid_solwrap");
+
+	if (!res_needed) {
+		result = SMB_MALLOC_P(struct passwd);
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = calloc(1, buflen);
+	} else {
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = NSS_ARGS(args)->buf.buffer;
+	}
+
 	ret = _nss_winbind_getpwuid_r (NSS_ARGS(args)->key.uid,
 				       result,
-				       NSS_ARGS(args)->buf.buffer,
-				       NSS_ARGS(args)->buf.buflen,
+				       buffer,
+				       buflen,
 				       &NSS_ARGS(args)->erange);
-	if(ret == NSS_STATUS_SUCCESS)
-		NSS_ARGS(args)->returnval = (void*) result;
 
+	if(ret != NSS_STATUS_SUCCESS) {
+		goto out;
+	}
+
+	/*
+	 * passwd(5) format does not permit colon within gecos data field
+	 */
+	for (char *p = result->pw_gecos; (p = strchr(p, ':')) != NULL; *p = ' ');
+
+	if (res_needed) {
+		NSS_ARGS(args)->returnval = (void*) result;
+	} else {
+		(void) update_password_buffer(NSS_ARGS(args),
+		    result->pw_name,
+		    result->pw_uid,
+		    result->pw_gid,
+		    result->pw_gecos,
+		    result->pw_dir,
+		    result->pw_shell);
+		NSS_ARGS(args)->returnval = NSS_ARGS(args)->buf.buffer;
+		NSS_ARGS(args)->returnlen = strlen(NSS_ARGS(args)->buf.buffer);
+	}
+
+out:
+	if (!res_needed) {
+		free(result);
+		free(buffer);
+		result = NULL;
+		buffer = NULL;
+	}
 	return ret;
 }
 
@@ -205,29 +403,96 @@ NSS_DEBUG("_nss_winbind_endgrent_solwrap
 	return _nss_winbind_endgrent();
 }
 
+static int
+update_group_buffer(nss_XbyY_args_t *argp, const char *name, gid_t gid,
+    const char **mem)
+{
+	int     buflen;
+	char    *buffer;
+	int	rv;
+
+	buflen = snprintf(NULL, 0, "%s:x:%u:%s",
+	    name, gid, *mem ? *mem : "") + 1;
+
+	for (const char **ptr = mem; *ptr; ptr++) {
+		buflen += strlen(*ptr);
+		if (ptr != mem)
+			buflen += 1; /* strlen(",") */
+	}
+
+	if (buflen > argp->buf.buflen)
+		return (-1);
+
+	buflen = argp->buf.buflen;
+	buffer = argp->buf.buffer;
+
+	rv += snprintf(buffer, buflen, "%s:x:%u:", name, gid);
+	buffer += rv;
+	buflen -= rv;
+
+	for (const char **ptr = mem; *ptr; ptr++) {
+		if (ptr != mem) {
+			rv = snprintf(buffer, buflen, ",");
+			buffer += rv;
+			buflen -= rv;
+		}
+		rv = snprintf(buffer, buflen, *ptr);
+		buffer += rv;
+		buflen -= rv;
+	}
+
+	return (0);
+}
+
 static NSS_STATUS
 _nss_winbind_getgrent_solwrap(nss_backend_t* be, void* args)
 {
 	NSS_STATUS ret;
-	char* buffer = NSS_ARGS(args)->buf.buffer;
-	int buflen = NSS_ARGS(args)->buf.buflen;
+	char* buffer = NULL;
+	int buflen = 0;
 	struct group* result = (struct group*) NSS_ARGS(args)->buf.result;
-	int* errnop = &NSS_ARGS(args)->erange;
+	bool res_needed = (result != NULL); /* Is structured result needed? */
 	char logmsg[80];
 
-	ret = _nss_winbind_getgrent_r(result, buffer,
-				      buflen, errnop);
+	NSS_DEBUG("_nss_winbind_getgrent_solwrap");
 
-	if(ret == NSS_STATUS_SUCCESS)
-		{
-			snprintf(logmsg, 79, "_nss_winbind_getgrent_solwrap: Returning group: %s\n", result->gr_name);
-			NSS_DEBUG(logmsg);
-			NSS_ARGS(args)->returnval = (void*) result;
-		} else {
-			snprintf(logmsg, 79, "_nss_winbind_getgrent_solwrap: Returning error: %d.\n", ret);
-			NSS_DEBUG(logmsg);
-		}
+	if (!res_needed) {
+		result = SMB_MALLOC_P(struct group);
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = calloc(1, buflen);
+	} else {
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = NSS_ARGS(args)->buf.buffer;
+	}
+
+	ret = _nss_winbind_getgrent_r(result, buffer, buflen,
+	    &NSS_ARGS(args)->erange);
 
+	if(ret != NSS_STATUS_SUCCESS) {
+		snprintf(logmsg, 79, "_nss_winbind_getgrent_solwrap: Returning error: %d.\n", ret);
+		NSS_DEBUG(logmsg);
+		goto out;
+	}
+
+	snprintf(logmsg, 79, "_nss_winbind_getgrent_solwrap: Returning group: %s\n", result->gr_name);
+	NSS_DEBUG(logmsg);
+	if (res_needed) {
+		NSS_ARGS(args)->returnval = (void*) result;
+	} else {
+		(void) update_group_buffer(NSS_ARGS(args),
+		    result->gr_name,
+		    result->gr_gid,
+		    (const char **)result->gr_mem);
+		NSS_ARGS(args)->returnval = NSS_ARGS(args)->buf.buffer;
+		NSS_ARGS(args)->returnlen = strlen(NSS_ARGS(args)->buf.buffer);
+	}
+out:
+	if (!res_needed) {
+		free(result);
+		free(buffer);
+		result = NULL;
+		buffer = NULL;
+	}
 	return ret;
 
 }
@@ -236,17 +501,50 @@ static NSS_STATUS
 _nss_winbind_getgrnam_solwrap(nss_backend_t* be, void* args)
 {
 	NSS_STATUS ret;
+	char* buffer = NULL;
+	int buflen = 0;
 	struct group* result = (struct group*) NSS_ARGS(args)->buf.result;
+	bool res_needed = (result != NULL); /* Is structured result needed? */
+	char logmsg[80];
 
 	NSS_DEBUG("_nss_winbind_getgrnam_solwrap");
+
+	if (!res_needed) {
+		result = SMB_MALLOC_P(struct group);
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = calloc(1, buflen);
+	} else {
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = NSS_ARGS(args)->buf.buffer;
+	}
+
 	ret = _nss_winbind_getgrnam_r(NSS_ARGS(args)->key.name,
-				      result,
-				      NSS_ARGS(args)->buf.buffer,
-				      NSS_ARGS(args)->buf.buflen,
-				      &NSS_ARGS(args)->erange);
+	    result,
+	    buffer,
+	    buflen,
+	    &NSS_ARGS(args)->erange);
 
-	if(ret == NSS_STATUS_SUCCESS)
+	if(ret != NSS_STATUS_SUCCESS) {
+		goto out;
+	}
+
+	if (res_needed) {
 		NSS_ARGS(args)->returnval = (void*) result;
+	} else {
+		(void) update_group_buffer(NSS_ARGS(args),
+		    result->gr_name,
+		    result->gr_gid,
+		    (const char **)result->gr_mem);
+		NSS_ARGS(args)->returnval = NSS_ARGS(args)->buf.buffer;
+		NSS_ARGS(args)->returnlen = strlen(NSS_ARGS(args)->buf.buffer);
+	}
+out:
+	if (!res_needed) {
+		free(result);
+		free(buffer);
+		result = NULL;
+		buffer = NULL;
+	}
 
 	if (NSS_ARGS(args)->erange == ERANGE && ret == NSS_STATUS_TRYAGAIN)
 		return NSS_STATUS_UNAVAIL;
@@ -258,17 +556,50 @@ static NSS_STATUS
 _nss_winbind_getgrgid_solwrap(nss_backend_t* be, void* args)
 {
 	NSS_STATUS ret;
+	char* buffer = NULL;
+	int buflen = 0;
 	struct group* result = (struct group*) NSS_ARGS(args)->buf.result;
+	bool res_needed = (result != NULL); /* Is structured result needed? */
+	char logmsg[80];
 
 	NSS_DEBUG("_nss_winbind_getgrgid_solwrap");
-	ret = _nss_winbind_getgrgid_r (NSS_ARGS(args)->key.gid,
-				       result,
-				       NSS_ARGS(args)->buf.buffer,
-				       NSS_ARGS(args)->buf.buflen,
-				       &NSS_ARGS(args)->erange);
 
-	if(ret == NSS_STATUS_SUCCESS)
+	if (!res_needed) {
+		result = SMB_MALLOC_P(struct group);
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = calloc(1, buflen);
+	} else {
+		buflen = NSS_ARGS(args)->buf.buflen;
+		buffer = NSS_ARGS(args)->buf.buffer;
+	}
+
+	ret = _nss_winbind_getgrgid_r(NSS_ARGS(args)->key.gid,
+	    result,
+	    buffer,
+	    buflen,
+	    &NSS_ARGS(args)->erange);
+
+	if(ret != NSS_STATUS_SUCCESS) {
+		goto out;
+	}
+
+	if (res_needed) {
 		NSS_ARGS(args)->returnval = (void*) result;
+	} else {
+		(void) update_group_buffer(NSS_ARGS(args),
+		    result->gr_name,
+		    result->gr_gid,
+		    (const char **)result->gr_mem);
+		NSS_ARGS(args)->returnval = NSS_ARGS(args)->buf.buffer;
+		NSS_ARGS(args)->returnlen = strlen(NSS_ARGS(args)->buf.buffer);
+	}
+out:
+	if (!res_needed) {
+		free(result);
+		free(buffer);
+		result = NULL;
+		buffer = NULL;
+	}
 
 	if (NSS_ARGS(args)->erange == ERANGE && ret == NSS_STATUS_TRYAGAIN)
 		return NSS_STATUS_UNAVAIL;
@@ -374,12 +705,20 @@ and newline at the end. so at first we w
 	   then construct list of addresses for hostent.
 	*/
 	p = strchr(response->data.winsresp, '\n');
-	if(p) *p = '\0';
-	else {/* it must be broken */
+	if(p) {
+		*p = '\0';
+	} else {/* it must be broken */
 		argp->h_errno = NO_DATA;
 		return NSS_STATUS_UNAVAIL;
 	}
 
+	if (he == NULL) {
+		(void) strncpy(buffer, response->data.winsresp, buflen);
+		argp->returnval = buffer;
+		argp->returnlen = strlen(response->data.winsresp);
+		return NSS_STATUS_SUCCESS;
+	}
+
 	for(; p != response->data.winsresp; p--) {
 		if(*p == '\t') addrcount++;
 	}
@@ -488,6 +827,8 @@ };
 	NSS_STATUS ret;
 	int af;
 
+	NSS_DEBUG("_nss_winbind_ipnodes_getbyname");
+
 	/* I assume there that AI_ADDRCONFIG cases are handled in nss
 	   frontend code, at least it seems done so in solaris...
 
@@ -533,6 +874,8 @@ .length = 0,
 	};
 	NSS_STATUS ret;
 
+	NSS_DEBUG("_nss_winbind_hosts_getbyname");
+
 	strncpy(request.data.winsreq, argp->key.name, sizeof(request.data.winsreq) - 1);
 	request.data.winsreq[sizeof(request.data.winsreq) - 1] = '\0';
 
@@ -559,6 +902,8 @@ };
 	nss_XbyY_args_t	*argp = (nss_XbyY_args_t *)args;
 	const char *p;
 
+	NSS_DEBUG("_nss_winbind_hosts_getbyaddr");
+
 #if defined(AF_INET6)
 	/* winbindd currently does not resolve IPv6 */
 	if(argp->key.hostaddr.type == AF_INET6) {
@@ -591,18 +936,21 @@ /* winbind does not provide setent, gete
 static NSS_STATUS
 _nss_winbind_common_endent(nss_backend_t* be, void *args)
 {
+	NSS_DEBUG("_nss_winbind_common_endent UNAVAIL");
         return (NSS_STATUS_UNAVAIL);
 }
 
 static NSS_STATUS
 _nss_winbind_common_setent(nss_backend_t* be, void *args)
 {
+	NSS_DEBUG("_nss_winbind_common_setent UNAVAIL");
         return (NSS_STATUS_UNAVAIL);
 }
 
 static NSS_STATUS
 _nss_winbind_common_getent(nss_backend_t* be, void *args)
 {
+	NSS_DEBUG("_nss_winbind_common_getent UNAVAIL");
         return (NSS_STATUS_UNAVAIL);
 }
 
@@ -611,6 +959,8 @@ _nss_winbind_common_constr (nss_backend_
 {
 	nss_backend_t* be;
 
+	NSS_DEBUG("_nss_winbind_common_constr");
+
 	if(!(be = SMB_MALLOC_P(nss_backend_t)) )
 	return NULL;
 
@@ -624,6 +974,7 @@ static NSS_STATUS
 _nss_winbind_common_destr (nss_backend_t* be, void* args)
 {
 	SAFE_FREE(be);
+	NSS_DEBUG("_nss_winbind_common_destr");
 	return NSS_STATUS_SUCCESS;
 }
 
@@ -640,6 +991,7 @@ nss_backend_t *
 _nss_winbind_ipnodes_constr(dummy1, dummy2, dummy3)
         const char      *dummy1, *dummy2, *dummy3;
 {
+	NSS_DEBUG("Initialized nss_winbind ipnodes backend");
 	return (_nss_winbind_common_constr(ipnodes_ops,
 		sizeof (ipnodes_ops) / sizeof (ipnodes_ops[0])));
 }
@@ -657,6 +1009,7 @@ nss_backend_t *
 _nss_winbind_hosts_constr(dummy1, dummy2, dummy3)
         const char      *dummy1, *dummy2, *dummy3;
 {
+	NSS_DEBUG("Initialized nss_winbind hosts backend");
 	return (_nss_winbind_common_constr(host_ops,
 		sizeof (host_ops) / sizeof (host_ops[0])));
 }
--- samba-4.19.8/docs-xml/manpages/winbindd.8.xml	2024-10-03 17:41:10.799845757 +0200
+++ samba-4.19.8/docs-xml/manpages/winbindd.8.xml	2024-10-03 17:46:36.766464205 +0200
@@ -384,6 +384,10 @@
 
 	<para>If the Windows NT SID to UNIX user and group id mapping
 	file is damaged or destroyed then the mappings will be lost. </para>
+
+	<para>Any colon <literal>(:)</literal> character in the
+	<filename>passwd</filename> <literal>gecos</literal> field will be
+	replaced with a space &shy;<literal>(&nbsp;)</literal> character.</para>
 </refsect1>
 
 
