diff -u -r rsyslog-8.2206.0-nocrl/plugins/imtcp/imtcp.c rsyslog-8.2206.0-withcrl/plugins/imtcp/imtcp.c
--- rsyslog-8.2206.0-nocrl/plugins/imtcp/imtcp.c	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/plugins/imtcp/imtcp.c	2023-07-03 11:19:57.080690204 +0100
@@ -142,6 +142,7 @@
 	uchar *pszStrmDrvrAuthMode;
 	uchar *pszStrmDrvrPermitExpiredCerts;
 	uchar *pszStrmDrvrCAFile;
+	uchar *pszStrmDrvrCRLFile;
 	uchar *pszStrmDrvrKeyFile;
 	uchar *pszStrmDrvrCertFile;
 	permittedPeers_t *pPermPeersRoot;
@@ -182,6 +183,7 @@
 	uchar *pszStrmDrvrAuthMode; /* authentication mode to use */
 	uchar *pszStrmDrvrPermitExpiredCerts; /* control how to handly expired certificates */
 	uchar *pszStrmDrvrCAFile;
+	uchar *pszStrmDrvrCRLFile;
 	uchar *pszStrmDrvrKeyFile;
 	uchar *pszStrmDrvrCertFile;
 	permittedPeers_t *pPermPeersRoot;
@@ -365,6 +367,7 @@
 	inst->pszStrmDrvrAuthMode = NULL;
 	inst->pszStrmDrvrPermitExpiredCerts = NULL;
 	inst->pszStrmDrvrCAFile = NULL;
+	inst->pszStrmDrvrCRLFile = NULL;
 	inst->pszStrmDrvrKeyFile = NULL;
 	inst->pszStrmDrvrCertFile = NULL;
 	inst->pPermPeersRoot = NULL;
@@ -505,6 +508,10 @@
 			? modConf->pszStrmDrvrCAFile : inst->pszStrmDrvrCAFile;
 	CHKiRet(tcpsrv.SetDrvrCAFile(pOurTcpsrv, psz));
 
+	psz = (inst->pszStrmDrvrCRLFile == NULL)
+			? modConf->pszStrmDrvrCRLFile : inst->pszStrmDrvrCRLFile;
+	CHKiRet(tcpsrv.SetDrvrCRLFile(pOurTcpsrv, psz));
+
 	psz = (inst->pszStrmDrvrKeyFile == NULL)
 			? modConf->pszStrmDrvrKeyFile : inst->pszStrmDrvrKeyFile;
 	CHKiRet(tcpsrv.SetDrvrKeyFile(pOurTcpsrv, psz));
@@ -607,6 +614,8 @@
 			inst->pszStrmDrvrPermitExpiredCerts = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
 		} else if(!strcmp(inppblk.descr[i].name, "streamdriver.cafile")) {
 			inst->pszStrmDrvrCAFile = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
+		} else if(!strcmp(inppblk.descr[i].name, "streamdriver.crlfile")) {
+			inst->pszStrmDrvrCRLFile = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
 		} else if(!strcmp(inppblk.descr[i].name, "streamdriver.keyfile")) {
 			inst->pszStrmDrvrKeyFile = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
 		} else if(!strcmp(inppblk.descr[i].name, "streamdriver.certfile")) {
@@ -700,6 +709,7 @@
 	loadModConf->pszStrmDrvrAuthMode = NULL;
 	loadModConf->pszStrmDrvrPermitExpiredCerts = NULL;
 	loadModConf->pszStrmDrvrCAFile = NULL;
+	loadModConf->pszStrmDrvrCRLFile = NULL;
 	loadModConf->pszStrmDrvrKeyFile = NULL;
 	loadModConf->pszStrmDrvrCertFile = NULL;
 	loadModConf->pPermPeersRoot = NULL;
@@ -785,6 +795,8 @@
 			loadModConf->pszStrmDrvrPermitExpiredCerts = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
 		} else if(!strcmp(modpblk.descr[i].name, "streamdriver.cafile")) {
 			loadModConf->pszStrmDrvrCAFile = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
+		} else if(!strcmp(modpblk.descr[i].name, "streamdriver.crlfile")) {
+			loadModConf->pszStrmDrvrCRLFile = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
 		} else if(!strcmp(modpblk.descr[i].name, "streamdriver.keyfile")) {
 			loadModConf->pszStrmDrvrKeyFile = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
 		} else if(!strcmp(modpblk.descr[i].name, "streamdriver.certfile")) {
@@ -911,6 +923,7 @@
 	free(pModConf->pszStrmDrvrAuthMode);
 	free(pModConf->pszStrmDrvrPermitExpiredCerts);
 	free(pModConf->pszStrmDrvrCAFile);
+	free(pModConf->pszStrmDrvrCRLFile);
 	free(pModConf->pszStrmDrvrKeyFile);
 	free(pModConf->pszStrmDrvrCertFile);
 	if(pModConf->pPermPeersRoot != NULL) {
@@ -923,6 +936,7 @@
 		free((void*)inst->pszStrmDrvrName);
 		free((void*)inst->pszStrmDrvrPermitExpiredCerts);
 		free((void*)inst->pszStrmDrvrCAFile);
+		free((void*)inst->pszStrmDrvrCRLFile);
 		free((void*)inst->pszStrmDrvrKeyFile);
 		free((void*)inst->pszStrmDrvrCertFile);
 		free((void*)inst->gnutlsPriorityString);
diff -u -r rsyslog-8.2206.0-nocrl/runtime/glbl.c rsyslog-8.2206.0-withcrl/runtime/glbl.c
--- rsyslog-8.2206.0-nocrl/runtime/glbl.c	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/glbl.c	2023-07-03 11:24:11.932986652 +0100
@@ -114,6 +114,7 @@
 	{ "debug.gnutls", eCmdHdlrNonNegInt, 0 },
 	{ "debug.unloadmodules", eCmdHdlrBinary, 0 },
 	{ "defaultnetstreamdrivercafile", eCmdHdlrString, 0 },
+	{ "defaultnetstreamdrivercrlfile", eCmdHdlrString, 0 },
 	{ "defaultnetstreamdriverkeyfile", eCmdHdlrString, 0 },
 	{ "defaultnetstreamdrivercertfile", eCmdHdlrString, 0 },
 	{ "defaultnetstreamdriver", eCmdHdlrString, 0 },
@@ -258,6 +259,7 @@
 SIMP_PROP(OptionDisallowWarning, optionDisallowWarning, int)
 /* We omit setter on purpose, because we want to customize it */
 SIMP_PROP_GET(DfltNetstrmDrvrCAF, pszDfltNetstrmDrvrCAF, uchar*)
+SIMP_PROP_GET(DfltNetstrmDrvrCRLF, pszDfltNetstrmDrvrCRLF, uchar*)
 SIMP_PROP_GET(DfltNetstrmDrvrCertFile, pszDfltNetstrmDrvrCertFile, uchar*)
 SIMP_PROP_GET(DfltNetstrmDrvrKeyFile, pszDfltNetstrmDrvrKeyFile, uchar*)
 SIMP_PROP_GET(ParserControlCharacterEscapePrefix, parser.cCCEscapeChar, uchar)
@@ -416,6 +418,25 @@
 }
 
 static rsRetVal
+setDfltNetstrmDrvrCRLF(void __attribute__((unused)) *pVal, uchar *pNewVal) {
+	DEFiRet;
+	FILE *fp;
+	free(loadConf->globals.pszDfltNetstrmDrvrCRLF);
+	fp = fopen((const char*)pNewVal, "r");
+	if(fp == NULL) {
+		LogError(errno, RS_RET_NO_FILE_ACCESS,
+			"error: defaultnetstreamdrivercrlfile file '%s' "
+			"could not be accessed", pNewVal);
+	} else {
+		fclose(fp);
+		loadConf->globals.pszDfltNetstrmDrvrCRLF = pNewVal;
+	}
+
+	RETiRet;
+}
+
+
+static rsRetVal
 setDfltNetstrmDrvrCertFile(void __attribute__((unused)) *pVal, uchar *pNewVal) {
 	DEFiRet;
 	FILE *fp;
@@ -891,6 +912,7 @@
 	pIf->GetMaxLine = glblGetMaxLine;
 	pIf->GetOptionDisallowWarning = GetOptionDisallowWarning;
 	pIf->GetDfltNetstrmDrvrCAF = GetDfltNetstrmDrvrCAF;
+	pIf->GetDfltNetstrmDrvrCRLF = GetDfltNetstrmDrvrCRLF;
 	pIf->GetDfltNetstrmDrvrCertFile = GetDfltNetstrmDrvrCertFile;
 	pIf->GetDfltNetstrmDrvrKeyFile = GetDfltNetstrmDrvrKeyFile;
 	pIf->GetDfltNetstrmDrvr = GetDfltNetstrmDrvr;
@@ -927,6 +949,8 @@
 	loadConf->globals.pszDfltNetstrmDrvr = NULL;
 	free(loadConf->globals.pszDfltNetstrmDrvrCAF);
 	loadConf->globals.pszDfltNetstrmDrvrCAF = NULL;
+	free(loadConf->globals.pszDfltNetstrmDrvrCRLF);
+	loadConf->globals.pszDfltNetstrmDrvrCRLF = NULL;
 	free(loadConf->globals.pszDfltNetstrmDrvrKeyFile);
 	loadConf->globals.pszDfltNetstrmDrvrKeyFile = NULL;
 	free(loadConf->globals.pszDfltNetstrmDrvrCertFile);
@@ -1165,6 +1189,9 @@
 		} else if(!strcmp(paramblk.descr[i].name, "defaultnetstreamdrivercafile")) {
 			cstr = (uchar*) es_str2cstr(cnfparamvals[i].val.d.estr, NULL);
 			setDfltNetstrmDrvrCAF(NULL, cstr);
+		} else if(!strcmp(paramblk.descr[i].name, "defaultnetstreamdrivercrlfile")) {
+			cstr = (uchar*) es_str2cstr(cnfparamvals[i].val.d.estr, NULL);
+			setDfltNetstrmDrvrCRLF(NULL, cstr);
 		} else if(!strcmp(paramblk.descr[i].name, "defaultnetstreamdriver")) {
 			cstr = (uchar*) es_str2cstr(cnfparamvals[i].val.d.estr, NULL);
 			setDfltNetstrmDrvr(NULL, cstr);
@@ -1380,6 +1407,8 @@
 	NULL));
 	CHKiRet(regCfSysLineHdlr((uchar *)"defaultnetstreamdrivercafile", 0, eCmdHdlrGetWord,
 	setDfltNetstrmDrvrCAF, NULL, NULL));
+	CHKiRet(regCfSysLineHdlr((uchar *)"defaultnetstreamdrivercrlfile", 0, eCmdHdlrGetWord,
+	setDfltNetstrmDrvrCRLF, NULL, NULL));
 	CHKiRet(regCfSysLineHdlr((uchar *)"defaultnetstreamdriverkeyfile", 0, eCmdHdlrGetWord,
 	setDfltNetstrmDrvrKeyFile, NULL, NULL));
 	CHKiRet(regCfSysLineHdlr((uchar *)"defaultnetstreamdrivercertfile", 0, eCmdHdlrGetWord,
diff -u -r rsyslog-8.2206.0-nocrl/runtime/glbl.h rsyslog-8.2206.0-withcrl/runtime/glbl.h
--- rsyslog-8.2206.0-nocrl/runtime/glbl.h	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/glbl.h	2023-07-03 11:19:57.081983307 +0100
@@ -91,6 +91,7 @@
 
 	SIMP_PROP(DropMalPTRMsgs, int)
 	SIMP_PROP(DfltNetstrmDrvrCAF, uchar*)
+	SIMP_PROP(DfltNetstrmDrvrCRLF, uchar*)
 	SIMP_PROP(DfltNetstrmDrvrCertFile, uchar*)
 	SIMP_PROP(DfltNetstrmDrvrKeyFile, uchar*)
 	SIMP_PROP(DfltNetstrmDrvr, uchar*)
diff -u -r rsyslog-8.2206.0-nocrl/runtime/netstrm.c rsyslog-8.2206.0-withcrl/runtime/netstrm.c
--- rsyslog-8.2206.0-nocrl/runtime/netstrm.c	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/netstrm.c	2023-07-03 11:19:57.082476672 +0100
@@ -266,6 +266,15 @@
 }
 
 static rsRetVal
+SetDrvrTlsCRLFile(netstrm_t *const pThis, const uchar *const file)
+{
+	DEFiRet;
+	ISOBJ_TYPE_assert(pThis, netstrm);
+	iRet = pThis->Drvr.SetTlsCRLFile(pThis->pDrvrData, file);
+	RETiRet;
+}
+
+static rsRetVal
 SetDrvrTlsKeyFile(netstrm_t *const pThis, const uchar *const file)
 {
 	DEFiRet;
@@ -470,6 +479,7 @@
 	pIf->SetDrvrPrioritizeSAN = SetDrvrPrioritizeSAN;
 	pIf->SetDrvrTlsVerifyDepth = SetDrvrTlsVerifyDepth;
 	pIf->SetDrvrTlsCAFile = SetDrvrTlsCAFile;
+	pIf->SetDrvrTlsCRLFile = SetDrvrTlsCRLFile;
 	pIf->SetDrvrTlsKeyFile = SetDrvrTlsKeyFile;
 	pIf->SetDrvrTlsCertFile = SetDrvrTlsCertFile;
 finalize_it:
diff -u -r rsyslog-8.2206.0-nocrl/runtime/netstrm.h rsyslog-8.2206.0-withcrl/runtime/netstrm.h
--- rsyslog-8.2206.0-nocrl/runtime/netstrm.h	2022-04-04 08:26:40.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/netstrm.h	2023-07-03 11:19:57.082921301 +0100
@@ -89,10 +89,11 @@
 
 	/* v15 -- Tls cert functions */
 	rsRetVal (*SetDrvrTlsCAFile)(netstrm_t *pThis, const uchar* file);
+	rsRetVal (*SetDrvrTlsCRLFile)(netstrm_t *pThis, const uchar* file);
 	rsRetVal (*SetDrvrTlsKeyFile)(netstrm_t *pThis, const uchar* file);
 	rsRetVal (*SetDrvrTlsCertFile)(netstrm_t *pThis, const uchar* file);
 ENDinterface(netstrm)
-#define netstrmCURR_IF_VERSION 15 /* increment whenever you change the interface structure! */
+#define netstrmCURR_IF_VERSION 16 /* increment whenever you change the interface structure! */
 /* interface version 3 added GetRemAddr()
  * interface version 4 added EnableKeepAlive() -- rgerhards, 2009-06-02
  * interface version 5 changed return of CheckConnection from void to rsRetVal -- alorbach, 2012-09-06
@@ -101,6 +102,7 @@
  * interface version 8 changed signature of Connect() -- dsa, 2016-11-14
  * interface version 9 added SetGnutlsPriorityString -- PascalWithopf, 2017-08-08
  * interface version 10 added oserr parameter to Rcv() -- rgerhards, 2017-09-04
+ * interface version 16 CRL file -- Oracle, 2022-01-16
  * */
 
 /* prototypes */
diff -u -r rsyslog-8.2206.0-nocrl/runtime/netstrms.c rsyslog-8.2206.0-withcrl/runtime/netstrms.c
--- rsyslog-8.2206.0-nocrl/runtime/netstrms.c	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/netstrms.c	2023-07-03 11:19:57.083456668 +0100
@@ -116,6 +116,8 @@
 	}
 	free((void*)pThis->pszDrvrCAFile);
 	pThis->pszDrvrCAFile = NULL;
+	free((void*)pThis->pszDrvrCRLFile);
+	pThis->pszDrvrCRLFile = NULL;
 	free((void*)pThis->pszDrvrKeyFile);
 	pThis->pszDrvrKeyFile = NULL;
 	free((void*)pThis->pszDrvrCertFile);
@@ -251,6 +253,18 @@
 }
 
 static rsRetVal
+SetDrvrTlsCRLFile(netstrms_t *pThis, const uchar *mode)
+{
+	DEFiRet;
+	ISOBJ_TYPE_assert(pThis, netstrms);
+	if (mode != NULL) {
+		CHKmalloc(pThis->pszDrvrCRLFile = (uchar*) strdup((char*)mode));
+	}
+finalize_it:
+	RETiRet;
+}
+
+static rsRetVal
 SetDrvrTlsKeyFile(netstrms_t *pThis, const uchar *mode)
 {
 	DEFiRet;
@@ -394,6 +408,12 @@
 	return pThis->pszDrvrCAFile;
 }
 static const uchar *
+GetDrvrTlsCRLFile(netstrms_t *pThis)
+{
+	ISOBJ_TYPE_assert(pThis, netstrms);
+	return pThis->pszDrvrCRLFile;
+}
+static const uchar *
 GetDrvrTlsKeyFile(netstrms_t *pThis)
 {
 	ISOBJ_TYPE_assert(pThis, netstrms);
@@ -471,9 +491,11 @@
 	pIf->SetDrvrTlsVerifyDepth = SetDrvrTlsVerifyDepth;
 	pIf->GetDrvrTlsVerifyDepth = GetDrvrTlsVerifyDepth;
 	pIf->GetDrvrTlsCAFile = GetDrvrTlsCAFile;
+	pIf->GetDrvrTlsCRLFile = GetDrvrTlsCRLFile;
 	pIf->GetDrvrTlsKeyFile = GetDrvrTlsKeyFile;
 	pIf->GetDrvrTlsCertFile = GetDrvrTlsCertFile;
 	pIf->SetDrvrTlsCAFile = SetDrvrTlsCAFile;
+	pIf->SetDrvrTlsCRLFile = SetDrvrTlsCRLFile;
 	pIf->SetDrvrTlsKeyFile = SetDrvrTlsKeyFile;
 	pIf->SetDrvrTlsCertFile = SetDrvrTlsCertFile;
 finalize_it:
diff -u -r rsyslog-8.2206.0-nocrl/runtime/netstrms.h rsyslog-8.2206.0-withcrl/runtime/netstrms.h
--- rsyslog-8.2206.0-nocrl/runtime/netstrms.h	2022-04-04 08:26:40.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/netstrms.h	2023-07-03 11:19:57.083890011 +0100
@@ -38,6 +38,7 @@
 	int DrvrVerifyDepth;		/**< Verify Depth for certificate chains */
 	uchar *pszDrvrPermitExpiredCerts;
 	const uchar *pszDrvrCAFile;
+	const uchar *pszDrvrCRLFile;
 	const uchar *pszDrvrKeyFile;
 	const uchar *pszDrvrCertFile;
 	uchar *gnutlsPriorityString; /**< priorityString for connection */
@@ -78,9 +79,11 @@
 	const uchar* (*GetDrvrTlsKeyFile)(netstrms_t *pThis);
 	rsRetVal (*SetDrvrTlsCertFile)(netstrms_t *pThis, const uchar *);
 	const uchar* (*GetDrvrTlsCertFile)(netstrms_t *pThis);
-
+	/* v3 */
+	rsRetVal (*SetDrvrTlsCRLFile)(netstrms_t *pThis, const uchar *);
+	const uchar* (*GetDrvrTlsCRLFile)(netstrms_t *pThis);
 ENDinterface(netstrms)
-#define netstrmsCURR_IF_VERSION 2 /* increment whenever you change the interface structure! */
+#define netstrmsCURR_IF_VERSION 3 /* increment whenever you change the interface structure! */
 
 /* prototypes */
 PROTOTYPEObj(netstrms);
diff -u -r rsyslog-8.2206.0-nocrl/runtime/nsd_gtls.c rsyslog-8.2206.0-withcrl/runtime/nsd_gtls.c
--- rsyslog-8.2206.0-nocrl/runtime/nsd_gtls.c	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/nsd_gtls.c	2023-07-03 12:52:55.343591471 +0100
@@ -707,7 +707,7 @@
 gtlsInitCred(nsd_gtls_t *const pThis )
 {
 	int gnuRet;
-	const uchar *cafile;
+	const uchar *cafile, *crlfile;
 	DEFiRet;
 
 	/* X509 stuff */
@@ -736,6 +736,11 @@
 		}
 	}
 
+	crlfile = (pThis->pszCRLFile == NULL) ? glbl.GetDfltNetstrmDrvrCRLF(runConf) : pThis->pszCRLFile;
+	if(crlfile == NULL) {
+		LogMsg(0, RS_RET_VALUE_NOT_SUPPORTED, LOG_WARNING,
+			"Warning: CRL not supported with gtls netstream driver");
+	}
 
 finalize_it:
 	RETiRet;
@@ -1376,6 +1381,7 @@
 	free(pThis->pszConnectHost);
 	free(pThis->pszRcvBuf);
 	free((void*) pThis->pszCAFile);
+	free((void*) pThis->pszCRLFile);
 
 	if(pThis->bOurCertIsInit)
 		for(unsigned i=0; i<pThis->nOurCerts; ++i) {
@@ -1619,6 +1625,23 @@
 }
 
 static rsRetVal
+SetTlsCRLFile(nsd_t *pNsd, const uchar *const crlFile)
+{
+	DEFiRet;
+	nsd_gtls_t *const pThis = (nsd_gtls_t*) pNsd;
+
+	ISOBJ_TYPE_assert((pThis), nsd_gtls);
+	if(crlFile == NULL) {
+		pThis->pszCRLFile = NULL;
+	} else {
+		CHKmalloc(pThis->pszCRLFile = (const uchar*) strdup((const char*) crlFile));
+	}
+
+finalize_it:
+	RETiRet;
+}
+
+static rsRetVal
 SetTlsKeyFile(nsd_t *pNsd, const uchar *const pszFile)
 {
 	DEFiRet;
@@ -2308,6 +2331,7 @@
 	pIf->SetPrioritizeSAN = SetPrioritizeSAN;
 	pIf->SetTlsVerifyDepth = SetTlsVerifyDepth;
 	pIf->SetTlsCAFile = SetTlsCAFile;
+	pIf->SetTlsCRLFile = SetTlsCRLFile;
 	pIf->SetTlsKeyFile = SetTlsKeyFile;
 	pIf->SetTlsCertFile = SetTlsCertFile;
 finalize_it:
diff -u -r rsyslog-8.2206.0-nocrl/runtime/nsd_gtls.h rsyslog-8.2206.0-withcrl/runtime/nsd_gtls.h
--- rsyslog-8.2206.0-nocrl/runtime/nsd_gtls.h	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/nsd_gtls.h	2023-07-03 11:30:06.243092996 +0100
@@ -47,6 +47,7 @@
 	uchar *pszConnectHost;	/**< hostname used for connect - may be used to
 					authenticate peer if no other name given */
 	const uchar *pszCAFile;
+	const uchar *pszCRLFile;
 	const uchar *pszKeyFile;
 	const uchar *pszCertFile;
 	gnutls_certificate_credentials_t xcred;
diff -u -r rsyslog-8.2206.0-nocrl/runtime/nsd_ossl.c rsyslog-8.2206.0-withcrl/runtime/nsd_ossl.c
--- rsyslog-8.2206.0-nocrl/runtime/nsd_ossl.c	2023-07-03 11:13:51.609698585 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/nsd_ossl.c	2023-07-03 11:31:34.553271493 +0100
@@ -1017,6 +1017,7 @@
 		SSL_CTX_free(pThis->ctx);
 	}
 	free((void*) pThis->pszCAFile);
+	free((void*) pThis->pszCRLFile);
 	free((void*) pThis->pszKeyFile);
 	free((void*) pThis->pszCertFile);
 ENDobjDestruct(nsd_ossl)
@@ -1242,9 +1243,10 @@
 {
 	DEFiRet;
 	int bHaveCA;
+	int bHaveCRL;
 	int bHaveCert;
 	int bHaveKey;
-	const char *caFile, *certFile, *keyFile;
+	const char *caFile, *crlFile, *certFile, *keyFile;
 	/* Setup certificates */
 	caFile = (char*) ((pThis->pszCAFile == NULL) ? glbl.GetDfltNetstrmDrvrCAF(runConf) : pThis->pszCAFile);
 	if(caFile == NULL) {
@@ -1254,6 +1256,14 @@
 	} else {
 		bHaveCA	= 1;
 	}
+	crlFile = (char*) ((pThis->pszCRLFile == NULL) ? glbl.GetDfltNetstrmDrvrCRLF(runConf) : pThis->pszCRLFile);
+	if(crlFile == NULL) {
+		LogMsg(0, RS_RET_CA_CERT_MISSING, LOG_WARNING,
+			"Warning: CRL file is not set");
+		bHaveCRL = 0;
+	} else {
+		bHaveCRL = 1;
+	}
 	certFile = (char*) ((pThis->pszCertFile == NULL) ?
 		glbl.GetDfltNetstrmDrvrCertFile(runConf) : pThis->pszCertFile);
 	if(certFile == NULL) {
@@ -1282,6 +1292,18 @@
 		osslLastSSLErrorMsg(0, NULL, LOG_ERR, "osslGlblInit");
 		ABORT_FINALIZE(RS_RET_TLS_CERT_ERR);
 	}
+	if(bHaveCRL == 1) {
+		X509_STORE *store = SSL_CTX_get_cert_store(pThis->ctx);
+		if (!X509_STORE_load_file(store, crlFile)) {
+			LogError(0, RS_RET_TLS_CERT_ERR, "Error: CRL could not be accessed. "
+					"Check at least: 1) file path is correct, 2) file exist, "
+					"3) permissions are correct, 4) file content is correct. "
+					"Open ssl error info may follow in next messages");
+			osslLastSSLErrorMsg(0, NULL, LOG_ERR, "osslGlblInit");
+			ABORT_FINALIZE(RS_RET_TLS_CERT_ERR);
+		}
+		X509_STORE_set_flags(store, X509_V_FLAG_CRL_CHECK);
+	}
 	if(bHaveCert == 1 && SSL_CTX_use_certificate_chain_file(pThis->ctx, certFile) != 1) {
 		LogError(0, RS_RET_TLS_CERT_ERR, "Error: Certificate file could not be accessed. "
 				"Check at least: 1) file path is correct, 2) file exist, "
@@ -2038,6 +2060,24 @@
 }
 
 static rsRetVal
+SetTlsCRLFile(nsd_t *pNsd, const uchar *const crlFile)
+{
+	DEFiRet;
+	nsd_ossl_t *const pThis = (nsd_ossl_t*) pNsd;
+
+	ISOBJ_TYPE_assert((pThis), nsd_ossl);
+	if(crlFile == NULL) {
+		pThis->pszCRLFile = NULL;
+	} else {
+		CHKmalloc(pThis->pszCRLFile = (const uchar*) strdup((const char*) crlFile));
+	}
+
+finalize_it:
+	RETiRet;
+}
+
+
+static rsRetVal
 SetTlsKeyFile(nsd_t *pNsd, const uchar *const pszFile)
 {
 	DEFiRet;
@@ -2110,6 +2150,7 @@
 	pIf->SetPrioritizeSAN = SetPrioritizeSAN; /* we don't NEED this interface! */
 	pIf->SetTlsVerifyDepth = SetTlsVerifyDepth;
 	pIf->SetTlsCAFile = SetTlsCAFile;
+	pIf->SetTlsCRLFile = SetTlsCRLFile;
 	pIf->SetTlsKeyFile = SetTlsKeyFile;
 	pIf->SetTlsCertFile = SetTlsCertFile;
 
diff -u -r rsyslog-8.2206.0-nocrl/runtime/nsd_ossl.h rsyslog-8.2206.0-withcrl/runtime/nsd_ossl.h
--- rsyslog-8.2206.0-nocrl/runtime/nsd_ossl.h	2023-07-03 11:13:51.610158416 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/nsd_ossl.h	2023-07-03 11:19:57.104988525 +0100
@@ -50,6 +50,7 @@
 	int iMode;		/* 0 - plain tcp, 1 - TLS */
 	int bAbortConn;		/* if set, abort conncection (fatal error had happened) */
 	const uchar *pszCAFile;
+	const uchar *pszCRLFile;
 	const uchar *pszKeyFile;
 	const uchar *pszCertFile;
 	enum {
diff -u -r rsyslog-8.2206.0-nocrl/runtime/nsd_ptcp.c rsyslog-8.2206.0-withcrl/runtime/nsd_ptcp.c
--- rsyslog-8.2206.0-nocrl/runtime/nsd_ptcp.c	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/nsd_ptcp.c	2023-07-03 14:22:43.066893427 +0100
@@ -254,6 +254,19 @@
 }
 
 static rsRetVal
+SetTlsCRLFile(nsd_t __attribute__((unused)) *pNsd, const uchar *const pszFile)
+{
+	DEFiRet;
+	if(pszFile != NULL) {
+		LogError(0, RS_RET_VALUE_NOT_SUPPORTED, "error: CRL File setting not supported by "
+				"ptcp netstream driver - value %s", pszFile);
+		ABORT_FINALIZE(RS_RET_VALUE_NOT_SUPPORTED);
+	}
+finalize_it:
+	RETiRet;
+}
+
+static rsRetVal
 SetTlsKeyFile(nsd_t __attribute__((unused)) *pNsd, const uchar *const pszFile)
 {
 	DEFiRet;
@@ -705,6 +718,7 @@
 		CHKiRet(pNS->Drvr.SetCheckExtendedKeyUsage(pNewNsd, netstrms.GetDrvrCheckExtendedKeyUsage(pNS)));
 		CHKiRet(pNS->Drvr.SetPrioritizeSAN(pNewNsd, netstrms.GetDrvrPrioritizeSAN(pNS)));
 		CHKiRet(pNS->Drvr.SetTlsCAFile(pNewNsd, netstrms.GetDrvrTlsCAFile(pNS)));
+		CHKiRet(pNS->Drvr.SetTlsCRLFile(pNewNsd, netstrms.GetDrvrTlsCRLFile(pNS)));
 		CHKiRet(pNS->Drvr.SetTlsKeyFile(pNewNsd, netstrms.GetDrvrTlsKeyFile(pNS)));
 		CHKiRet(pNS->Drvr.SetTlsCertFile(pNewNsd, netstrms.GetDrvrTlsCertFile(pNS)));
 		CHKiRet(pNS->Drvr.SetTlsVerifyDepth(pNewNsd, netstrms.GetDrvrTlsVerifyDepth(pNS)));
@@ -1069,6 +1083,7 @@
 	pIf->SetPrioritizeSAN = SetPrioritizeSAN;
 	pIf->SetTlsVerifyDepth = SetTlsVerifyDepth;
 	pIf->SetTlsCAFile = SetTlsCAFile;
+	pIf->SetTlsCRLFile = SetTlsCRLFile;
 	pIf->SetTlsKeyFile = SetTlsKeyFile;
 	pIf->SetTlsCertFile = SetTlsCertFile;
 finalize_it:
diff -u -r rsyslog-8.2206.0-nocrl/runtime/nsd.h rsyslog-8.2206.0-withcrl/runtime/nsd.h
--- rsyslog-8.2206.0-nocrl/runtime/nsd.h	2022-04-04 08:26:40.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/nsd.h	2023-07-03 11:32:34.290399909 +0100
@@ -98,8 +98,10 @@
 	rsRetVal (*SetTlsKeyFile)(nsd_t *pThis, const uchar *);
 	rsRetVal (*SetTlsCertFile)(nsd_t *pThis, const uchar *);
 
+	/* v16 - Tls CRL */
+	rsRetVal (*SetTlsCRLFile)(nsd_t *pThis, const uchar *);
 ENDinterface(nsd)
-#define nsdCURR_IF_VERSION 15 /* increment whenever you change the interface structure! */
+#define nsdCURR_IF_VERSION 16 /* increment whenever you change the interface structure! */
 /* interface version 4 added GetRemAddr()
  * interface version 5 added EnableKeepAlive() -- rgerhards, 2009-06-02
  * interface version 6 changed return of CheckConnection from void to rsRetVal -- alorbach, 2012-09-06
diff -u -r rsyslog-8.2206.0-nocrl/runtime/rsconf.c rsyslog-8.2206.0-withcrl/runtime/rsconf.c
--- rsyslog-8.2206.0-nocrl/runtime/rsconf.c	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/rsconf.c	2023-07-03 11:32:58.444092680 +0100
@@ -181,6 +181,7 @@
 	pThis->globals.iGnuTLSLoglevel = 0;
 	pThis->globals.debugOnShutdown = 0;
 	pThis->globals.pszDfltNetstrmDrvrCAF = NULL;
+	pThis->globals.pszDfltNetstrmDrvrCRLF = NULL;
 	pThis->globals.pszDfltNetstrmDrvrCertFile = NULL;
 	pThis->globals.pszDfltNetstrmDrvrKeyFile = NULL;
 	pThis->globals.pszDfltNetstrmDrvr = NULL;
@@ -335,6 +336,7 @@
 	free(pThis->globals.pszWorkDir);
 	free(pThis->globals.operatingStateFile);
 	free(pThis->globals.pszDfltNetstrmDrvrCAF);
+	free(pThis->globals.pszDfltNetstrmDrvrCRLF);
 	free(pThis->globals.pszDfltNetstrmDrvrCertFile);
 	free(pThis->globals.pszDfltNetstrmDrvrKeyFile);
 	free(pThis->globals.pszDfltNetstrmDrvr);
diff -u -r rsyslog-8.2206.0-nocrl/runtime/rsconf.h rsyslog-8.2206.0-withcrl/runtime/rsconf.h
--- rsyslog-8.2206.0-nocrl/runtime/rsconf.h	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/rsconf.h	2023-07-03 11:19:57.087478823 +0100
@@ -105,6 +105,7 @@
 	int debugOnShutdown; /* start debug log when we are shut down */
 	int iGnuTLSLoglevel;/* Sets GNUTLS Debug Level */
 	uchar *pszDfltNetstrmDrvrCAF; /* default CA file for the netstrm driver */
+	uchar *pszDfltNetstrmDrvrCRLF; /* default CRL file for the netstrm driver */
 	uchar *pszDfltNetstrmDrvrCertFile;/* default cert file for the netstrm driver (server) */
 	uchar *pszDfltNetstrmDrvrKeyFile; /* default key file for the netstrm driver (server) */
 	uchar *pszDfltNetstrmDrvr; /* module name of default netstream driver */
diff -u -r rsyslog-8.2206.0-nocrl/runtime/tcpsrv.c rsyslog-8.2206.0-withcrl/runtime/tcpsrv.c
--- rsyslog-8.2206.0-nocrl/runtime/tcpsrv.c	2022-06-13 09:57:25.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/tcpsrv.c	2023-07-03 11:19:57.088177030 +0100
@@ -1049,6 +1049,7 @@
 	 * when param is NULL default handling for ExpiredCerts is set! */
 	CHKiRet(netstrms.SetDrvrPermitExpiredCerts(pThis->pNS, pThis->pszDrvrPermitExpiredCerts));
 	CHKiRet(netstrms.SetDrvrTlsCAFile(pThis->pNS, pThis->pszDrvrCAFile));
+	CHKiRet(netstrms.SetDrvrTlsCRLFile(pThis->pNS, pThis->pszDrvrCRLFile));
 	CHKiRet(netstrms.SetDrvrTlsKeyFile(pThis->pNS, pThis->pszDrvrKeyFile));
 	CHKiRet(netstrms.SetDrvrTlsCertFile(pThis->pNS, pThis->pszDrvrCertFile));
 	if(pThis->pPermPeers != NULL)
@@ -1087,6 +1088,7 @@
 	free(pThis->pszDrvrAuthMode);
 	free(pThis->pszDrvrPermitExpiredCerts);
 	free(pThis->pszDrvrCAFile);
+	free(pThis->pszDrvrCRLFile);
 	free(pThis->pszDrvrKeyFile);
 	free(pThis->pszDrvrCertFile);
 	free(pThis->ppLstn);
@@ -1431,6 +1433,18 @@
 }
 
 static rsRetVal
+SetDrvrCRLFile(tcpsrv_t *const pThis, uchar *const mode)
+{
+	DEFiRet;
+	ISOBJ_TYPE_assert(pThis, tcpsrv);
+	if (mode != NULL) {
+		CHKmalloc(pThis->pszDrvrCRLFile = ustrdup(mode));
+	}
+finalize_it:
+	RETiRet;
+}
+
+static rsRetVal
 SetDrvrKeyFile(tcpsrv_t *pThis, uchar *mode)
 {
 	DEFiRet;
@@ -1594,6 +1608,7 @@
 	pIf->SetDrvrAuthMode = SetDrvrAuthMode;
 	pIf->SetDrvrPermitExpiredCerts = SetDrvrPermitExpiredCerts;
 	pIf->SetDrvrCAFile = SetDrvrCAFile;
+	pIf->SetDrvrCRLFile = SetDrvrCRLFile;
 	pIf->SetDrvrKeyFile = SetDrvrKeyFile;
 	pIf->SetDrvrCertFile = SetDrvrCertFile;
 	pIf->SetDrvrName = SetDrvrName;
diff -u -r rsyslog-8.2206.0-nocrl/runtime/tcpsrv.h rsyslog-8.2206.0-withcrl/runtime/tcpsrv.h
--- rsyslog-8.2206.0-nocrl/runtime/tcpsrv.h	2022-04-04 08:26:40.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/runtime/tcpsrv.h	2023-07-03 11:34:27.207869353 +0100
@@ -79,6 +79,7 @@
 	uchar *pszDrvrAuthMode;	/**< auth mode of the stream driver to use */
 	uchar *pszDrvrPermitExpiredCerts;/**< current driver setting for handlign expired certs */
 	uchar *pszDrvrCAFile;
+	uchar *pszDrvrCRLFile;
 	uchar *pszDrvrKeyFile;
 	uchar *pszDrvrCertFile;
 	uchar *pszDrvrName;	/**< name of stream driver to use */
@@ -208,8 +209,10 @@
 	rsRetVal (*SetDrvrCAFile)(tcpsrv_t *pThis, uchar *pszMode);
 	rsRetVal (*SetDrvrKeyFile)(tcpsrv_t *pThis, uchar *pszMode);
 	rsRetVal (*SetDrvrCertFile)(tcpsrv_t *pThis, uchar *pszMode);
+	/* added v26 -- Options for TSL CRL file */
+	rsRetVal (*SetDrvrCRLFile)(tcpsrv_t *pThis, uchar *pszMode);
 ENDinterface(tcpsrv)
-#define tcpsrvCURR_IF_VERSION 25 /* increment whenever you change the interface structure! */
+#define tcpsrvCURR_IF_VERSION 26 /* increment whenever you change the interface structure! */
 /* change for v4:
  * - SetAddtlFrameDelim() added -- rgerhards, 2008-12-10
  * - SetInputName() added -- rgerhards, 2008-12-10
diff -u -r rsyslog-8.2206.0-nocrl/tools/omfwd.c rsyslog-8.2206.0-withcrl/tools/omfwd.c
--- rsyslog-8.2206.0-nocrl/tools/omfwd.c	2022-05-12 12:18:34.000000000 +0100
+++ rsyslog-8.2206.0-withcrl/tools/omfwd.c	2023-07-03 11:19:57.089539021 +0100
@@ -90,6 +90,7 @@
 	int iStrmDrvrSANPreference; /* ignore CN when any SAN set */
 	int iStrmTlsVerifyDepth; /**< Verify Depth for certificate chains */
 	const uchar *pszStrmDrvrCAFile;
+	const uchar *pszStrmDrvrCRLFile;
 	const uchar *pszStrmDrvrKeyFile;
 	const uchar *pszStrmDrvrCertFile;
 	char	*target;
@@ -434,6 +435,7 @@
 	free(pData->address);
 	free(pData->device);
 	free((void*)pData->pszStrmDrvrCAFile);
+	free((void*)pData->pszStrmDrvrCRLFile);
 	free((void*)pData->pszStrmDrvrKeyFile);
 	free((void*)pData->pszStrmDrvrCertFile);
 	net.DestructPermittedPeers(&pData->pPermPeers);
@@ -827,6 +829,7 @@
 		CHKiRet(netstrm.SetDrvrPermitExpiredCerts(pWrkrData->pNetstrm,
 			pData->pszStrmDrvrPermitExpiredCerts));
 		CHKiRet(netstrm.SetDrvrTlsCAFile(pWrkrData->pNetstrm, pData->pszStrmDrvrCAFile));
+		CHKiRet(netstrm.SetDrvrTlsCRLFile(pWrkrData->pNetstrm, pData->pszStrmDrvrCRLFile));
 		CHKiRet(netstrm.SetDrvrTlsKeyFile(pWrkrData->pNetstrm, pData->pszStrmDrvrKeyFile));
 		CHKiRet(netstrm.SetDrvrTlsCertFile(pWrkrData->pNetstrm, pData->pszStrmDrvrCertFile));
 
@@ -1214,6 +1217,7 @@
 	pData->iStrmDrvrSANPreference = 0;
 	pData->iStrmTlsVerifyDepth = 0;
 	pData->pszStrmDrvrCAFile = NULL;
+	pData->pszStrmDrvrCRLFile = NULL;
 	pData->pszStrmDrvrKeyFile = NULL;
 	pData->pszStrmDrvrCertFile = NULL;
 	pData->iRebindInterval = 0;
@@ -1376,6 +1380,8 @@
 			}
 		} else if(!strcmp(actpblk.descr[i].name, "streamdriver.cafile")) {
 			pData->pszStrmDrvrCAFile = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
+		} else if(!strcmp(actpblk.descr[i].name, "streamdriver.crlfile")) {
+			pData->pszStrmDrvrCRLFile = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
 		} else if(!strcmp(actpblk.descr[i].name, "streamdriver.keyfile")) {
 			pData->pszStrmDrvrKeyFile = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);
 		} else if(!strcmp(actpblk.descr[i].name, "streamdriver.certfile")) {
