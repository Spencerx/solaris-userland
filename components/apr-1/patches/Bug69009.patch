https://bz.apache.org/bugzilla/show_bug.cgi?id=69009
https://github.com/apache/apr/commit/b6b94ef73ff0de068aca0f71a2874d555006331a

--- apr-1.7.4/include/apr.h.in
+++ apr-1.7.4/include/apr.h.in
@@ -47,8 +47,8 @@ */
 
 /* So that we can use inline on some critical functions, and use
  * GNUC attributes (such as to get -Wall warnings for printf-like
- * functions).  Only do this in gcc 2.7 or later ... it may work
- * on earlier stuff, but why chance it.
+ * functions).  Both __inline__ and __attribute__ exist for gcc >= 2.7,
+ * other !__GNUC__ compilers may provide __attribute__ still.
  *
  * We've since discovered that the gcc shipped with NeXT systems
  * as "cc" is completely broken.  It claims to be __GNUC__ and so
@@ -56,17 +56,24 @@ * on, but it doesn't implement half of t
  * means.  In particular it's missing inline and the __attribute__
  * stuff.  So we hack around it.  PR#1613. -djg
  */
-#if !defined(__GNUC__) || __GNUC__ < 2 || \
-    (__GNUC__ == 2 && __GNUC_MINOR__ < 7) ||\
-    defined(NEXT)
-#ifndef __attribute__
+#if defined(__GNUC__) \
+    && (__GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 7)) \
+    && !defined(NEXT)
+#define APR_INLINE  __inline__
+#define APR_HAS_INLINE          1
+#else  /* !__GNUC__ */
+#define APR_INLINE
+#define APR_HAS_INLINE          0
+/* __has_attribute should always be a pre-defined macro, but not
+ * necessarily __attribute__ (e.g. builtin), so check for both to
+ * avoid overriding __attribute__.
+ */
+#if !(defined(__attribute__) || defined(__has_attribute))
 #define __attribute__(__x)
 #endif
-#define APR_INLINE
-#define APR_HAS_INLINE           0
-#else
-#define APR_INLINE __inline__
-#define APR_HAS_INLINE           1
+#endif /* !__GNUC__ */
+#ifndef __has_attribute
+#define __has_attribute(__x)    0
 #endif
 
 #define APR_HAVE_ARPA_INET_H     @arpa_ineth@
