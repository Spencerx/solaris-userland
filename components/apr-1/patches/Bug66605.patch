https://bz.apache.org/bugzilla/show_bug.cgi?id=66605
https://github.com/apache/apr/commit/5a82970dc28bfce93fe83012b134bab516144de1

--- apr-1.7.4/atomic/netware/apr_atomic.c
+++ apr-1.7.4/atomic/netware/apr_atomic.c
@@ -20,7 +20,7 @@ #include <stdlib.h>
 
 APR_DECLARE(apr_status_t) apr_atomic_init(apr_pool_t *pool)
 {
-#if defined (NEED_ATOMICS_GENERIC64)
+#if defined(USE_ATOMICS_GENERIC64)
     return apr__atomic_generic64_init(p);
 #else
     return APR_SUCCESS;
--- apr-1.7.4/atomic/os390/atomic.c
+++ apr-1.7.4/atomic/os390/atomic.c
@@ -20,7 +20,7 @@ #include <stdlib.h>
 
 apr_status_t apr_atomic_init(apr_pool_t *p)
 {
-#if defined (NEED_ATOMICS_GENERIC64)
+#if defined(USE_ATOMICS_GENERIC64)
     return apr__atomic_generic64_init(p);
 #else
     return APR_SUCCESS;
--- apr-1.7.4/atomic/unix/builtins.c
+++ apr-1.7.4/atomic/unix/builtins.c
@@ -27,7 +27,11 @@ #endif
 
 APR_DECLARE(apr_status_t) apr_atomic_init(apr_pool_t *p)
 {
+#if defined (USE_ATOMICS_GENERIC64)
+    return apr__atomic_generic64_init(p);
+#else
     return APR_SUCCESS;
+#endif
 }
 
 APR_DECLARE(apr_uint32_t) apr_atomic_read32(volatile apr_uint32_t *mem)
--- apr-1.7.4/atomic/unix/ia32.c
+++ apr-1.7.4/atomic/unix/ia32.c
@@ -20,7 +20,7 @@ #ifdef USE_ATOMICS_IA32
 
 APR_DECLARE(apr_status_t) apr_atomic_init(apr_pool_t *p)
 {
-#if defined (NEED_ATOMICS_GENERIC64)
+#if defined(USE_ATOMICS_GENERIC64)
     return apr__atomic_generic64_init(p);
 #else
     return APR_SUCCESS;
--- apr-1.7.4/atomic/unix/mutex64.c
+++ apr-1.7.4/atomic/unix/mutex64.c
@@ -17,7 +17,7 @@ */
 #include "apr_arch_atomic.h"
 #include "apr_thread_mutex.h"
 
-#if defined(USE_ATOMICS_GENERIC) || defined (NEED_ATOMICS_GENERIC64)
+#if defined(USE_ATOMICS_GENERIC64)
 
 #include <stdlib.h>
 
--- apr-1.7.4/atomic/unix/ppc.c
+++ apr-1.7.4/atomic/unix/ppc.c
@@ -26,7 +26,7 @@ #endif
 
 APR_DECLARE(apr_status_t) apr_atomic_init(apr_pool_t *p)
 {
-#if defined (NEED_ATOMICS_GENERIC64)
+#if defined(USE_ATOMICS_GENERIC64)
     return apr__atomic_generic64_init(p);
 #else
     return APR_SUCCESS;
--- apr-1.7.4/atomic/unix/s390.c
+++ apr-1.7.4/atomic/unix/s390.c
@@ -20,7 +20,7 @@ #ifdef USE_ATOMICS_S390
 
 APR_DECLARE(apr_status_t) apr_atomic_init(apr_pool_t *p)
 {
-#if defined (NEED_ATOMICS_GENERIC64)
+#if defined(USE_ATOMICS_GENERIC64)
     return apr__atomic_generic64_init(p);
 #else
     return APR_SUCCESS;
--- apr-1.7.4/atomic/unix/solaris.c
+++ apr-1.7.4/atomic/unix/solaris.c
@@ -22,7 +22,7 @@ #include <atomic.h>
 
 APR_DECLARE(apr_status_t) apr_atomic_init(apr_pool_t *p)
 {
-#if defined (NEED_ATOMICS_GENERIC64)
+#if defined(USE_ATOMICS_GENERIC64)
     return apr__atomic_generic64_init(p);
 #else
     return APR_SUCCESS;
--- apr-1.7.4/atomic/win32/apr_atomic.c
+++ apr-1.7.4/atomic/win32/apr_atomic.c
@@ -18,11 +18,7 @@ #include "apr_arch_atomic.h"
 
 APR_DECLARE(apr_status_t) apr_atomic_init(apr_pool_t *p)
 {
-#if defined (NEED_ATOMICS_GENERIC64)
-    return apr__atomic_generic64_init(p);
-#else
     return APR_SUCCESS;
-#endif
 }
 
 APR_DECLARE(apr_uint32_t) apr_atomic_add32(volatile apr_uint32_t *mem, apr_uint32_t val)
--- apr-1.7.4/configure.in
+++ apr-1.7.4/configure.in
@@ -558,6 +558,9 @@ AC_DEFINE(HAVE_ATOMIC_BUILTINS, 1, [Defi
     if test "$ap_cv__atomic_builtins" = "yes"; then
         AC_DEFINE(HAVE__ATOMIC_BUILTINS, 1, [Define if compiler provides 32bit __atomic builtins])
     fi
+    has_atomic_builtins=yes
+else
+    has_atomic_builtins=no
 fi
 
 AC_CACHE_CHECK([whether the compiler provides 64bit atomic builtins], [ap_cv_atomic_builtins64],
@@ -802,18 +805,30 @@ APR_ADDTO(CPPFLAGS, [-D_LARGEFILE64_SOUR
    fi
 fi
 
+force_generic_atomics=no
+force_generic_atomics64=no
+AC_CHECK_SIZEOF(void*, 4)
+if test "x$ac_cv_sizeof_voidp" = "x"; then
+    force_generic_atomics64=yes
+elif test $ac_cv_sizeof_voidp -lt 8; then
+    force_generic_atomics64=yes
+fi
 AC_ARG_ENABLE(nonportable-atomics,
 [  --enable-nonportable-atomics  Use optimized atomic code which may produce nonportable binaries],
-[if test $enableval = yes; then
-   force_generic_atomics=no
- else
+[if test "$enableval" = "upto32bit"; then
+   force_generic_atomics64=yes
+ elif test "$enableval" != "yes"; then
    force_generic_atomics=yes
  fi
 ],
 [case $host_cpu in
-   i[[456]]86) force_generic_atomics=yes ;;
-   *) force_generic_atomics=no
-      case $host in
+   i[[34]]86)
+      force_generic_atomics=yes
+      ;;
+   i[[56]]86)
+      force_generic_atomics64=yes
+      ;;
+   *) case $host in
          *solaris2.10*)
             AC_TRY_COMPILE(
                 [#include <atomic.h>],
@@ -828,11 +843,14 @@ esac
       ;;
 esac
 ])
-
 if test $force_generic_atomics = yes; then
    AC_DEFINE([USE_ATOMICS_GENERIC], 1,
              [Define if use of generic atomics is requested])
 fi
+if test $force_generic_atomics = yes -o $force_generic_atomics64 = yes; then
+   AC_DEFINE([USE_ATOMICS_GENERIC64], 1,
+             [Define if use of 64bit generic atomics is requested])
+fi
 
 AC_SUBST(proc_mutex_is_global)
 AC_SUBST(eolstr)
--- apr-1.7.4/include/arch/unix/apr_arch_atomic.h
+++ apr-1.7.4/include/arch/unix/apr_arch_atomic.h
@@ -23,37 +23,35 @@ #include "apr_private.h"
 #include "apr_atomic.h"
 
 #if defined(USE_ATOMICS_GENERIC)
-/* noop */
+    /* noop */
 #elif HAVE_ATOMIC_BUILTINS
 #   define USE_ATOMICS_BUILTINS
-#   if HAVE_ATOMIC_BUILTINS64
-#   define USE_ATOMICS_BUILTINS64
-#   else
-#   define NEED_ATOMICS_GENERIC64
-#   endif
 #elif defined(SOLARIS2) && SOLARIS2 >= 10
 #   define USE_ATOMICS_SOLARIS
-#   define NEED_ATOMICS_GENERIC64
 #elif defined(__GNUC__) && defined(__STRICT_ANSI__)
 /* force use of generic atomics if building e.g. with -std=c89, which
  * doesn't allow inline asm */
 #   define USE_ATOMICS_GENERIC
 #elif defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))
 #   define USE_ATOMICS_IA32
-#   define NEED_ATOMICS_GENERIC64
 #elif defined(__GNUC__) && (defined(__powerpc__) \
                             || defined(__PPC__) \
                             || defined(__ppc__))
 #   define USE_ATOMICS_PPC
-#   define NEED_ATOMICS_GENERIC64
 #elif defined(__GNUC__) && (defined(__s390__) || defined(__s390x__))
 #   define USE_ATOMICS_S390
-#   define NEED_ATOMICS_GENERIC64
 #else
 #   define USE_ATOMICS_GENERIC
 #endif
 
-#if defined(USE_ATOMICS_GENERIC) || defined (NEED_ATOMICS_GENERIC64)
+#if defined(USE_ATOMICS_GENERIC64)
+    /* noop */
+#elif HAVE_ATOMIC_BUILTINS64
+#   define USE_ATOMICS_BUILTINS64
+#else
+#   define USE_ATOMICS_GENERIC64
+#endif
+#if defined(USE_ATOMICS_GENERIC64)
 apr_status_t apr__atomic_generic64_init(apr_pool_t *p);
 #endif
 
