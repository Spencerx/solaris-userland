https://bugreports.qt.io/browse/QTBUG-129846

From a31f62e190e15277479f186425fc54dc171f6592 Mon Sep 17 00:00:00 2001
From: Thiago Macieira <thiago.macieira@intel.com>
Date: Tue, 15 Oct 2024 09:17:39 -0700
Subject: [PATCH] QThread/Unix: refactor to split QThreadPrivate::finish() in
 two phases

Commit 1ed0dd88a32cd2c5ae100b48e14ff55bcbb652e6 moved the finish()
functionality from immediately after run() returns to the time of
thread-local destruction, to make sure that user destructors didn't run
after our cleaning up. But as a side effect, it made other user code run
too late, after some thread-local statics had been destroyed.

This is a common practice, which causes the destructor for worker to run
too late:

    worker->moveToThread(thread);
...
    QObject::connect(thread, &QThread::finished, thread, &QObject::deleteLater);
    QObject::connect(thread, &QThread::finished, worker, &QObject::deleteLater);

This commit splits the cleanup in two phases: QThreadPrivate::finish(),
which runs immediately after run() and will call back out to user code
(finished() signal and delivery of deleteLater()), and cleanup() that
cleans up the QThread{Private,Data} state and destroys the event
dispatcher. That destruction is the only call out to user code.

I've removed the complex mix of pre-C++11 pthread_setspecific() content
and C++11 thread_local variables in favor of using one or the other, not
both. We prefer the thread-local for future-proofing and simplicity, on
platforms where we can verify this C++11 feature works, and because it
allows us to clean up QThreadData and the event dispatcher as late as
possible. (There's some code that runs even later, such as pthread TLS
destructors, used by Glib's GMainLoop)

Unfortunately, we can't use it everywhere. The commit above had already
noticed QNX has a problem and recent bug reports have shown other
platforms (Solaris, MUSL libc) that, 13 years after the ratification of
the standard, still have broken support, so we use pthread for them and
we call cleanup() from within finish() (that is, no late cleaning-up,
retaining the status quo from Qt 4 and 5). See QTBUG-129846 for an
analysis.

Drive-by moving the resetting of thread priority to after finished() is
emitted.

Fixes: QTBUG-129927
Fixes: QTBUG-129846
Task-number: QTBUG-117996
Pick-to: 6.8
Change-Id: Ie5e40dd18faa05d8f777fffdf7dc30fc4fe0c7e9
---
 config.tests/cxa_thread_atexit/CMakeLists.txt     |   6 +
 config.tests/cxa_thread_atexit/main.c             |  10 ++
 src/corelib/configure.cmake                       |  19 +++
 src/corelib/thread/qthread_p.h                    |   4 +-
 src/corelib/thread/qthread_unix.cpp               | 134 ++++++++++++++--------
 tests/auto/corelib/thread/qthread/tst_qthread.cpp |   2 +-
 6 files changed, 121 insertions(+), 54 deletions(-)
 create mode 100644 config.tests/cxa_thread_atexit/CMakeLists.txt
 create mode 100644 config.tests/cxa_thread_atexit/main.c

diff --git a/config.tests/cxa_thread_atexit/CMakeLists.txt b/config.tests/cxa_thread_atexit/CMakeLists.txt
new file mode 100644
index 000000000000..a1df9cd9d812
--- /dev/null
+++ b/qtbase/config.tests/cxa_thread_atexit/CMakeLists.txt
@@ -0,0 +1,6 @@
+# Copyright (C) 2024 Intel Corporation.
+# SPDX-License-Identifier: BSD-3-Clause
+cmake_minimum_required(VERSION 3.16)
+project(cxa_thread_atexit LANGUAGES C)
+add_executable(cxa_thread_atexit main.c)
+target_compile_definitions(cxa_thread_atexit PUBLIC TEST_FUNC=${TEST_FUNC})
diff --git a/config.tests/cxa_thread_atexit/main.c b/config.tests/cxa_thread_atexit/main.c
new file mode 100644
index 000000000000..19eef4943929
--- /dev/null
+++ b/qtbase/config.tests/cxa_thread_atexit/main.c
@@ -0,0 +1,10 @@
+// Copyright (C) 2024 Intel Corporation
+// SPDX-License-Identifier: BSD-3-Clause
+#include <stddef.h>
+
+typedef void (*dtor_func) (void *);
+int TEST_FUNC(dtor_func func, void *obj, void *dso_symbol);
+int main()
+{
+    return TEST_FUNC(NULL, NULL, NULL);
+}
diff --git a/src/corelib/configure.cmake b/src/corelib/configure.cmake
index 20524d499738..de3dc8d90677 100644
--- a/qtbase/src/corelib/configure.cmake
+++ b/qtbase/src/corelib/configure.cmake
@@ -143,6 +143,20 @@ int pipes[2];
 }
 ")
 
+# __cxa_thread_atexit{,_impl} link tests
+qt_config_compile_test(cxa_thread_atexit
+    # Seen on Darwin and FreeBSD
+    LABEL "__cxa_thread_atexit in C library"
+    PROJECT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../config.tests/cxa_thread_atexit"
+    CMAKE_FLAGS -DTEST_FUNC=__cxa_thread_atexit
+)
+qt_config_compile_test(cxa_thread_atexit_impl
+    # Seen on Bionic, FreeBSD, glibc
+    LABEL "__cxa_thread_atexit_impl in C library"
+    PROJECT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../config.tests/cxa_thread_atexit"
+    CMAKE_FLAGS -DTEST_FUNC=__cxa_thread_atexit_impl
+)
+
 # cxx17_filesystem
 qt_config_compile_test(cxx17_filesystem
     LABEL "C++17 <filesystem>"
@@ -551,6 +565,11 @@ qt_feature("cxx17_filesystem" PUBLIC
     LABEL "C++17 <filesystem>"
     CONDITION TEST_cxx17_filesystem
 )
+qt_feature("broken-threadlocal-dtors" PRIVATE
+    LABEL "Broken execution of thread_local destructors at exit() time"
+    AUTODETECT UNIX
+    CONDITION NOT TEST_cxa_thread_atexit AND NOT TEST_cxa_thread_atexit_impl
+)
 qt_feature("dladdr" PRIVATE
     LABEL "dladdr"
     CONDITION QT_FEATURE_dlopen AND TEST_dladdr
diff --git a/src/corelib/thread/qthread_p.h b/src/corelib/thread/qthread_p.h
index 3c876cdcf15c..fde16e507884 100644
--- a/qtbase/src/corelib/thread/qthread_p.h
+++ b/qtbase/src/corelib/thread/qthread_p.h
@@ -208,8 +208,8 @@ public:
     QWaitCondition thread_done;
 
     static void *start(void *arg);
-    static void finish(void *);
-
+    static void finish(void *);     // happens early (before thread-local dtors)
+    static void cleanup(void *);    // happens late (as a thread-local dtor, if possible)
 #endif // Q_OS_UNIX
 
 #ifdef Q_OS_WIN
diff --git a/src/corelib/thread/qthread_unix.cpp b/src/corelib/thread/qthread_unix.cpp
index a4dd7aa8af88..26cc8f45c47d 100644
--- a/qtbase/src/corelib/thread/qthread_unix.cpp
+++ b/qtbase/src/corelib/thread/qthread_unix.cpp
@@ -78,26 +78,45 @@
 
 enum { ThreadPriorityResetFlag = 0x80000000 };
 
+#if QT_CONFIG(broken_threadlocal_dtors)
+// On some platforms, the C runtime fails to help the C++ runtime in running
+// the thread_local destructors, like the one for QThreadDataCleanup above. A
+// race condition in QThread::start (running in the original thread) and
+// QThreadPrivate::start (runs in the started thread) means the order of
+// whether a regular global static and the C++ runtime's thread_local support
+// is undefined (see QTBUG-129846). We work around that by causing the C++
+// runtime to register its global static very early, so it's near the last or
+// last thing to run (which then causes the thread-local dtors for the main
+// thread to run after the static dtors, which is a violation of the C++
+// standard).
+// https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libstdc%2B%2B-v3/libsupc%2B%2B/atexit_thread.cc;hb=releases/gcc-14.2.0#l133
+// https://github.com/llvm/llvm-project/blob/llvmorg-19.1.0/libcxxabi/src/cxa_thread_atexit.cpp#L118-L120
+#endif // QT_CONFIG(broken_threadlocal_dtors)
 
+// Always access this through the {get,set,clear}_thread_data() functions.
 Q_CONSTINIT static thread_local QThreadData *currentThreadData = nullptr;
 
-Q_CONSTINIT static pthread_once_t current_thread_data_once = PTHREAD_ONCE_INIT;
-Q_CONSTINIT static pthread_key_t current_thread_data_key;
-
 static void destroy_current_thread_data(void *p)
 {
+    // If this is an adopted thread, then QThreadData owns the QThread and this
+    // very likely the last reference. If this is not an adopted thread, the we
+    // may be racing the QThread destructor in another thread, in which case
+    // the pointer to QThread may be null on entry (if two-phase cleanup is
+    // disabled) or may become null during the call to cleanup().
     QThreadData *data = static_cast<QThreadData *>(p);
-    // thread_local variables are set to zero before calling this destructor function,
-    // if they are internally using pthread-specific data management,
-    // so we need to set it back to the right value...
-    currentThreadData = data;
+    QThread *thread = data->thread.loadAcquire();
+
     if (data->isAdopted) {
-        QThread *thread = data->thread.loadAcquire();
-        Q_ASSERT(thread);
         QThreadPrivate *thread_p = static_cast<QThreadPrivate *>(QObjectPrivate::get(thread));
-        Q_ASSERT(!thread_p->finished);
         thread_p->finish(thread);
+        if constexpr (!QT_CONFIG(broken_threadlocal_dtors))
+            thread_p->cleanup(thread);
+    } else if constexpr (!QT_CONFIG(broken_threadlocal_dtors)) {
+        QThreadPrivate *thread_p = static_cast<QThreadPrivate *>(QObjectPrivate::get(thread));
+        thread_p->cleanup(thread);
     }
+
+    // the QThread object may still have a reference, so this may not delete
     data->deref();
 
     // ... but we must reset it to zero before returning so we aren't
@@ -105,25 +124,6 @@
     currentThreadData = nullptr;
 }
 
-static void create_current_thread_data_key()
-{
-    pthread_key_create(&current_thread_data_key, destroy_current_thread_data);
-}
-
-static void destroy_current_thread_data_key()
-{
-    pthread_once(&current_thread_data_once, create_current_thread_data_key);
-    pthread_key_delete(current_thread_data_key);
-
-    // Reset current_thread_data_once in case we end up recreating
-    // the thread-data in the rare case of QObject construction
-    // after destroying the QThreadData.
-    pthread_once_t pthread_once_init = PTHREAD_ONCE_INIT;
-    current_thread_data_once = pthread_once_init;
-}
-Q_DESTRUCTOR_FUNCTION(destroy_current_thread_data_key)
-
-
 // Utility functions for getting, setting and clearing thread specific data.
 static QThreadData *get_thread_data()
 {
@@ -132,9 +132,27 @@
 
 static void set_thread_data(QThreadData *data)
 {
+    [[maybe_unused]] static pthread_key_t tls_key;
+    struct QThreadTlsKey {
+        QThreadTlsKey() { pthread_key_create(&tls_key, destroy_current_thread_data); }
+        ~QThreadTlsKey() { pthread_key_delete(tls_key); }
+    };
+    struct QThreadDataCleanup {
+        ~QThreadDataCleanup() { destroy_current_thread_data(currentThreadData); }
+    };
+
+    // Only activate the late cleanup for auxiliary threads. We can't use
+    // QThread::isMainThread() here because theMainThreadId will not have been
+    // set yet.
+    if (data && QCoreApplicationPrivate::theMainThreadId.loadAcquire()) {
+        if constexpr (QT_CONFIG(broken_threadlocal_dtors)) {
+            static QThreadTlsKey currentThreadCleanup;
+            pthread_setspecific(tls_key, data);
+        } else {
+            static thread_local QThreadDataCleanup currentThreadCleanup;
+        }
+    }
     currentThreadData = data;
-    pthread_once(&current_thread_data_once, create_current_thread_data_key);
-    pthread_setspecific(current_thread_data_key, data);
 }
 
 static void clear_thread_data()
@@ -281,20 +299,14 @@
 #ifdef PTHREAD_CANCEL_DISABLE
     pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, nullptr);
 #endif
-#if !defined(Q_OS_QNX) && !defined(Q_OS_VXWORKS)
-    // On QNX, calling finish() from a thread_local destructor causes the C
-    // library to hang.
-    // On VxWorks, its pthread implementation fails on call to `pthead_setspecific` which is made
-    // by first QObject constructor during `finish()`. This causes call to QThread::current, since
-    // QObject doesn't have parent, and since the pthread is already removed, it tries to set
-    // QThreadData for current pthread key, which crashes.
-    static thread_local
-#endif
-            auto cleanup = qScopeGuard([=] { finish(arg); });
-    terminate_on_exception([&] {
-        QThread *thr = reinterpret_cast<QThread *>(arg);
-        QThreadData *data = QThreadData::get2(thr);
+    QThread *thr = reinterpret_cast<QThread *>(arg);
+    QThreadData *data = QThreadData::get2(thr);
+
+    // this ensures the thread-local is created as early as possible
+    set_thread_data(data);
 
+    pthread_cleanup_push(QThreadPrivate::finish, arg);
+    terminate_on_exception([&] {
         {
             QMutexLocker locker(&thr->d_func()->mutex);
 
@@ -306,7 +318,6 @@
             // threadId is set in QThread::start()
             Q_ASSERT(pthread_equal(from_HANDLE<pthread_t>(data->threadId.loadRelaxed()),
                                    pthread_self()));
-            set_thread_data(data);
 
             data->ref();
             data->quitNow = thr->d_func()->exited;
@@ -335,7 +346,9 @@
         thr->run();
     });
 
-    // The qScopeGuard above call runs finish() below.
+    // This calls finish(); later, the currentThreadCleanup thread-local
+    // destructor will call cleanup().
+    pthread_cleanup_pop(1);
     return nullptr;
 }
 
@@ -355,14 +368,33 @@
         QMutexLocker locker(&d->mutex);
 
         d->isInFinish = true;
-        d->priority = QThread::InheritPriority;
-        void *data = &d->data->tls;
         locker.unlock();
         emit thr->finished(QThread::QPrivateSignal());
         qCDebug(lcDeleteLater) << "Sending deferred delete events as part of finishing thread" << thr;
         QCoreApplication::sendPostedEvents(nullptr, QEvent::DeferredDelete);
+
+        void *data = &d->data->tls;
         QThreadStorageData::finish((void **)data);
-        locker.relock();
+    });
+
+    if constexpr (QT_CONFIG(broken_threadlocal_dtors))
+        cleanup(arg);
+}
+
+void QThreadPrivate::cleanup(void *arg)
+{
+    terminate_on_exception([&] {
+        QThread *thr = reinterpret_cast<QThread *>(arg);
+        QThreadPrivate *d = thr->d_func();
+
+        // Disable cancellation again: we did it above, but some user code
+        // running between finish() and cleanup() may have turned them back on.
+#ifdef PTHREAD_CANCEL_DISABLE
+        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, nullptr);
+#endif
+
+        QMutexLocker locker(&d->mutex);
+        d->priority = QThread::InheritPriority;
 
         QAbstractEventDispatcher *eventDispatcher = d->data->eventDispatcher.loadRelaxed();
         if (eventDispatcher) {
@@ -765,7 +797,7 @@
 
     d->terminated = true;
 
-    const bool selfCancelling = d->data == currentThreadData;
+    const bool selfCancelling = d->data == get_thread_data();
     if (selfCancelling) {
         // Posix doesn't seem to specify whether the stack of cancelled threads
         // is unwound, and there's nothing preventing a QThread from
diff --git a/tests/auto/corelib/thread/qthread/tst_qthread.cpp b/tests/auto/corelib/thread/qthread/tst_qthread.cpp
index 65cf97cdf345..74fa75ffef05 100644
--- a/qtbase/tests/auto/corelib/thread/qthread/tst_qthread.cpp
+++ b/qtbase/tests/auto/corelib/thread/qthread/tst_qthread.cpp
@@ -1380,7 +1380,7 @@ void tst_QThread::customEventDispatcher()
 
     QSemaphore threadLocalSemaphore;
     QMetaObject::invokeMethod(&obj, [&]() {
-#ifndef Q_OS_WIN
+#if !defined(Q_OS_WIN) && !QT_CONFIG(broken_threadlocal_dtors)
         // On Windows, the thread_locals are unsequenced between DLLs, so this
         // could run after QThreadPrivate::finish()
         static thread_local
-- 
2.16.3

