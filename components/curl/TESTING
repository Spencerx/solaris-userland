Component curl is employed in AI boot for retrieving of the archives from the
WAN-Boot server. This is the reason why AI iso image should be also tested when
curl is updated.


File in /usr/share/distro_const/boot_archive_contents_x86.xml (contents of miniroot)
need to reflect changes like the library releases changes or a new dependencies and so.
Whenever the library dependencies will change the boot_archive_contents_x86.xml need to
list these files needed otherwise the run time linker will not find it. This is because
the miniroot image is using only the "hand picked" files not the full packages.


Here are the steps to setup AI test on virtual:

### distro build boxes for both platforms # sparc needs more memory ###
vm install --memory=16G /net/your_sparc_ws/ aisparc
vm install --memory=8G /net/your_x86_ws/ aisvr
#

# Directory /usr/share/distro_const/ contains files to controll .iso boot image build:
#   boot_archive_contents_*.xml defines names of files to be placed to miniroot
#   dc_ai_*.xml manifest controls the build of AI image (package repos, packages,...)
#    * can be replaced either by "x86" nor by "sparc"
# Please note that the boot_archive_contents_*.xml file may contain multiple versions of
# a library. If a given file is not found it is being silently ignored. This avoids the
# necessity of synchronizing the file contents to the exact moment when a build machine
# receives new version of a library.

#-------------------------------------------------------------------------------
# Example of change of miniroot contents:
# vi /usr/share/distro_const/boot_archive_contents_x86.xml

#    <name>usr/lib/fm/libfmd_agent.so.1</name>
#    <name>usr/lib/fm/libfmd_zfs.so.1</name>
#    <name>usr/lib/libcurl.so.4</name>
# -  <name>usr/lib/libcurl.so.4.4.0</name>
#    <name>usr/lib/libcurl.so.4.5.0</name>
# +  <name>usr/lib/libcurl.so.4.6.0</name>
#    <name>usr/lib/libdiskmgt.so.1</name>
#    <name>usr/lib/64/libdiskmgt.so.1</name>
#    <name>usr/lib/libgss.so.1</name>
# ....
#    <name>usr/lib/rad/client/c/amd64/libdlmgr1_client.so.1</name>
#    <!-- Curl libraries  needed for /usr/sbin/dlmgmtd and AI -->
#    <name>usr/lib/64/libcurl.so.4</name>
# -  <name>usr/lib/64/libcurl.so.4.4.0</name>
#    <name>usr/lib/64/libcurl.so.4.5.0</name>
# +  <name>usr/lib/64/libcurl.so.4.6.0</name>
#    <name>usr/lib/64/libgss.so.1</name>
#    <name>usr/lib/64/libgssapi_krb5.so</name>
#    <name>usr/lib/64/libgssapi_krb5.so.2</name>

# Such changes should be also committed in related ON files:
# ./usr/src/cmd/distro_const/manifest/boot_archive_contents_sparc.xml
# ./usr/src/cmd/distro_const/manifest/boot_archive_contents_x86.xml
#-------------------------------------------------------------------------------

# Next step is to change dc_ai_*.xml distro_const(8) manifest which needs to change:

# * unlock facets for modified packages in <image> section
# * add IPS publisher containing modified packages to <source> section
# * explicitly list modified packages including publisher name
#   in <software_data> section 

#please note: distro_const doesn't work with python 3.9 so if:
 python3 --version
 Python 3.9...
#then you should set python3 mediator to 3.7 :
  pkg set-mediator --no-backup-be -v -V 3.7 python3

# Patch for direct application is at the end of this file so it can be used by:
  # x86
  (cd /usr/share/distro_const/ ; gpatch -p0 ) < TESTING # this file
  # sparc
  gpatch -p0 /usr/share/distro_const/dc_ai_sparc.xml TESTING # this file
  #
# then set appropriate values for nightly publisher in .xml manifest:
#  file:///net/<buildhost>/builds/<yourdir>/<ws>/i386/repo/publisher/nightly/

# then run distro-constructor on both platforms:
#--- sparc - aisparc -----------------------------------------------------------
 distro_const build -v /usr/share/distro_const/dc_ai_sparc.xml

#--- x86 - aisvr ---------------------------------------------------------------
  distro_const build -v /usr/share/distro_const/dc_ai_x86.xml

# setup serial console
  bootadm set-menu console=serial
  bootadm change-entry -i 0 'kargs=-B console=ttya'
  svccfg -s svc:/system/console-login:default setprop ttymon/device = "/dev/ttya"
  svcadm refresh svc:/system/console-login:default
  svcadm restart svc:/system/console-login:default

#-------------------------------------------------------------------------------
# when distro-constructor is finished (take couple of tenths minutes) we can check
  ls /rpool/dc/ai/media/
# if Oracle_Solaris_AI_{platform}.iso has been built. Then we can stop boxes to
# set ailan networking
  poweroff

#-- Setup sparc distro build box (aisparc) -------------------------------------
# There will be 2 interfaces one to the lab network and second to ailan network.
  vm net aisparc 1 vxlan ailan
  vm start aisparc
  vm console aisparc

# after login: setup naming to local files
  hostname aisparc
  svcadm disable svc:/network/ldap/client
  svcadm disable svc:/network/dns/client
  svcadm disable nis/domain
  ( props=`svccfg -s svc:/system/name-service/switch listprop config/\* | nawk '{ if ( $1 != "config/value_authorization" ) print $1; }'` ; for p in $props ; do echo "deleting: $p" ; svccfg -s svc:/system/name-service/switch delprop $p ; done )
  svcadm refresh svc:/system/name-service/switch
  svccfg -s svc:/system/name-service/switch setprop config/default = astring: files
  svcadm refresh svc:/system/name-service/switch
  echo '192.168.1.1 aisvr.local aisvr' >> /etc/inet/hosts
  echo '192.168.1.2 aisparc.local aisparc' >> /etc/inet/hosts
  echo '192.168.1.16 nbb.local nbb' >> /etc/inet/hosts
  echo '192.168.1.17 nbb2.local nbb2' >> /etc/inet/hosts
  echo '192.168.1.18 nbb3.local nbb3' >> /etc/inet/hosts
  echo '192.168.1.19 nbb4.local nbb4' >> /etc/inet/hosts
  ipadm create-ip net1
  ipadm create-addr -T static -a local=192.168.1.2/24 net1/v4
  ipadm set-ifprop -p mtu=1450 -m ipv4 net1
  share -F nfs /rpool/dc/ai/media/

#-- Setup AI server (aisvr) x86 ------------------------------------------------
  vm net aisvr 0 vxlan ailan
  vm startC aisvr

# after login: setup naming to local files
  hostname aisvr
  svcadm disable svc:/network/ldap/client
  svcadm disable svc:/network/dns/client
  svcadm disable nis/domain
  ldapclient uninit
  ( props=`svccfg -s svc:/system/name-service/switch listprop config/\* | nawk '{ if ( $1 != "config/value_authorization" ) print $1; }'` ; for p in $props ; do echo "deleting: $p" ; svccfg -s svc:/system/name-service/switch delprop $p ; done )
  svccfg -s svc:/system/name-service/switch setprop config/default = astring: files
  svcadm refresh svc:/system/name-service/switch
  echo '192.168.1.1 aisvr.local aisvr' >> /etc/inet/hosts
  echo '192.168.1.2 aisparc.local aisparc' >> /etc/inet/hosts
  echo '192.168.1.16 nbb.local nbb' >> /etc/inet/hosts
  echo '192.168.1.17 nbb2.local nbb2' >> /etc/inet/hosts
  echo '192.168.1.18 nbb3.local nbb3' >> /etc/inet/hosts
  echo '192.168.1.19 nbb4.local nbb4' >> /etc/inet/hosts
  ipadm delete-addr net0/v4
  ipadm create-addr -T static -a local=192.168.1.1/24 net0/v4
# AI server setup
  installadm set-server -m -i 192.168.1.16 -c 4
  # fix DHCP configuration
  vi /etc/inet/dhcpd4.conf
   # set option routers 192.168.1.1;
   # remove Oracle NIS
  svcadm refresh dhcp/server:ipv4
  svcadm restart dhcp/server:ipv4

  # x86 - service
  installadm create-service -n s11x -s /rpool/dc/ai/media/Oracle_Solaris_AI_X86.iso -d /ai/s11x
  bootadm set-menu -R /etc/netboot/service/default-i386/ console=serial
  bootadm change-entry -R /etc/netboot/service/default-i386/ -i 0 'kargs=-B console=ttya -k'
  ipadm set-ifprop -p mtu=1500 -m ipv4 net0
  ln -s etc/netboot /tftpboot
  (cd /tftpboot ; ln -s . tftpboot)
  # TFTP x86-PXE do not wotk with MTU less than 1500

  # sparc - service
  ipadm set-ifprop -p mtu=1450 -m ipv4 net0
  # NFS on vxlan do not work with MTU = 1500
  # also DHCP boot on sparc require MTU = 1450
  installadm create-service -n s11s -s /net/aisparc/rpool/dc/ai/media/Oracle_Solaris_AI_SPARC.iso -d /ai/s11s
  installadm create-manifest -n s11s -f /net/aisparc/rpool/dc/ai/media/ai_sparc.xml -c cpu=sparc

  # now create net-boot boxes (use real MACs)
  # x86
  installadm create-client -n s11x -e 08:00:27:63:55:60
  # sparc - ldom
  installadm create-client -n s11s -e 0:14:4f:f8:4f:98

### client ###
# x86
  vm new -T Solaris11_64 -M 8G nbb
  vm net nbb 0 vxlan ailan
  VBoxManage showvminfo nbb | grep MAC
  VBoxManage modifyvm nbb --boot1 net
  # VBoxManage modifyvm nbb --uart1 off
  vm start nbb
# connect on rdp-port
# notes:
# - boot into shell is enough to test if curl can act as a wanboot client
# - to install OS the package repo is needed. http-proxy can be used instead
# client can be reset by
  vm reset nbb

# sparc - ldom
  vm new -M 8G nbb1
  vm net nbb1 0 vxlan ailan
  sudo ldm list-domain -o net ${USER}###_nbb1
  sudo ldm set-var 'auto-boot?=false' ${USER}###_nbb1
  vm start -ok nbb1
  vm console nbb1
  boot net:dhcp
# then continue in manual install  <esc>2 as Enter
# if hung <Enter>~~~~# ...send break to ok-prompt

################################################################################
# troubleshooting

# snoop on aisvr
  snoop ether 02:C0:C0:D0:D0:E0
# or
  dumpcap -i net0 -f 'ether host 02:C0:C0:D0:D0:E0' -w capfile
  tshark -r capfile > capfile.txt
# http://192.168.1.1:5555/cgi-bin/wanboot-cgi//?CONTENT=bootfile&IP=192.168.1.0&CID=0102C0C0D0D0E0

# remove leases
  svcadm disable dhcp/server:ipv4
  rm /var/db/isc-dhcp/dhcpd?.leases
  svcadm enable dhcp/server:ipv4

# installadm
  installadm list -m -n s11s
  installadm delete-service --autoremove --noprompt s11s

# modify ai_manifest(5)
  installadm export -n s11s -m orig_default -o ai_sparc.xml
  # set http proxy for IPS
  #  <ai_instance name="default" http_proxy='http://192.168.1.2:3128/'>
  # also set publisher to http://ipkg.cz.oracle.com/solaris11/trunk/
  # and add a proxy
  #   <origin name="http://ipkg.cz.oracle.com/solaris11/trunk/"/>
  #   <cmd_options>--proxy http://192.168.1.2:3128/</cmd_options>

# direct wanboot
  setenv network-boot-arguments host-ip=192.168.1.16,router-ip=192.168.1.1,subnet-mask=255.255.255.0,hostname=nbb,file=http://192.168.1.1:5555/cgi-bin/wanboot-cgi//?CONTENT=bootfile&IP=192.168.1.0&CID=0102C0C0D0D0E0
  boot net - install

  setenv network-boot-arguments host-ip=192.168.1.17,router-ip=192.168.1.1,subnet-mask=255.255.255.0,file=http://192.168.1.1:5555/cgi-bin/wanboot-cgi
  boot net -sv

# We can also use the SPARC distroconst box as a http proxy
  cat > /etc/apache2/2.4/conf.d/my-proxy.conf  <<EOF
Listen 192.168.1.2:3128
LoadModule proxy_module libexec/mod_proxy.so
LoadModule proxy_connect_module libexec/mod_proxy_connect.so
LoadModule proxy_ftp_module libexec/mod_proxy_ftp.so
LoadModule proxy_http_module libexec/mod_proxy_http.so
<VirtualHost *:3128>
        ProxyRequests On
        ProxyVia On
        CustomLog "/var/apache2/2.4/logs/proxy_log" common
        <Proxy *>
                AddDefaultCharset off
                Order allow,deny
                Allow from all
        </Proxy>
</VirtualHost> 
EOF
  svcadm enable http:apache24
# then use  http_proxy=http://192.168.1.2:3128/

################################################################################
--- Modify the AI manifest -----------------------------------------------------
Goal is to set appropriate facets to use nightly components on distro build box
and also to set reachable pkg-repository,

  cd /usr/share/distro_const/
then modify dc_ai_x86.xml (on sparc: dc_ai_sparc.xml)
  gpatch -p0 < TESTING # this file

Note: also the nghttp2 package can be updated but not soaked to distribution. Also
this (updated) pkg should be installed on distro build box then .xml-manifests
should reflects both changes.

--- dc_ai_x86.xml	2022-10-01 19:26:29.798854282 +0000
+++ dc_ai_x86.xml	2022-10-01 19:47:01.512373505 +0000
@@ -107,6 +107,7 @@
            Exclude documentation, man pages, header files and lint libraries
            for AI image
            -->
+           <facet set="false">facet.version-lock.web/curl</facet>
            <facet set="false">facet.devel</facet>
            <facet set="false">facet.doc</facet>
            <facet set="false">facet.doc.*</facet>
@@ -136,8 +137,11 @@
          </image>
       </destination>
       <source>
+        <publisher name="nightly">
+          <origin name="file:///net/<buildhost>/builds/<yourdir>/<ws>/i386/repo/"/>
+        </publisher>
         <publisher name="solaris">
-          <origin name="http://pkg.oracle.com/solaris/release"/>
+          <origin name="http://ipkg.cz.oracle.com/solaris11/trunk/"/>
           <!--
             If mirrors for this publisher need to be set, specify them here.
           -->
@@ -166,6 +170,7 @@
         <name>pkg:/entire@11.update-11.update.sru.order.platform.build.rev</name>
       -->
       <software_data action="install">
+        <name>pkg://nightly/web/curl@latest</name>
         <name>pkg:/entire@latest</name>
         <name>pkg:/system/install/media/internal</name>
         <name>pkg:/system/install/text-install</name>
