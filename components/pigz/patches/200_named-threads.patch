# HG changeset patch
# User Michael Gerdts <mike.gerdts@oracle.com>
# Date 1412623353 25200
#      Mon Oct 06 12:22:33 2014 -0700
# Node ID 0293c398eda727bf812a867600a25b7831928db7
# Parent  b63f212d891d9cffbc8f4a0e2293532fe44aaa16
name threads to improve observability - developed by Oracle
Not submitted upstream: Uses feature first present in Solaris 11.4

--- pigz-2.8/yarn.c
+++ pigz-2.8/yarn.c
@@ -290,8 +290,13 @@ local void *ignition(void *arg) {
 
 // Not all POSIX implementations create threads as joinable by default, so that
 // is made explicit here.
+#ifdef HAVE_PTHREAD_SETNAME_NP
+thread *launch_(const char *probename, void (*probe)(void *), void *payload,
+                char const *file, long line) {
+#else
 thread *launch_(void (*probe)(void *), void *payload,
                 char const *file, long line) {
+#endif
     // construct the requested call and argument for the ignition() routine
     // (allocated instead of automatic so that we're sure this will still be
     // there when ignition() actually starts up -- ignition() will free this
@@ -322,6 +327,9 @@ thread *launch_(void (*probe)(void *), v
     if (ret)
         fail(ret, file, line, "attr_destroy");
 
+#ifdef HAVE_PTHREAD_SETNAME_NP
+    (void)pthread_setname_np(th->id, probename);
+#endif
     // put the thread in the threads list for join_all()
     th->done = 0;
     th->next = threads;
--- pigz-2.8/yarn.h
+++ pigz-2.8/yarn.h
@@ -111,8 +111,13 @@ extern void (*yarn_abort)(int);
 void yarn_mem(void *(*)(size_t), void (*)(void *));
 
 typedef struct thread_s thread;
+#ifdef HAVE_PTHREAD_SETNAME_NP
+thread *launch_(const char *, void (*)(void *), void *, char const *, long);
+#define launch(a, b) launch_(#a, a, b, __FILE__, __LINE__)
+#else
 thread *launch_(void (*)(void *), void *, char const *, long);
 #define launch(a, b) launch_(a, b, __FILE__, __LINE__)
+#endif
 void join_(thread *, char const *, long);
 #define join(a) join_(a, __FILE__, __LINE__)
 int join_all_(char const *, long);
