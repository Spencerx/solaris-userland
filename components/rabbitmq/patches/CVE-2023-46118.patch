Fixes CVE-2023-46118.

From usptream:
https://github.com/rabbitmq/rabbitmq-server/pull/9708

From b7b3514bb1f71cdad552ba712f683b4d427c4aec Mon Sep 17 00:00:00 2001
From: Michael Klishin <klishinm@vmware.com>
Date: Sat, 14 Oct 2023 06:11:01 -0400
Subject: [PATCH 1/3] Introduce HTTP request body limit for definition uploads

The default is 20 MiB, which is enough to upload
a definition file with 200K queues, a few virtual host
and a few users. In other words, it should accomodate
a lot of environments.
---
 deps/rabbitmq_management/BUILD.bazel          |  3 ++-
 deps/rabbitmq_management/Makefile             |  3 ++-
 .../include/rabbit_mgmt.hrl                   |  2 ++
 .../priv/schema/rabbitmq_management.schema    | 17 +++++++++++++
 .../src/rabbit_mgmt_util.erl                  | 24 ++++++++++++++-----
 .../src/rabbit_mgmt_wm_definitions.erl        | 11 +++++++--
 6 files changed, 50 insertions(+), 10 deletions(-)

--- rabbitmq-server-3.8.35/deps/rabbitmq_management/BUILD.bazel
+++ rabbitmq-server-3.8.35/deps/rabbitmq_management/BUILD.bazel
@@ -36,7 +36,8 @@ APP_ENV = """[
 
 	    {cors_allow_origins, []},
 	    {cors_max_age, 1800},
-	    {content_security_policy, "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'self'"}
+	    {content_security_policy, "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'self'"},
+	    {max_http_body_size, 20000000}
 	  ]"""
 
 BUILD_DEPS = [
--- rabbitmq-server-3.8.35/deps/rabbitmq_management/Makefile
+++ rabbitmq-server-3.8.35/deps/rabbitmq_management/Makefile
@@ -12,7 +12,8 @@ define PROJECT_ENV
 
 	    {cors_allow_origins, []},
 	    {cors_max_age, 1800},
-	    {content_security_policy, "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'self'"}
+	    {content_security_policy, "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'self'"},
+	    {max_http_body_size, 20000000}
 	  ]
 endef
 
--- rabbitmq-server-3.8.35/deps/rabbitmq_management/include/rabbit_mgmt.hrl
+++ rabbitmq-server-3.8.35/deps/rabbitmq_management/include/rabbit_mgmt.hrl
@@ -11,3 +11,5 @@
 
 -define(MANAGEMENT_PG_SCOPE, rabbitmq_management).
 -define(MANAGEMENT_PG_GROUP, management_db).
+
+-define(MANAGEMENT_DEFAULT_HTTP_MAX_BODY_SIZE, 20000000).
--- rabbitmq-server-3.8.35/deps/rabbitmq_management/priv/schema/rabbitmq_management.schema
+++ rabbitmq-server-3.8.35/deps/rabbitmq_management/priv/schema/rabbitmq_management.schema
@@ -20,6 +20,23 @@
 {mapping, "management.http_log_dir", "rabbitmq_management.http_log_dir",
     [{datatype, string}]}.
 
+%% Max HTTP body limit
+
+{mapping, "management.http.max_body_size", "rabbitmq_management.max_http_body_size",
+    [{datatype, integer}, {validators, ["non_negative_integer"]}]}.
+
+{translation, "rabbitmq_management.max_http_body_size",
+fun(Conf) ->
+    case cuttlefish:conf_get("management.http.max_body_size", Conf, undefined) of
+        %% 20 MiB allows for about 200K queues across a small (single digit) number of virtual hosts with
+        %% an equally small number of users. MK.
+        undefined                -> 20000000;
+        Val when is_integer(Val) -> Val;
+        Other                    -> cuttlefish:invalid("management.http.max_body_size must be set to a positive integer")
+    end
+end}.
+
+
 %% HTTP (TCP) listener options ========================================================
 
 %% HTTP listener consistent with Web STOMP and Web MQTT.
--- rabbitmq-server-3.8.35/deps/rabbitmq_management/src/rabbit_mgmt_util.erl
+++ rabbitmq-server-3.8.35/deps/rabbitmq_management/src/rabbit_mgmt_util.erl
@@ -787,15 +787,27 @@ id0(Key, ReqData) ->
 
 read_complete_body(Req) ->
     read_complete_body(Req, <<"">>).
-read_complete_body(Req0, Acc) ->
-    case cowboy_req:read_body(Req0) of
-        {ok, Data, Req}   -> {ok, <<Acc/binary, Data/binary>>, Req};
-        {more, Data, Req} -> read_complete_body(Req, <<Acc/binary, Data/binary>>)
+read_complete_body(Req, Acc) ->
+    BodySizeLimit = application:get_env(rabbitmq_management, max_http_body_size, ?MANAGEMENT_DEFAULT_HTTP_MAX_BODY_SIZE),
+    read_complete_body(Req, Acc, BodySizeLimit).
+read_complete_body(Req0, Acc, BodySizeLimit) ->
+    case bit_size(Acc) > BodySizeLimit of
+        true ->
+            {error, "Exceeded HTTP request body size limit"};
+        false ->
+            case cowboy_req:read_body(Req0) of
+                {ok, Data, Req}   -> {ok, <<Acc/binary, Data/binary>>, Req};
+                {more, Data, Req} -> read_complete_body(Req, <<Acc/binary, Data/binary>>)
+            end
     end.
 
 with_decode(Keys, ReqData, Context, Fun) ->
-    {ok, Body, ReqData1} = read_complete_body(ReqData),
-    with_decode(Keys, Body, ReqData1, Context, Fun).
+    case read_complete_body(ReqData) of
+        {error, Reason} ->
+            bad_request(Reason, ReqData, Context);
+        {ok, Body, ReqData1} ->
+            with_decode(Keys, Body, ReqData1, Context, Fun)
+    end.
 
 with_decode(Keys, Body, ReqData, Context, Fun) ->
     case decode(Keys, Body) of
--- rabbitmq-server-3.8.35/deps/rabbitmq_management/src/rabbit_mgmt_wm_definitions.erl
+++ rabbitmq-server-3.8.35/deps/rabbitmq_management/src/rabbit_mgmt_wm_definitions.erl
@@ -86,8 +86,15 @@ all_definitions(ReqData, Context) ->
       Context).
 
 accept_json(ReqData0, Context) ->
-    {ok, Body, ReqData} = rabbit_mgmt_util:read_complete_body(ReqData0),
-    accept(Body, ReqData, Context).
+    case rabbit_mgmt_util:read_complete_body(ReqData0) of
+        {error, Reason} ->
+            BodySizeLimit = application:get_env(rabbitmq_management, max_http_body_size, ?MANAGEMENT_DEFAULT_HTTP_MAX_BODY_SIZE),
+            _ = rabbit_log:warning("HTTP API: uploaded definition file exceeded the maximum request body limit of ~p bytes. "
+                                   "Use the 'management.http.max_body_size' key in rabbitmq.conf to increase the limit if necessary", [BodySizeLimit]),
+            rabbit_mgmt_util:bad_request(Reason, ReqData0, Context);
+        {ok, Body, ReqData} ->
+            accept(Body, ReqData, Context)
+    end.
 
 vhost_definitions(ReqData, VHost, Context) ->
     %% rabbit_mgmt_wm_<>:basic/1 filters by VHost if it is available

From c6d0382be4d9b6f4d0ab9466b397e353adfa92e0 Mon Sep 17 00:00:00 2001
From: Michael Klishin <klishinm@vmware.com>
Date: Mon, 16 Oct 2023 06:48:23 -0400
Subject: [PATCH 2/3] Reduce default HTTP API request body size limit to 10 MiB

per discussion with the team.

It should be enough to accomodate a definition file with about
100K queues.
---
 deps/rabbitmq_management/BUILD.bazel                          | 2 +-
 deps/rabbitmq_management/Makefile                             | 2 +-
 .../priv/schema/rabbitmq_management.schema                    | 4 ++--
 3 files changed, 4 insertions(+), 4 deletions(-)

--- rabbitmq-server-3.8.35/deps/rabbitmq_management/BUILD.bazel
+++ rabbitmq-server-3.8.35/deps/rabbitmq_management/BUILD.bazel
@@ -37,7 +37,7 @@ APP_ENV = """[
 	    {cors_allow_origins, []},
 	    {cors_max_age, 1800},
 	    {content_security_policy, "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'self'"},
-	    {max_http_body_size, 20000000}
+	    {max_http_body_size, 10000000}
 	  ]"""
 
 BUILD_DEPS = [
--- rabbitmq-server-3.8.35/deps/rabbitmq_management/Makefile
+++ rabbitmq-server-3.8.35/deps/rabbitmq_management/Makefile
@@ -13,7 +13,7 @@ define PROJECT_ENV
 	    {cors_allow_origins, []},
 	    {cors_max_age, 1800},
 	    {content_security_policy, "script-src 'self' 'unsafe-eval' 'unsafe-inline'; object-src 'self'"},
-	    {max_http_body_size, 20000000}
+	    {max_http_body_size, 10000000}
 	  ]
 endef
 
--- rabbitmq-server-3.8.35/deps/rabbitmq_management/priv/schema/rabbitmq_management.schema
+++ rabbitmq-server-3.8.35/deps/rabbitmq_management/priv/schema/rabbitmq_management.schema
@@ -28,9 +28,9 @@
 {translation, "rabbitmq_management.max_http_body_size",
 fun(Conf) ->
     case cuttlefish:conf_get("management.http.max_body_size", Conf, undefined) of
-        %% 20 MiB allows for about 200K queues across a small (single digit) number of virtual hosts with
+        %% 10 MiB allows for about 100K queues with short names across a small (single digit) number of virtual hosts with
         %% an equally small number of users. MK.
-        undefined                -> 20000000;
+        undefined                -> 10000000;
         Val when is_integer(Val) -> Val;
         Other                    -> cuttlefish:invalid("management.http.max_body_size must be set to a positive integer")
     end

