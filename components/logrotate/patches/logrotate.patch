This patch replaces flock system call, which is not avaiable on Solaris by
corresponding fcntl call. 

The function readState opens and then closes the state file, which causes a
lock obtained by the first call of lockState to be released (see close(2)).
The behavior on Linux is different because flock(2) is used for locking the 
state file. The man page (https://man7.org/linux/man-pages/man2/flock.2.html)
says:

"Furthermore, the lock is released either by an explicit LOCK_UN operation on
 any of these duplicate file descriptors, or when all such file descriptors 
 have been closed."

In this case the first file descriptor obtained by the first call of lockState
is still open.

However, the behavior on Solaris is different. Man page for close(2) on Solaris 
(https://docs.oracle.com/cd/E26505_01/html/816-5167/close-2.html)
says:

"All outstanding record locks owned by the process on the file associated with
 the file descriptor will be removed (that is, unlocked)."

The most simple solution seems to create a separate lock file to keep the lock
and this makes test-0087.sh pass.  Test test-0089.sh specifically tests using
/dev/null as a state file.  As the lock file name is derived from the state
file name then /dev/null needs to be avoided to make this tests pass. 

The paramater "wait-for-state-lock" makes logrotate to wait for lock on the 
state file, that is calling flock is supposed to be blocking. To emulate this
F_SETLKW is used instead of F_SETLK when calling fcntl. However, as per fcntl(2),
if a signal that is to be caught is received while fcntl() is waiting for 
a region, fcntl() will be interrupted. Upon return from the process' signal 
handler, fcntl() will return -1 with errno set to EINTR, and the lock operation
will not be done. So, we have to call fcntl in a cycle and test errno for EINTR
to fully emulate flock's blocking behavior.

--- logrotate-3.22.0/logrotate.c.orig	2024-08-07 19:27:35.041489113 +0200
+++ logrotate-3.22.0/logrotate.c	2024-08-07 19:27:58.092714571 +0200
@@ -3074,8 +3074,8 @@
 
 static int lockState(const char *stateFilename, int skip_state_lock, int wait_for_state_lock)
 {
+    struct flock lock_data;
     int lockFd;
-    int lockFlags;
     struct stat sb;
 
     if (!strcmp(stateFilename, "/dev/null")) {
@@ -3126,25 +3125,42 @@
         return 0;
     }
 
-    lockFlags = LOCK_EX;
     if (wait_for_state_lock)
+    {
         message(MESS_DEBUG, "waiting for lock on state file %s\n", stateFilename);
-    else
-        lockFlags |= LOCK_NB;
-
-    if (flock(lockFd, lockFlags) == -1) {
-        if (errno == EWOULDBLOCK) {
-            message(MESS_ERROR, "state file %s is already locked\n"
-                    "logrotate does not support parallel execution on the"
-                    " same set of logfiles.\n", stateFilename);
-        } else {
-            message(MESS_ERROR, "error acquiring lock on state file %s: %s\n",
-                    stateFilename, strerror(errno));
+    }
+    
+    memset (&lock_data, 0, sizeof(lock_data));
+    lock_data.l_start = 0; 
+    lock_data.l_len = 0; 
+    lock_data.l_whence = SEEK_SET;
+    lock_data.l_type = F_WRLCK;
+        
+    if (wait_for_state_lock) {
+        while (fcntl(lockFd, F_SETLKW, &lock_data) == -1) {
+            if (errno != EINTR) {
+                message(MESS_ERROR, "error acquiring lock on state file %s: %s\n",
+                        stateFilename, strerror(errno));
+                close(lockFd);
+                return 1;
+            } 
+        }        
+    } else {        
+        /* Non blocking call (F_SETLK), EWOULDBLOCK is equal to EAGAIN in Solaris */
+        if (fcntl(lockFd, F_SETLK, &lock_data) == -1) {
+            if (errno == EWOULDBLOCK) {
+                message(MESS_ERROR, "state file %s is already locked\n"
+                        "logrotate does not support parallel execution on the"
+                        " same set of logfiles.\n", stateFilename);
+            } else {
+                message(MESS_ERROR, "error acquiring lock on state file %s: %s\n",
+                        stateFilename, strerror(errno));
+            }
+            close(lockFd);
+            return 1;
         }
-        close(lockFd);
-        return 1;
     }
-
+    
     message(MESS_DEBUG, "acquired lock on state file %s\n", stateFilename);
 
     /* keep lockFd open till we terminate */
@@ -3158,6 +3174,7 @@
     int wait_for_state_lock = 0;
     const char *stateFile = STATEFILE;
     const char *logFile = NULL;
+    char stateFileLock[PATH_MAX];
     FILE *logFd = NULL;
     int rc = 0;
     int arg;
@@ -3286,6 +3303,19 @@
     if (!debug && lockState(stateFile, skip_state_lock, wait_for_state_lock)) {
         exit(3);
     }
+    /* Create a file name for a lock file and lock the lock file,
+     * /dev/null shall be avoided */
+    if (strcmp(stateFile, "/dev/null")) {
+        strncpy(stateFileLock, stateFile, PATH_MAX);
+        stateFileLock[PATH_MAX - 1] = 0;
+        if (strlcat(stateFileLock, ".lock", PATH_MAX) >= PATH_MAX) {
+            fprintf(stderr, "Resulting state lock file name is too long, use a shorter state file name\n");
+            exit(1);
+        }
+        if (!debug && lockState(stateFileLock, skip_state_lock, wait_for_state_lock)) {
+            exit(3);
+        }
+    }     
 
     if (readState(stateFile))
         rc = 1;
