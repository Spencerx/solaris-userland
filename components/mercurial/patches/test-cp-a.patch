In Solaris the /tmp is special, cp -a does not work there. We had to adjust
these files for it:
 test-dirstate-status-write-race.t
 test-revlog-delta-find.t
 test-dirstate.t
 test-dirstate-read-race.t
 test-bundle-phase-internal.t


On the other hand running the tests in build directory breaks the tests too, so
the easiest thing is to remove the '-a' from cp.

--- mercurial-6.8/tests/test-bundle-phase-internal.t
+++ mercurial-6.8/tests/test-bundle-phase-internal.t
@@ -99,7 +99,7 @@ ========================
 strip an ancestors of the internal changeset
 --------------------------------------------
 
-  $ cp -aR reference-repo strip-ancestor
+  $ cp -R reference-repo strip-ancestor
   $ cd strip-ancestor
 
 The internal change is stripped, yet it should be skipped from the backup bundle.
@@ -154,7 +154,7 @@ $ cd ..
 strip an unrelated changeset with a lower revnum
 ------------------------------------------------
 
-  $ cp -aR reference-repo strip-unrelated
+  $ cp -R reference-repo strip-unrelated
   $ cd strip-unrelated
 
 The internal change is not directly stripped, but it is affected by the strip
@@ -200,7 +200,7 @@ $ cd ..
 explicitly strip the internal changeset
 ---------------------------------------
 
-  $ cp -aR reference-repo strip-explicit
+  $ cp -R reference-repo strip-explicit
   $ cd strip-explicit
 
 The internal change is directly selected for stripping.
--- mercurial-6.8/tests/test-dirstate-read-race.t
+++ mercurial-6.8/tests/test-dirstate-read-race.t
@@ -139,7 +139,7 @@ ==============
 Race with a `hg add`
 -------------------
 
-  $ cp -a reference-repo race-with-add
+  $ cp -r --preserve=ownership,timestamps reference-repo race-with-add
   $ cd race-with-add
 
 spin a `hg status` with some caches to update
@@ -210,7 +210,7 @@ $ cd ..
 Race with a `hg commit`
 -----------------------
 
-  $ cp -a reference-repo race-with-commit
+  $ cp -r --preserve=ownership,timestamps reference-repo race-with-commit
   $ cd race-with-commit
 
 spin a `hg status with some cache to update
@@ -283,7 +283,7 @@ $ cd ..
 Race with a `hg update`
 -----------------------
 
-  $ cp -a reference-repo race-with-update
+  $ cp -r --preserve=ownership,timestamps reference-repo race-with-update
   $ cd race-with-update
 
 spin a `hg status` with some caches to update
@@ -370,7 +370,7 @@ --------------------------------------
 
 It is interesting to race with "read-only" operation (that still update its cache)
 
-  $ cp -a reference-repo race-with-status
+  $ cp -r --preserve=ownership,timestamps reference-repo race-with-status
   $ cd race-with-status
 
 spin a `hg status` with some caches to update
--- mercurial-6.8/tests/test-dirstate-status-write-race.t
+++ mercurial-6.8/tests/test-dirstate-status-write-race.t
@@ -129,7 +129,7 @@ ------------------------------------
 
 First, we can properly copy the reference
 
-  $ cp -a reference-repo sanity-check
+  $ cp -r --preserve=ownership,timestamps reference-repo sanity-check
   $ cd sanity-check
   $ hg debugstate
   n 644          0 2000-01-01 00:00:00 dir/b
@@ -221,7 +221,7 @@ ==============
 Race with a `hg add`
 -------------------
 
-  $ cp -a reference-repo race-with-add
+  $ cp -r --preserve=ownership,timestamps reference-repo race-with-add
   $ cd race-with-add
 
 spin a `hg status` with some caches to update
@@ -266,7 +266,7 @@ $ cd ..
 Race with a `hg commit`
 ----------------------
 
-  $ cp -a reference-repo race-with-commit
+  $ cp -r --preserve=ownership,timestamps reference-repo race-with-commit
   $ cd race-with-commit
 
 spin a `hg status` with some caches to update
@@ -317,7 +317,7 @@ $ cd ..
 Race with a `hg update`
 ----------------------
 
-  $ cp -a reference-repo race-with-update
+  $ cp -r --preserve=ownership,timestamps reference-repo race-with-update
   $ cd race-with-update
 
 spin a `hg status` with some caches to update
@@ -369,7 +369,7 @@ $ cd ..
 Race with another status
 ------------------------
 
-  $ cp -a reference-repo race-with-status
+  $ cp -r --preserve=ownership,timestamps reference-repo race-with-status
   $ cd race-with-status
 
 spin a `hg status` with some caches to update
@@ -416,7 +416,7 @@ $ cd ..
 Race with the removal of an ambiguous file
 ----------------------Ã¨-------------------
 
-  $ cp -a reference-repo race-with-remove
+  $ cp -r --preserve=ownership,timestamps reference-repo race-with-remove
   $ cd race-with-remove
 
 spin a `hg status` with some caches to update
--- mercurial-6.8/tests/test-dirstate.t
+++ mercurial-6.8/tests/test-dirstate.t
@@ -238,7 +238,7 @@ number of unused bytes: 0
 
 Check with the option in "auto" mode
 ------------------------------------
-  $ cp -a force-base append-mostly-no-force-rewrite
+  $ cp -r --preserve=ownership,timestamps force-base append-mostly-no-force-rewrite
   $ cd append-mostly-no-force-rewrite
   $ current_uid=$(find_dirstate_uuid)
 
@@ -268,7 +268,7 @@ $ cd ..
 Check the same scenario with the option set to "force-new"
 ---------------------------------------------------------
 
-  $ cp -a force-base append-mostly-force-rewrite
+  $ cp -r --preserve=ownership,timestamps force-base append-mostly-force-rewrite
   $ cd append-mostly-force-rewrite
   $ current_uid=$(find_dirstate_uuid)
 
@@ -300,7 +300,7 @@ ----------------------------------------
 
 (should behave the same as "auto" here)
 
-  $ cp -a force-base append-mostly-force-append
+  $ cp -r --preserve=ownership,timestamps force-base append-mostly-force-append
   $ cd append-mostly-force-append
   $ current_uid=$(find_dirstate_uuid)
 
@@ -329,7 +329,7 @@ $ cd ..
 
 Check with the option in "auto" mode
 ------------------------------------
-  $ cp -a force-base append-mostly-no-force-rewrite
+  $ cp -r --preserve=ownership,timestamps force-base append-mostly-no-force-rewrite
   $ cd append-mostly-no-force-rewrite
   $ current_uid=$(find_dirstate_uuid)
 
@@ -359,7 +359,7 @@ ----------------------------------------
 
 (should be the same as auto)
 
-  $ cp -a force-base append-mostly-force-rewrite
+  $ cp -r --preserve=ownership,timestamps force-base append-mostly-force-rewrite
   $ cd append-mostly-force-rewrite
   $ current_uid=$(find_dirstate_uuid)
 
@@ -390,7 +390,7 @@ ----------------------------------------
 
 Should append even if "auto" did not
 
-  $ cp -a force-base append-mostly-force-append
+  $ cp -r --preserve=ownership,timestamps force-base append-mostly-force-append
   $ cd append-mostly-force-append
   $ current_uid=$(find_dirstate_uuid)
 
--- mercurial-6.8/tests/test-narrow-expanddirstate.t
+++ mercurial-6.8/tests/test-narrow-expanddirstate.t
@@ -109,9 +109,9 @@ > EOF
 Since we do not have the ability to rely on a virtual filesystem or
 remotefilelog in the test, we just fake it by copying the data from the 'master'
 repo.
-  $ cp -a ../master/.hg/store/data/* .hg/store/data
+  $ cp -r ../master/.hg/store/data/* .hg/store/data
 Do that for patchdir as well.
-  $ cp -a ../master/patchdir .
+  $ cp -r ../master/patchdir .
 
 `hg status` will now add outside, but not patchdir.
   $ DIRSTATEINCLUDES=path:outside hg status
--- mercurial-6.8/tests/test-revlog-delta-find.t
+++ mercurial-6.8/tests/test-revlog-delta-find.t
@@ -191,7 +191,7 @@ ========================================
 
 Get a repository with the bad parent picked and a clone ready to pull the merge
 
-  $ cp -aR bundle-reuse-enabled peer-bad-delta
+  $ cp -R bundle-reuse-enabled peer-bad-delta
   $ hg clone peer-bad-delta local-pre-pull --rev `cat large.node` --rev `cat small.node` --quiet
   DBG-DELTAS: CHANGELOG: * (glob)
   DBG-DELTAS: CHANGELOG: * (glob)
@@ -215,7 +215,7 @@ -----------------------------------
 
 default is to reuse the (bad) delta
 
-  $ cp -aR local-pre-pull local-no-value
+  $ cp -R local-pre-pull local-no-value
   $ hg -R local-no-value pull --quiet
   DBG-DELTAS: CHANGELOG: * (glob)
   DBG-DELTAS: MANIFESTLOG: * (glob)
@@ -226,7 +226,7 @@ --------------------------------
 
 default is to reuse the (bad) delta
 
-  $ cp -aR local-pre-pull local-default
+  $ cp -R local-pre-pull local-default
   $ hg -R local-default pull --quiet --config 'paths.default:pulled-delta-reuse-policy=default'
   DBG-DELTAS: CHANGELOG: * (glob)
   DBG-DELTAS: MANIFESTLOG: * (glob)
@@ -237,7 +237,7 @@ ------------------
 
 We don't reuse the base, so we get a better delta
 
-  $ cp -aR local-pre-pull local-no-reuse
+  $ cp -R local-pre-pull local-no-reuse
   $ hg -R local-no-reuse pull --quiet --config 'paths.default:pulled-delta-reuse-policy=no-reuse'
   DBG-DELTAS: CHANGELOG: * (glob)
   DBG-DELTAS: MANIFESTLOG: * (glob)
@@ -248,7 +248,7 @@ ------------------
 
 We requested to use the (bad) delta
 
-  $ cp -aR local-pre-pull local-try-base
+  $ cp -R local-pre-pull local-try-base
   $ hg -R local-try-base pull --quiet --config 'paths.default:pulled-delta-reuse-policy=try-base'
   DBG-DELTAS: CHANGELOG: * (glob)
   DBG-DELTAS: MANIFESTLOG: * (glob)
@@ -259,8 +259,8 @@ ========================================
 
 We build a very different file content to force a full snapshot
 
-  $ cp -aR peer-bad-delta peer-bad-delta-with-full
-  $ cp -aR local-pre-pull local-pre-pull-full
+  $ cp -R peer-bad-delta peer-bad-delta-with-full
+  $ cp -R local-pre-pull local-pre-pull-full
   $ echo '[paths]' >> local-pre-pull-full/.hg/hgrc
   $ echo 'default=../peer-bad-delta-with-full' >> local-pre-pull-full/.hg/hgrc
 
@@ -279,7 +279,7 @@ The bundling process creates a delta aga
 is an invalid chain for the client, so it is not considered and we do a full
 snapshot again.
 
-  $ cp -aR local-pre-pull-full local-try-base-full
+  $ cp -R local-pre-pull-full local-try-base-full
   $ hg -R local-try-base-full pull --quiet \
   > --config 'paths.default:pulled-delta-reuse-policy=try-base'
   DBG-DELTAS: CHANGELOG: * (glob)
@@ -294,7 +294,7 @@ ----------------------------------------
 
 A full bundle should be accepted as full bundle without recomputation
 
-  $ cp -aR local-pre-pull-full local-forced-full
+  $ cp -R local-pre-pull-full local-forced-full
   $ hg -R local-forced-full pull --quiet \
   > --config 'paths.default:pulled-delta-reuse-policy=forced'
   DBG-DELTAS: CHANGELOG: * (glob)
@@ -315,7 +315,7 @@ more subtle to test this behavior.
 
   $ hg bundle -R peer-bad-delta-with-full --all --config devel.bundle.delta=p1 all-p1.hg
   5 changesets found
-  $ cp -aR local-pre-pull-full local-forced-full-p1
+  $ cp -R local-pre-pull-full local-forced-full-p1
   $ hg -R local-forced-full-p1 pull --quiet \
   > --config 'paths.*:pulled-delta-reuse-policy=forced' all-p1.hg
   DBG-DELTAS: CHANGELOG: * (glob)
