This patch upgrades the use of NTP to Openssl3. There are four community
bugs filed related to this issue, 
https://bugs.ntp.org/show_bug.cgi?id=3753
ntp service fails to start when fips enabled in openssl-3.x
https://bugs.ntp.org/show_bug.cgi?id=3756
Support OpenSSL-3.0 in NTP, deprecate older versions of OpenSS
https://bugs.ntp.org/show_bug.cgi?id=3773
Putting libdir in LDADD_ can cause conflicts.
https://bugs.ntp.org/show_bug.cgi?id=3728
md5.c in lib/isc is using a obsoleted function of openssl (EVP_MD_CTX_cleanup) 

--- libntp/a_md5encrypt.c
+++ libntp/a_md5encrypt.c
@@ -11,6 +11,8 @@
 #include "ntp.h"
 #include "isc/string.h"
 
+#include <openssl/core_names.h>
+
 typedef struct {
 	const void *	buf;
 	size_t		len;
@@ -110,6 +112,26 @@ make_mac(
 			goto mac_fail;
 		}
 
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
+		/* make sure MD5 is allowed */
+		OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+		if (!octx) {
+			msyslog(LOG_ERR, "MAC encrypt: OSSL_LIB_CTX_new failed\n");
+			goto mac_fail;
+		}
+
+		EVP_MD *type = EVP_MD_fetch(octx, OBJ_nid2sn(ktype), "-fips");
+		if (!type) {
+			msyslog(LOG_ERR, "MAC encrypt: EVP_MD_fetch failed\n");
+			goto mac_fail;
+		}
+
+		if (!EVP_DigestInit_ex(ctx, type, NULL)) {
+			msyslog(LOG_ERR, "MAC encrypt: MAC %s Digest Init failed.",
+					OBJ_nid2sn(ktype));
+			goto mac_fail;
+		}
+#   else
 	   #ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 		/* make sure MD5 is allowd */
 		EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
@@ -121,6 +143,7 @@ make_mac(
 				OBJ_nid2sn(ktype));
 			goto mac_fail;
 		}
+#   endif
 		if ((size_t)EVP_MD_CTX_size(ctx) > digest->len) {
 			msyslog(LOG_ERR, "MAC encrypt: MAC %s buf too small.",
 				OBJ_nid2sn(ktype));
@@ -270,23 +293,51 @@ addr2refid(sockaddr_u *addr)
 	INIT_SSL();
 
 	ctx = EVP_MD_CTX_new();
-#   ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
 	/* MD5 is not used as a crypto hash here. */
+	OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+	if (!octx) {
+		msyslog(LOG_ERR, "addr2refid: OSSL_LIB_CTX_new failed\n");
+		exit(1);
+	}
+
+	EVP_MD *type = EVP_MD_fetch(octx, OSSL_DIGEST_NAME_MD5, "-fips");
+	if (!type) {
+		msyslog(LOG_ERR, "addr2refid: EVP_MD_fetch failed\n");
+		exit(1);
+	}
+
+	if (!EVP_DigestInit_ex(ctx, type, NULL)) {
+		msyslog(LOG_ERR, "MD5 init failed");
+		EVP_MD_CTX_free(ctx);	/* pedantic... but safe */
+		exit(1);
+	}
+#   else
+#   ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
 #   endif
 	/* [Bug 3457] DON'T use plain EVP_DigestInit! It would kill the
 	 * flags! */
 	if (!EVP_DigestInit_ex(ctx, EVP_md5(), NULL)) {
-		msyslog(LOG_ERR,
-		    "MD5 init failed");
+		msyslog(LOG_ERR, "MD5 init failed");
 		EVP_MD_CTX_free(ctx);	/* pedantic... but safe */
 		exit(1);
 	}
+#   endif
 
 	EVP_DigestUpdate(ctx, (u_char *)PSOCK_ADDR6(addr),
 	    sizeof(struct in6_addr));
 	EVP_DigestFinal(ctx, digest, &len);
 	EVP_MD_CTX_free(ctx);
-	memcpy(&addr_refid, digest, sizeof(addr_refid));
-	return (addr_refid);
+
+#   if OPENSSL_VERSION_NUMBER >= 0x30000000
+    if (type)
+        EVP_MD_free(type);
+    if (octx)
+        OSSL_LIB_CTX_free(octx);
+#   endif
+
+    memcpy(&addr_refid, digest, sizeof(addr_refid));
+
+    return (addr_refid);
 }
--- ntpd/ntp_control.c
+++ ntpd/ntp_control.c
@@ -29,6 +29,8 @@
 #include "lib_strbuf.h"
 #include "timexsup.h"
 
+#include <openssl/core_names.h>
+
 #include <rc_cmdlength.h>
 #ifdef KERNEL_PLL
 # include "ntp_syscall.h"
@@ -3040,7 +3042,7 @@ ctl_putclock(
 		*s = '\0';
 		ctl_putdata(buf, (unsigned)(s - buf), 0);
 		break;
-		
+
 	case CC_FUDGEMINJIT:
 		if (mustput || (pcs->haveflags & CLK_HAVEMINJIT))
 			ctl_putdbl(clock_var[id].text,
@@ -3488,7 +3490,7 @@ write_variables(
 				return;
 			}
 		}
-		
+
 		if (ext_var) {
 			octets = strlen(v->text) + strlen(valuep) + 2;
 			vareqv = emalloc(octets);
@@ -3662,11 +3664,15 @@ static u_int32 derive_nonce(
 	}
 
 	ctx = EVP_MD_CTX_new();
-#   if defined(OPENSSL) && defined(EVP_MD_CTX_FLAG_NON_FIPS_ALLOW)
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
 	/* [Bug 3457] set flags and don't kill them again */
-	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
-	rc = EVP_DigestInit_ex(ctx, EVP_get_digestbynid(NID_md5), NULL);
+	OSSL_LIB_CTX *octx = OSSL_LIB_CTX_new();
+	EVP_MD *type = EVP_MD_fetch(octx, OSSL_DIGEST_NAME_MD5, "-fips");
+	EVP_DigestInit_ex(ctx, type, NULL);
 #   else
+#   ifdef EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
+	EVP_MD_CTX_set_flags(ctx, EVP_MD_CTX_FLAG_NON_FIPS_ALLOW);
+#   endif
 	rc = EVP_DigestInit(ctx, EVP_get_digestbynid(NID_md5));
 #   endif
 	if (!rc) {
@@ -3687,6 +3693,10 @@ static u_int32 derive_nonce(
 	EVP_DigestUpdate(ctx, salt, sizeof(salt));
 	EVP_DigestFinal(ctx, d.digest, &len);
 	EVP_MD_CTX_free(ctx);
+#   if defined(OPENSSL) && OPENSSL_VERSION_NUMBER >= 0x30000000
+	EVP_MD_free(type);
+	OSSL_LIB_CTX_free(octx);
+#   endif
 
 	return d.extract;
 }
--- util/Makefile.in
+++ util/Makefile.in
@@ -624,7 +624,7 @@ AM_LDFLAGS = $(LDFLAGS_NTP) $(NTP_HARD_L
 LDADD = ../libntp/libntp.a $(LDADD_LIBNTP) $(LIBM) $(PTHREAD_LIBS)
 tg2_LDADD = ../libntp/libntp.a $(LDADD_LIBNTP) $(LIBM)
 ntp_keygen_LDADD = $(LIBOPTS_LDADD) ../libntp/libntp.a \
-	$(LDADD_LIBEVENT) $(LDADD_LIBNTP) $(PTHREAD_LIBS) $(LDADD_NTP) \
+	$(LDADD_LIBNTP) $(PTHREAD_LIBS) $(LDADD_NTP) $(LDADD_LIBEVENT) \
 	$(LIBM)
 ntp_keygen_SOURCES = ntp-keygen.c ntp-keygen-opts.c ntp-keygen-opts.h
 nodist_ntp_keygen_SOURCES = version.c
--- sntp/Makefile.in
+++ sntp/Makefile.in
@@ -583,9 +583,9 @@ AM_CFLAGS = $(CFLAGS_NTP) $(NTP_HARD_CFL
 AM_CPPFLAGS = $(SNTP_INCS) $(LIBOPTS_CFLAGS) $(CPPFLAGS_LIBEVENT) \
 	$(CPPFLAGS_NTP) $(NTP_HARD_CPPFLAGS)
 AM_LDFLAGS = $(LDFLAGS_NTP) $(NTP_HARD_LDFLAGS)
-LDADD = libsntp.a $(LIBOPTS_LDADD) $(LDADD_LIBEVENT) \
+LDADD = libsntp.a $(LIBOPTS_LDADD) \
 	../libntp/libntp.a $(LDADD_LIBNTP) $(LIBM) $(PTHREAD_LIBS) \
-	$(LDADD_NTP)
+	$(LDADD_NTP) $(LDADD_LIBEVENT)
 run_ag = cd $(srcdir) &&	env PATH="$(abs_builddir):$(PATH)" AUTOGEN_DNE_DATE=-D	\
 		autogen -L include -L ag-tpl --writable
 
--- sntp/tests/Makefile.in
+++ sntp/tests/Makefile.in
@@ -781,10 +781,10 @@ EXTRA_DIST = \
 base_LDADD = \
 	../libsntp.a				\
 	$(LIBOPTS_LDADD)			\
-	$(LDADD_LIBEVENT)			\
 	$(top_builddir)/../libntp/libntp.a	\
 	$(LDADD_LIBNTP)				\
 	$(LDADD_NTP)				\
+	$(LDADD_LIBEVENT)			\
 	$(NULL)
 
 LDADD = \
