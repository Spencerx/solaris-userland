Fix for Oracle bug 36309412:
libdaemon's daemon_close_all() calls close() too many times

If the exception list is empty (first entry is -1), then just call closefrom(),
otherwise call fdwalk() with a helper to check the exception list and skip the
fd's listed in it.

--- libdaemon-0.14/configure.ac
+++ libdaemon-0.14/configure.ac
@@ -70,6 +70,7 @@ AC_FUNC_FORK
 AC_FUNC_SELECT_ARGTYPES
 AC_FUNC_VPRINTF
 AC_CHECK_FUNCS([select strerror dup2 memset strrchr asprintf])
+AC_CHECK_FUNCS([closefrom fdwalk])
 AC_TYPE_MODE_T
 AC_FUNC_SETPGRP
 AC_TYPE_SIGNAL
--- libdaemon-0.14/libdaemon/dfork.c
+++ libdaemon-0.14/libdaemon/dfork.c
@@ -482,6 +482,29 @@ errno = saved_errno;
     return r;
 }
 
+#ifdef HAVE_FDWALK
+static int
+daemon_close_fd(void *callback_data, int fd)
+{
+    const int *except_fds = (const int *) callback_data;
+
+    if (fd < 3) {
+	return 0;
+    }
+
+    for (int i = 0; except_fds[i] >= 0; i++) {
+	if (except_fds[i] == fd) {
+	    return 0;
+	}
+    }
+
+    if (close(fd) < 0 && errno != EBADF)
+	return -1;
+
+    return 0;
+}
+#endif
+
 /** Same as daemon_close_all but takes an array of fds, terminated by -1 */
 int daemon_close_allv(const int except_fds[]) {
     struct rlimit rl;
@@ -558,6 +581,17 @@ }
 
 #endif
 
+#ifdef HAVE_CLOSEFROM
+    if (except_fds[0] < 0) {
+	closefrom(3);
+	return 0;
+    }
+#endif
+
+#ifdef HAVE_FDWALK
+    return fdwalk(daemon_close_fd, except_fds);
+#else
+
     if (getrlimit(RLIMIT_NOFILE, &rl) > 0)
         maxfd = (int) rl.rlim_max;
     else
@@ -587,6 +621,7 @@ _daemon_retval_pipe[0] = -1;        /* m
     }
 
     return 0;
+#endif /* HAVE_FDWALK */
 }
 
 int daemon_unblock_sigs(int except, ...) {
