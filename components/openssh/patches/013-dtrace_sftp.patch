#
# This patch is to provide a SFTP DTrace provider which offers an administrator
# some observability of SFTP data transfer. This was developed in-house. 
# Because this is Solaris-specific and not suitable for upstream, we will not
# contribute the changes to the upstream community.
#
--- old/Makefile.in	2025-04-15 11:13:00.184179520 +0200
+++ new/Makefile.in	2025-04-15 11:16:32.270340665 +0200
@@ -27,6 +27,7 @@ SSHD_SESSION=$(libexecdir)/sshd-session
 SSHD_AUTH=$(libexecdir)/sshd-auth
 SSH_PKCS11_HELPER=$(libexecdir)/ssh-pkcs11-helper
 SSH_SK_HELPER=$(libexecdir)/ssh-sk-helper
+ROOTDLIBDIR64=$(DESTDIR)/usr/lib/dtrace/64
 PRIVSEP_PATH=@PRIVSEP_PATH@
 SSH_PRIVSEP_USER=@SSH_PRIVSEP_USER@
 STRIP_OPT=@STRIP_OPT@
@@ -108,6 +109,7 @@ LIBSSH_OBJS=${LIBOPENSSH_OBJS} \
 	monitor_fdpass.o rijndael.o ssh-dss.o ssh-ecdsa.o ssh-ecdsa-sk.o \
 	ssh-ed25519-sk.o ssh-rsa.o dh.o \
 	msg.o progressmeter.o dns.o entropy.o gss-genr.o umac.o umac128.o \
+	sftp_provider.o \
 	ssh-pkcs11.o smult_curve25519_ref.o \
 	poly1305.o chacha.o cipher-chachapoly.o cipher-chachapoly-libcrypto.o \
 	ssh-ed25519.o digest-openssl.o digest-libc.o \
@@ -139,7 +141,7 @@ SSHD_SESSION_OBJS=sshd-session.o auth-rh
 	monitor.o monitor_wrap.o auth-krb5.o \
 	auth2-gss.o gss-serv.o gss-serv-krb5.o \
 	loginrec.o auth-pam.o auth-shadow.o auth-sia.o \
-	sftp-server.o sftp-common.o \
+	sftp-server.o sftp-common.o sftp_provider.o \
 	uidswap.o platform-listen.o $(SKOBJS)
 
 SSHD_AUTH_OBJS=sshd-auth.o \
@@ -154,7 +156,7 @@ SSHD_AUTH_OBJS=sshd-auth.o \
 	loginrec.o auth-pam.o auth-shadow.o auth-sia.o \
 	sandbox-null.o sandbox-rlimit.o sandbox-darwin.o \
 	sandbox-seccomp-filter.o sandbox-capsicum.o  sandbox-solaris.o \
-	sftp-server.o sftp-common.o \
+	sftp-server.o sftp-common.o sftp_provider.o \
 	uidswap.o $(SKOBJS)
 
 SFTP_CLIENT_OBJS=sftp-common.o sftp-client.o sftp-glob.o
@@ -175,7 +177,7 @@ SKHELPER_OBJS=	ssh-sk-helper.o ssh-sk.o
 
 SSHKEYSCAN_OBJS=ssh-keyscan.o $(SKOBJS)
 
-SFTPSERVER_OBJS=sftp-common.o sftp-server.o sftp-server-main.o
+SFTPSERVER_OBJS=sftp-common.o sftp-server.o sftp-server-main.o sftp_provider.o
 
 SFTP_OBJS=	sftp.o sftp-usergroup.o progressmeter.o $(SFTP_CLIENT_OBJS)
 
@@ -304,9 +306,20 @@ $(CONFIGFILES): $(CONFIGFILES_IN) Makefi
 moduli:
 	echo
 
+# dtrace sftp
+sftp_provider.h: $(srcdir)/sftp_provider.d
+	/usr/sbin/dtrace -xnolibs -h -s $(srcdir)/sftp_provider.d \
+	    -o $(srcdir)/sftp_provider.h
+
+sftp_provider.o: sftp_provider.d sftp_provider.h sftp-server.o
+	/usr/sbin/dtrace -G -64 -xnolibs -s $(srcdir)/sftp_provider.d \
+	    sftp-server.o -o sftp_provider.o
+
+sftp-server.o: sftp_provider.h
+
 clean:	regressclean
 	rm -f *.o *.lo *.a $(TARGETS) logintest config.cache config.log
-	rm -f *.out core survey
+	rm -f *.out core survey sftp_provider.h
 	rm -f regress/check-perm$(EXEEXT)
 	rm -f regress/mkdtemp$(EXEEXT)
 	rm -f regress/unittests/test_helper/*.a
@@ -473,6 +486,7 @@ install-files:
 	$(INSTALL) -m 644 ssh-keysign.8.out $(DESTDIR)$(mandir)/$(mansubdir)8/ssh-keysign.8
 	$(INSTALL) -m 644 ssh-pkcs11-helper.8.out $(DESTDIR)$(mandir)/$(mansubdir)8/ssh-pkcs11-helper.8
 	$(INSTALL) -m 644 ssh-sk-helper.8.out $(DESTDIR)$(mandir)/$(mansubdir)8/ssh-sk-helper.8
+	mkdir -p $(ROOTDLIBDIR64) && cp $(srcdir)/sftp64.d $(ROOTDLIBDIR64)/sftp64.d
 
 install-sysconf:
 	$(MKDIR_P) $(DESTDIR)$(sysconfdir)
--- old/sftp-server.c	2025-04-09 09:02:43.000000000 +0200
+++ new/sftp-server.c	2025-04-15 11:13:00.845488300 +0200
@@ -56,6 +56,9 @@
 
 #include "sftp.h"
 #include "sftp-common.h"
+#ifdef DTRACE_SFTP
+#include "sftp_provider_impl.h"
+#endif
 
 char *sftp_realpath(const char *, char *); /* sftp-realpath.c */
 
@@ -803,14 +806,16 @@ process_read(u_int32_t id)
 	u_int32_t len;
 	int r, handle, fd, ret, status = SSH2_FX_FAILURE;
 	u_int64_t off;
+	char *fpath;
 
 	if ((r = get_handle(iqueue, &handle)) != 0 ||
 	    (r = sshbuf_get_u64(iqueue, &off)) != 0 ||
 	    (r = sshbuf_get_u32(iqueue, &len)) != 0)
 		fatal_fr(r, "parse");
 
+	fpath = handle_to_name(handle);
 	debug("request %u: read \"%s\" (handle %d) off %llu len %u",
-	    id, handle_to_name(handle), handle, (unsigned long long)off, len);
+	    id, fpath, handle, (unsigned long long)off, len);
 	if ((fd = handle_to_fd(handle)) == -1)
 		goto out;
 	if (len > SFTP_MAX_READ_LENGTH) {
@@ -832,14 +837,23 @@ process_read(u_int32_t id)
 	if (len == 0) {
 		/* weird, but not strictly disallowed */
 		ret = 0;
-	} else if ((ret = read(fd, buf, len)) == -1) {
-		status = errno_to_portable(errno);
-		error_f("read \"%.100s\": %s", handle_to_name(handle),
-		    strerror(errno));
-		goto out;
-	} else if (ret == 0) {
-		status = SSH2_FX_EOF;
-		goto out;
+	} else {
+#ifdef DTRACE_SFTP
+		SFTP_TRANSFER_START_OP("read", fd, fpath, len);
+#endif
+		ret = read(fd, buf, len);
+#ifdef DTRACE_SFTP
+		SFTP_TRANSFER_DONE_OP("read", fd, fpath, ret);
+#endif
+		if (ret == -1) {
+			status = errno_to_portable(errno);
+			error_f("read \"%.100s\": %s", handle_to_name(handle),
+			    strerror(errno));
+			goto out;
+		} else if (ret == 0) {
+			status = SSH2_FX_EOF;
+			goto out;
+		}
 	}
 	send_data(id, buf, ret);
 	handle_update_read(handle, ret);
@@ -857,14 +871,16 @@ process_write(u_int32_t id)
 	size_t len;
 	int r, handle, fd, ret, status;
 	u_char *data;
+	char *fpath;
 
 	if ((r = get_handle(iqueue, &handle)) != 0 ||
 	    (r = sshbuf_get_u64(iqueue, &off)) != 0 ||
 	    (r = sshbuf_get_string(iqueue, &data, &len)) != 0)
 		fatal_fr(r, "parse");
 
+	fpath = handle_to_name(handle);
 	debug("request %u: write \"%s\" (handle %d) off %llu len %zu",
-	    id, handle_to_name(handle), handle, (unsigned long long)off, len);
+	    id, fpath, handle, (unsigned long long)off, len);
 	fd = handle_to_fd(handle);
 
 	if (fd < 0)
@@ -877,7 +893,13 @@ process_write(u_int32_t id)
 			    strerror(errno));
 		} else {
 /* XXX ATOMICIO ? */
+#ifdef DTRACE_SFTP
+			SFTP_TRANSFER_START_OP("write", fd, fpath, len);
+#endif
 			ret = write(fd, data, len);
+#ifdef DTRACE_SFTP
+			SFTP_TRANSFER_DONE_OP("write", fd, fpath, ret);
+#endif
 			if (ret == -1) {
 				status = errno_to_portable(errno);
 				error_f("write \"%.100s\": %s",
