#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (c) 2008, 2025, Oracle and/or its affiliates.
#

NAME:             emacs
VERSION:          30.1
DESCRIPTION:      GNU Emacs editor
LICENSE:          GPLv3
BUGTRAQ:          solaris/utility/emacs
COMMENTS:         

This file contains information about the emacs package within the Userland
consolidation. Along with the comments in the Makefile, it documents any
deviations from standard Userland or emacs practice, as well as miscellaneous
information needed to understand how this component is put together.


- We patch the following changes into the emacs sources. Additional
  details are found in the comment at the top of each patch.

        find.patch
            The rgrep function uses the GNU-specific -path option to the
            find command. Change the default value for the find-program
            variable in grep.el to use GNU find.

            In recent releases, we find that the find-program variable
            is repeated in other autogenerated files (ldefs.boot.el,
            loaddefs.el), and that these copies must also be adjusted.
            The safest policy is to do a brute force search of the entire
            source tree for defvar of find-program, and to fix them all.

	gcc-14-FIONREAD.patch
	    When built with gcc-14, configure.ac must be patched to work
	    properly. This has been submitted upstream, and can be removed
   	    once it appears. At that time, the COMPONENT_PREP_ACTION
	    line should be commented out in the Makefile. Note that emacs
	    builds cleanly without this patch. However, it will be unable
	    to use FIONREAD, and you'll see this in the configure output.

		checking for usable FIONREAD... no

        mediator.patch
            Modify the way emacs searches for its dump files in the PATH_EXEC
            directory so that it works correctly when emacs is run via the
            /usr/bin/emacs mediator symlink. See the following for the
            background behind this change.

            https://lists.gnu.org/archive/html/emacs-devel/2021-04/msg00875.html

        tramp.patch
            A problem was found with the version of tramp delivered with
            Emacs 30.1. Path length limits in the shell break tramp with
            long file names. This patch can be removed with the next update.

            https://lists.gnu.org/archive/html/tramp-devel/2025-04/msg00000.html

	    Subsequently the underlying issue with command lines that
	    exceed 256 characters has been addressed. This too can be
	    removed in the next update.

	    https://lists.gnu.org/archive/html/tramp-devel/2025-05/msg00017.html

	man.patch
	    The patch was taken from upstream and can be removed at
	    the next update.  It Corrects an issue with man page
	    processing which failed with an error from sed
	    "/^[\o001-\o032][\o001-\ ...": RE error: invalid character range

	    https://github.com/emacs-mirror/emacs/commit/fc5e905

- The following line in Makefile must be uncommented if any patches
  modify configure.ac, and commented otherwise:

    # If a patch is present that alters the configure.ac file, get the new
    # configure generated during prep. Otherwise, comment this out.
    COMPONENT_PREP_ACTION = (cd $(@D) ; aclocal -I m4; autoconf )

- Read the output from the configure step to verify that the system
  malloc is used, and not the GNU malloc. It should look like this:

        Configured for `x86_64-pc-solaris2.12'.
        ...
          Should Emacs use the GNU version of malloc?             no
            (The GNU allocators don't work with this system configuration.)



- Prior to Emacs 27, Emacs used "dumped objects", in which an image of
  the process is captured after startup, when all the default lisp has
  been compiled, and turned into an executable that would start running
  in this already initialized state. The improvement in startup speed was
  significant, enough to justify the complexity. However, there was always
  a maintenance burden in which the emacs dumping code would fall behind
  changes in ELF, and had to be fixed. The Solaris dldump() function
  was initially created to solve this problem for emacs, by making the
  maintenance part of the linkers, rather than a problem for the program.
  Hence, for years, part of bringing up emacs on Solaris included checking
  to make sure that dldump() was used rather than the ELF dumping code that
  comes with emacs.

  As of Emacs 27, emacs uses the "portable dumper" pdump, and no longer
  uses the traditional ELF style of dumped object. Unless you build it
  with specific options to enable the old dump model, you can dispense
  with caring about dldump().

  If you do build it that way, one could examine the configure script
  looking for the setting "UNEXEC_OBJ=unexsol.o", but it seems easier/better
  to simply examine the final executable:

        % pvs -nos emacs | grep dldump
        emacs - libc.so.1 (SUNW_1.22): dldump;

- Emacs can be built as either 32-bit or 64-bit, depending on the target
  machine. The benefit of a 64-bit emacs is that the size of the files it
  can handle is not limited to 128MB, as it is with the 32-bit version.

  For Solaris, we used to build both versions, using /usr/lib/isaexec to
  run the 64-bit version if possible, and the 32-bit version otherwise. Note
  that this was only done for the emacs binary itself, as there is no
  technical need for 64-bit versions of the ancillary programs that come
  with emacs (etags, emacsclient, etc).

  Fortunately, the vast majority of the files in an emacs tree are identical,
  regardless of the platform and/or word size, which makes this particularly
  easy to do.

  With Solaris 11, all kernels are 64-bit, and we therefore do not need
  the 32-bit executables. As such, we only supply 64-bit emacs binaries now,
  and the use of usr/lib/isaexec has been removed: This cuts the number of
  builds necessary in half, and also the binary package size. It also
  simplifies packaging, and the user's view of /usr/bin/emacs*.

- With Emacs 28, there is a JIT facility for native compilation of Lisp
  (.eln) files. With Emacs 30.1, it is turned on by default if libgccjit
  is present. That's not currently the case, but to avoid an unplanned
  and untested switch from occurring if libgccjit should appear, we now
  explicitly disable it.

- There are three different toolkit options: None, Athena widgets
  (aka Xaw, or lucid), and gtk. It would be nice to only support gtk,
  but for purposes of minimization and user preference, we supply binaries
  for all three. We follow the Linux model in this regard. The Xaw and no-X
  versions are quite stable from release to release, so this isn't a large
  burden.

- By default, emacs will find and use the Image Magick image manipulation
  library. The problem with this for Solaris is that the IM library APIs
  are not committed, and change from release to release, as opposed to the
  command line interfaces which are stable. Any update to IM causes breakage
  in emacs that takes 2 builds to resolve. At the same time, IM is not central
  to emacs use, and so, we choose to explicitly disable it with the
  --without-imagemagick config option. This can be revisited if we find that
  common emacs use suffers without it, or if IM stabilizes their library APIs.

- With multiple emacs binaries, there is a need for a generic /usr/bin/emacs
  to exist, which will by default run the "best" version of emacs installed
  on the system. Older versions of Emacs for Solaris, dating back to the 
  original integration into OpenSolaris, used a shell script that contained
  this logic:

        for EXE in emacs-gtk emacs-x emacs-nox; do
                if [ -f /usr/bin/$EXE ]; then
                        exec /usr/bin/$EXE "$@"
                fi
        done

  With the update to Emacs 24.5 (July 2015), we have dropped that script,
  and /usr/bin/emacs is now an IPS mediated link:

        %  pkg mediator emacs
        MEDIATOR      VER. SRC. VERSION IMPL. SRC. IMPLEMENTATION
        emacs         vendor            vendor     emacs-gtk

  The mediator names are the same as those of the emacs binaries (emacs-gtk,
  emacs-x, emacs-nox). By default, the mediated link will give the same
  order as before (gtk, x, nox). The admin can use 'pkg set-mediator' to
  override this vendor default. For example, to set emacs-x as the mediated
  default emacs:

      # pkg set-mediator -I emacs-x emacs

  The means by which the ordering (emacs-gtk, emacs-x emacs-nox) is
  achieved needs some explanation. The mediated options are by default
  sorted in the order:

      priority, version, implementation-order, implementation

  Where "implementation" is sorted lexically. Lexical sorting puts emacs-gtk
  first, which is what we want, but it puts emacs-nox ahead of emacs-x. I
  played with setting the version or implementation-order values to achieve
  the desired sorting. This works, but as these are not real Emacs versions, 
  the output from 'pkg mediator' is confusing. Instead, we set the priority 
  of emacs-gtk and emacs-x to "vendor", and leave the priority of emacs-nox
  unspecified. Hence, emacs-gtk trumps emacs-x based on lexical sorting, and
  both of them trump emacs-nox based on priority.

- Emacs is built with gcc. While historically, Studio has been used
  successfully, the fact that emacs upstream is built and tested with
  gcc means that the process is much smoother with gcc on Solaris.

- As mentioned above, starting with Emacs 27, we no longer rely on the
  traditional "unexec", used by emacs since the 1980's, or on the Solaris
  dldump() function. Portable dumping (pdump) brings many benefits for us:

    * Inherent simplicity.

    * Elimination of the dependency on the Solaris dldump() function.
      dldump() was originally created specifically to handle emacs, back
      when dynamic linking started complicating the task of unexec.

    * Emacs can be delivered as a position independent executable (PIE).

    * ASLR, and the non-executable heap and stack security options are
      enabled.

  To enable ASLR, and the stack/heap options, the following lines were
  removed from the makefile. I record them here for their historical value,
  and in case we ever need to revisit these things:

      # LD_OPTIONS is defined to apply desirable link-editor options to
      # Userland components. Non-executable stack and data break sparc emacs.
      #
      LD_MAP_NOEXDATA.sparc=

      # ASLR should remain disabled for emacs. ASLR undermines emacs's dumping
      # code, which requires every execution to have the same mappings. Since
      # emacs is not network facing, or run with elevated privileges, this is
      # not a security concern.
      #
      # Similarly, emacs cannot cope with a non-executable stack and with
      # a protected and non-executable heap.
      ASLR_MODE =       $(ASLR_DISABLE)
      NXHEAP_MODE =     $(NXHEAP_DISABLE)
      NXSTACK_MODE =    $(NXSTACK_DISABLE)

- When updating to a new version, remember to ensure that the REQUIRED_PACKAGES
  lines in the Makefile are updated to match. Instructions can be found in the
  doc directory at the top of the userland workspace. Basically:

        % gmake REQUIRED_PACKAGES

  and then edit the Makefile to incorporate the added lines into what's
  there, and remove any no longer needed things.

- The package manifests for Emacs are a bit complex. There are 5 of them,
  and there are sparc vs x86 aspects to them, as well as a mediator, package
  dependencies, and so forth. Historically, 'gmake sample-manifest' has been
  used to generate one complete manifest, and then it was massaged manually
  into the content for the 5 actual manifests, with tweaks.

  With Emacs 30.1, support for generative IPS ('gmake manifest-update')
  has been added. This mechanism automates much of the process, and
  reduces errors. The filters found in the generate subdirectory are
  used to generate manifests, which are then cross checked against the
  current manifest files. Any differences cause the build to fail, and
  require a manual update to resolve. This is an iterative process of
  adjusting the filters in the generate subdirectory, and updating the
  manifests, to bring the reference and generated copies back into agreement:

    - Ensure that the differences are sensible. The addition or
      removal of elisp files is common, and is usually not a reason
      for concern. Other differences should be studied carefully.

    - 'gmake publish' needs to be completed successfully on both
      architectures. Any differences between the manifests generated
      by the 2 platforms should be resolved by adjusting the filters
      until the results for both platforms are identical.

    - Update the manifests with the resulting changes.

- We deliver the following packages:

        gnu-emacs - Everything you need to run emacs, except the
            emacs binaries.

        gnu-emacs-gtk - Binary for the X11 version using the GTK toolkit.

        gnu-emacs-no-x11 - Pure tty emacs binary, built without
            any X11 linkage or other extra support (i.e. D-bus). This
            is the most basic emacs possible, ideal for headless server
            systems.

        gnu-emacs-x11 - Binary for the X11 version using the Athena
            widget (Xaw) toolkit.

        gnu-emacs-lisp - The compressed LISP files for which compiled
            versions are delivered by gnu-emacs. These are only needed
            for emacs developers and those who like to read source code.

  The core gnu-emacs package is required by all of the other packages.
  In turn, gnu-emacs requires at least one of the packages supplying an
  emacs binary to be installed.

- Emacs things we don't deliver:

    x) We do not ship any suid/sgid binaries for obvious security reasons.

    x) We do not install the files under /var/games/emacs. The reason for
       this is that we do not install update-game-score as setuid, and
       therefore the game files are not usable. This the same decision made
       by Debian, among others.

    x) usr/lib/systemd/user/emacs.service, which is only applicable to Linux.
