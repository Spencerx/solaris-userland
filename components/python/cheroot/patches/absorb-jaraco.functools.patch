jaraco.functools package is not available on Solaris, and considering that it
would bring additional dependencies the necessary functions are moved directly
into cheroot.

The code below is taken directly from jaraco.functools.
https://github.com/jaraco/jaraco.functools

Not intended for upstream.

--- cheroot-10.0.0/setup.cfg
+++ cheroot-10.0.0/setup.cfg
@@ -59,7 +59,6 @@ setup_requires =
 install_requires = 
 	importlib_metadata; python_version < '3.8'
 	more_itertools >= 2.6
-	jaraco.functools
 
 [options.extras_require]
 docs = 
--- cheroot-10.0.0/cheroot/workers/threadpool.py
+++ cheroot-10.0.0/cheroot/workers/threadpool.py
@@ -12,7 +12,20 @@ import socket
 import warnings
 import queue
 
-from jaraco.functools import pass_none
+
+"""
+The following function is taken from jaraco.functools
+licensed under MIT license
+  Copyright Jason R. Coombs
+"""
+import functools
+def pass_none(func):
+    @functools.wraps(func)
+    def wrapper(param, *args, **kwargs):
+        if param is not None:
+            return func(param, *args, **kwargs)
+
+    return wrapper
 
 
 __all__ = ('WorkerThread', 'ThreadPool')
--- cheroot-10.0.0/cheroot/test/webtest.py
+++ cheroot-10.0.0/cheroot/test/webtest.py
@@ -30,7 +30,28 @@ import http.client
 import urllib.parse
 
 from more_itertools.more import always_iterable
-import jaraco.functools
+
+"""
+The following function is taken from jaraco.functools
+licensed under MIT license
+  Copyright Jason R. Coombs
+"""
+def retry_call(func, cleanup=lambda: None, retries=0, trap=()):
+    """
+    Given a callable func, trap the indicated exceptions
+    for up to 'retries' times, invoking cleanup on the
+    exception. On the final attempt, allow any exceptions
+    to propagate.
+    """
+    attempts = itertools.count() if retries == float('inf') else range(retries)
+    for attempt in attempts:
+        try:
+            return func()
+        except trap:
+            cleanup()
+
+    return func()
+
 
 
 def interface(host):
@@ -479,7 +500,7 @@ def openURL(*args, raise_subcls=(), **kw
         time.sleep(0.5)
 
     # Try up to 10 times
-    return jaraco.functools.retry_call(
+    return retry_call(
         opener,
         retries=9,
         cleanup=on_exception,
