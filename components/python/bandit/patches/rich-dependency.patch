Revert upstream commit that added new 'rich' dependency.

Considering that rich is currently used only as a single progress bar (which
isn't really a core feature in any way), and has additional dependencies that
would have to be introduced as well, it's not feasible to integrate it
on Solaris at this point.

Original upstream change:
https://github.com/PyCQA/bandit/pull/863

--- bandit-1.7.5/bandit/core/constants.py
+++ bandit-1.7.5/bandit/core/constants.py
@@ -5,6 +5,9 @@
 # default plugin name pattern
 plugin_name_pattern = "*.py"
 
+# default progress increment
+progress_increment = 50
+
 RANKING = ["UNDEFINED", "LOW", "MEDIUM", "HIGH"]
 RANKING_VALUES = {"UNDEFINED": 1, "LOW": 3, "MEDIUM": 5, "HIGH": 10}
 CRITERIA = [("SEVERITY", "UNDEFINED"), ("CONFIDENCE", "UNDEFINED")]
--- bandit-1.7.10/bandit/core/manager.py
+++ bandit-1.7.10/bandit/core/manager.py
@@ -13,8 +13,6 @@ import sys
 import tokenize
 import traceback
 
-from rich import progress
-
 from bandit.core import constants as b_constants
 from bandit.core import extension_loader
 from bandit.core import issue
@@ -26,7 +24,6 @@ from bandit.core import test_set as b_te
 LOG = logging.getLogger(__name__)
 NOSEC_COMMENT = re.compile(r"#\s*nosec:?\s*(?P<tests>[^#]+)?#?")
 NOSEC_COMMENT_TESTS = re.compile(r"(?:(B\d+|[a-z\d_]+),?)+", re.IGNORECASE)
-PROGRESS_THRESHOLD = 50
 
 
 class BanditManager:
@@ -70,6 +67,9 @@ class BanditManager:
         self.agg_type = agg_type
         self.metrics = metrics.Metrics()
         self.b_ts = b_test_set.BanditTestSet(config, profile)
+
+        # set the increment of after how many files to show progress
+        self.progress = b_constants.progress_increment
         self.scores = []
 
     def get_skipped(self):
@@ -263,20 +263,19 @@ class BanditManager:
 
         :return: -
         """
+        self._show_progress("%s [" % len(self.files_list))
+
         # if we have problems with a file, we'll remove it from the files_list
         # and add it to the skipped list instead
         new_files_list = list(self.files_list)
-        if (
-            len(self.files_list) > PROGRESS_THRESHOLD
-            and LOG.getEffectiveLevel() <= logging.INFO
-        ):
-            files = progress.track(self.files_list)
-        else:
-            files = self.files_list
 
-        for count, fname in enumerate(files):
+        for count, fname in enumerate(self.files_list):
             LOG.debug("working on file : %s", fname)
 
+            if len(self.files_list) > self.progress:
+                # is it time to update the progress indicator?
+                if count % self.progress == 0:
+                    self._show_progress("%s.. " % count, flush=True)
             try:
                 if fname == "-":
                     open_fd = os.fdopen(sys.stdin.fileno(), "rb", 0)
@@ -292,12 +291,32 @@ class BanditManager:
                 self.skipped.append((fname, e.strerror))
                 new_files_list.remove(fname)
 
+        self._show_progress("]\n", flush=True)
+
         # reflect any files which may have been skipped
         self.files_list = new_files_list
 
         # do final aggregation of metrics
         self.metrics.aggregate()
 
+    def _show_progress(self, message, flush=False):
+        """Show progress on stderr
+
+        Write progress message to stderr, if number of files warrants it and
+        log level is high enough.
+
+        :param message: The message to write to stderr
+        :param flush: Whether to flush stderr after writing the message
+        :return:
+        """
+        if (
+            len(self.files_list) > self.progress
+            and LOG.getEffectiveLevel() <= logging.INFO
+        ):
+            sys.stderr.write(message)
+            if flush:
+                sys.stderr.flush()
+
     def _parse_file(self, fname, fdata, new_files_list):
         try:
             # parse the current file
@@ -321,7 +340,11 @@ class BanditManager:
                 pass
             score = self._execute_ast_visitor(fname, fdata, data, nosec_lines)
             self.scores.append(score)
-            self.metrics.count_issues([score])
+            self.metrics.count_issues(
+                [
+                    score,
+                ]
+            )
         except KeyboardInterrupt:
             sys.exit(2)
         except SyntaxError:
--- bandit-1.7.10/requirements.txt
+++ bandit-1.7.10/requirements.txt
@@ -4,4 +4,3 @@
 PyYAML>=5.3.1 # MIT
 stevedore>=1.20.0 # Apache-2.0
 colorama>=0.3.9;platform_system=="Windows" # BSD License (3 clause)
-rich # MIT
--- bandit-1.7.10/bandit.egg-info/requires.txt
+++ bandit-1.7.10/bandit.egg-info/requires.txt
@@ -1,6 +1,5 @@
 PyYAML>=5.3.1
 stevedore>=1.20.0
-rich
 
 [:(platform_system=="Windows")]
 colorama>=0.3.9
