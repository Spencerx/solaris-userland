Solaris doesn't have pretend, or pytest-benchmark packages,
hence all tests/options depending on those are disabled.

--- cryptography-43.0.1/pyproject.toml
+++ cryptography-43.0.1/pyproject.toml
@@ -93,7 +93,7 @@ py-limited-api = "auto"
 rust-version = ">=1.65.0"
 
 [tool.pytest.ini_options]
-addopts = "-r s --capture=no --strict-markers --benchmark-disable"
+addopts = "-r s --capture=no --strict-markers"
 console_output_style = "progress-even-when-capture-no"
 markers = [
     "skip_fips: this test is not executed in FIPS mode",
--- cryptography-43.0.1/tests/test_fernet.py
+++ cryptography-43.0.1/tests/test_fernet.py
@@ -9,7 +9,6 @@ import json
 import os
 import time
 
-import pretend
 import pytest
 
 import cryptography_vectors
@@ -120,6 +119,7 @@ class TestFernet:
         with pytest.raises(TypeError):
             f.decrypt(12345)  # type: ignore[arg-type]
 
+    @pytest.mark.skip(reason="We don't have pretend on Solaris")
     def test_timestamp_ignored_no_ttl(self, monkeypatch, backend):
         f = Fernet(base64.urlsafe_b64encode(b"\x00" * 32), backend=backend)
         pt = b"encrypt me"
--- cryptography-43.0.1/tests/test_utils.py
+++ cryptography-43.0.1/tests/test_utils.py
@@ -8,7 +8,6 @@ import inspect
 import os
 import textwrap
 
-import pretend
 import pytest
 
 import cryptography
@@ -46,6 +45,7 @@ def test_int_to_bytes_rejects_zero_lengt
         cryptography.utils.int_to_bytes(0, 0)
 
 
+@pytest.mark.skip(reason="We don't have pretend on Solaris")
 def test_check_backend_support_skip():
     supported = pretend.stub(
         kwargs={"only_if": lambda backend: False, "skip_message": "Nope"}
@@ -57,6 +57,7 @@ def test_check_backend_support_skip():
     assert exc_info.value.args[0] == "Nope (True)"
 
 
+@pytest.mark.skip(reason="We don't have pretend on Solaris")
 def test_check_backend_support_no_skip():
     supported = pretend.stub(
         kwargs={"only_if": lambda backend: True, "skip_message": "Nope"}
--- cryptography-43.0.1/tests/x509/test_x509_ext.py
+++ cryptography-43.0.1/tests/x509/test_x509_ext.py
@@ -9,7 +9,6 @@ import ipaddress
 import os
 import typing
 
-import pretend
 import pytest
 
 from cryptography import x509
@@ -1753,6 +1752,7 @@ class TestSubjectKeyIdentifierExtension:
         ski = x509.SubjectKeyIdentifier.from_public_key(cert.public_key())
         assert ext.value == ski
 
+    @pytest.mark.skip(reason="We don't have pretend on Solaris")
     def test_invalid_bit_string_padding_from_public_key(self, backend):
         data = load_vectors_from_file(
             filename=os.path.join(
