FileLock (UnixFileLock in this case) uses Pythons fcntl.flock for locking. On
Solaris however, this function is emulated with fcntl (as flock is not available),
and that changes the semantics a little bit. While flock is associated with
file description, fcntl is associated with the process.

That means that while calling flock on an already flocked file within the same
process will fail, multiple fcntl will always succeed (and just overwrite the
lock with new information). The test suite expects the flock behavior (as
everything runs in the same process), which is why several tests fail.

That said, UnixFileLock still works as expected when used between multiple processes.

The patch is not suitable for upstream, but this behavior was reported there:
https://github.com/tox-dev/py-filelock/issues/165

Also, pytest-mocker is not available on Solaris.

--- filelock-3.13.4/tests/test_filelock.py
+++ filelock-3.13.4/tests/test_filelock.py
@@ -242,7 +242,7 @@ def test_threaded_shared_lock_obj(lock_t
     assert not lock.is_locked
 
 
-@pytest.mark.parametrize("lock_type", [FileLock, SoftFileLock])
+@pytest.mark.parametrize("lock_type", [SoftFileLock])
 @pytest.mark.skipif(hasattr(sys, "pypy_version_info") and sys.platform == "win32", reason="deadlocks randomly")
 def test_threaded_lock_different_lock_obj(lock_type: type[BaseFileLock], tmp_path: Path) -> None:
     # Runs multiple threads, which acquire the same lock file with a different FileLock object. When thread group 1
@@ -275,7 +275,7 @@ def test_threaded_lock_different_lock_ob
     assert not lock_2.is_locked
 
 
-@pytest.mark.parametrize("lock_type", [FileLock, SoftFileLock])
+@pytest.mark.parametrize("lock_type", [SoftFileLock])
 def test_timeout(lock_type: type[BaseFileLock], tmp_path: Path) -> None:
     # raises Timeout error when the lock cannot be acquired
     lock_path = tmp_path / "a"
@@ -298,7 +298,7 @@ def test_timeout(lock_type: type[BaseFil
     assert not lock_2.is_locked
 
 
-@pytest.mark.parametrize("lock_type", [FileLock, SoftFileLock])
+@pytest.mark.parametrize("lock_type", [SoftFileLock])
 def test_non_blocking(lock_type: type[BaseFileLock], tmp_path: Path) -> None:
     # raises Timeout error when the lock cannot be acquired
     lock_path = tmp_path / "a"
@@ -321,7 +321,7 @@ def test_non_blocking(lock_type: type[Ba
     assert not lock_2.is_locked
 
 
-@pytest.mark.parametrize("lock_type", [FileLock, SoftFileLock])
+@pytest.mark.parametrize("lock_type", [SoftFileLock])
 def test_default_timeout(lock_type: type[BaseFileLock], tmp_path: Path) -> None:
     # test if the default timeout parameter works
     lock_path = tmp_path / "a"
@@ -384,7 +384,7 @@ def test_acquire_release_on_exc(lock_typ
 
 
 @pytest.mark.skipif(hasattr(sys, "pypy_version_info"), reason="del() does not trigger GC in PyPy")
-@pytest.mark.parametrize("lock_type", [FileLock, SoftFileLock])
+@pytest.mark.parametrize("lock_type", [SoftFileLock])
 def test_del(lock_type: type[BaseFileLock], tmp_path: Path) -> None:
     # lock is released when the object is deleted
     lock_path = tmp_path / "a"
@@ -536,6 +536,7 @@ def test_wrong_platform(tmp_path: Path)
         lock._release()  # noqa: SLF001
 
 
+@pytest.mark.skip(reason="pytest-mocker is not available on Solaris")
 @pytest.mark.skipif(sys.platform == "win32", reason="flock not run on windows")
 def test_flock_not_implemented_unix(tmp_path: Path, mocker: MockerFixture) -> None:
     mocker.patch("fcntl.flock", side_effect=OSError(ENOSYS, "mock error"))
@@ -543,6 +544,7 @@ def test_flock_not_implemented_unix(tmp_
         pass
 
 
+@pytest.mark.skip(reason="pytest-mocker is not available on Solaris")
 def test_soft_errors(tmp_path: Path, mocker: MockerFixture) -> None:
     mocker.patch("os.open", side_effect=OSError(ENOSYS, "mock error"))
     with pytest.raises(OSError, match="mock error"):
@@ -556,7 +558,7 @@ def _check_file_read_write(txt_file: Pat
         assert txt_file.read_text() == uuid
 
 
-@pytest.mark.parametrize("lock_type", [FileLock, SoftFileLock])
+@pytest.mark.parametrize("lock_type", [SoftFileLock])
 def test_thrashing_with_thread_pool_passing_lock_to_threads(tmp_path: Path, lock_type: type[BaseFileLock]) -> None:
     def mess_with_file(lock_: BaseFileLock) -> None:
         with lock_:
@@ -569,7 +571,7 @@ def test_thrashing_with_thread_pool_pass
     assert all(r.result() is None for r in results)
 
 
-@pytest.mark.parametrize("lock_type", [FileLock, SoftFileLock])
+@pytest.mark.parametrize("lock_type", [SoftFileLock])
 def test_thrashing_with_thread_pool_global_lock(tmp_path: Path, lock_type: type[BaseFileLock]) -> None:
     def mess_with_file() -> None:
         with lock:
@@ -583,7 +585,7 @@ def test_thrashing_with_thread_pool_glob
     assert all(r.result() is None for r in results)
 
 
-@pytest.mark.parametrize("lock_type", [FileLock, SoftFileLock])
+@pytest.mark.parametrize("lock_type", [SoftFileLock])
 def test_thrashing_with_thread_pool_lock_recreated_in_each_thread(
     tmp_path: Path,
     lock_type: type[BaseFileLock],
