Since the platform is known at this point, we can simplify the logic
and not deliver the windows related locking.

--- filelock-3.13.4/src/filelock/__init__.py
+++ filelock-3.13.4/src/filelock/__init__.py
@@ -15,23 +15,14 @@ from typing import TYPE_CHECKING
 from ._api import AcquireReturnProxy, BaseFileLock
 from ._error import Timeout
 from ._soft import SoftFileLock
-from ._unix import UnixFileLock, has_fcntl
-from ._windows import WindowsFileLock
+from ._unix import UnixFileLock
 from .version import version
 
 #: version of the project as a string
 __version__: str = version
 
 
-if sys.platform == "win32":  # pragma: win32 cover
-    _FileLock: type[BaseFileLock] = WindowsFileLock
-else:  # pragma: win32 no cover # noqa: PLR5501
-    if has_fcntl:
-        _FileLock: type[BaseFileLock] = UnixFileLock
-    else:
-        _FileLock = SoftFileLock
-        if warnings is not None:
-            warnings.warn("only soft file lock is available", stacklevel=2)
+_FileLock: type[BaseFileLock] = UnixFileLock
 
 if TYPE_CHECKING:
     FileLock = SoftFileLock
@@ -47,6 +38,5 @@ __all__ = [
     "SoftFileLock",
     "Timeout",
     "UnixFileLock",
-    "WindowsFileLock",
     "__version__",
 ]
--- filelock-3.13.4/tests/test_filelock.py
+++ filelock-3.13.4/tests/test_filelock.py
@@ -18,7 +18,7 @@ from weakref import WeakValueDictionary
 
 import pytest
 
-from filelock import BaseFileLock, FileLock, SoftFileLock, Timeout, UnixFileLock, WindowsFileLock
+from filelock import BaseFileLock, FileLock, SoftFileLock, Timeout, UnixFileLock
 
 if TYPE_CHECKING:
     from pytest_mock import MockerFixture
@@ -521,6 +521,7 @@ def test_umask_soft(tmp_path: Path) -> N
     lock.release()
 
 
+@pytest.mark.skip(reason="We don't deliver WindowsFileLock with Solaris")
 def test_wrong_platform(tmp_path: Path) -> None:
     assert not inspect.isabstract(UnixFileLock)
     assert not inspect.isabstract(WindowsFileLock)
