Jaraco functools are not available on Solaris yet, but those two functions
can be very easily moved directly into tempora.

Not suitable for upstream.

--- tempora-5.5.1/tempora.egg-info/requires.txt
+++ tempora-5.5.1/tempora.egg-info/requires.txt
@@ -1,5 +1,4 @@
 pytz
-jaraco.functools>=1.20
 
 [docs]
 sphinx>=3.5
--- tempora-5.5.1/tempora/timing.py
+++ tempora-5.5.1/tempora/timing.py
@@ -5,7 +5,18 @@ import functools
 import numbers
 import time
 
-import jaraco.functools
+
+def save_method_args(method):
+    args_and_kwargs = collections.namedtuple('args_and_kwargs', 'args kwargs')
+
+    @functools.wraps(method)
+    def wrapper(self, *args, **kwargs):
+        attr_name = '_saved_' + method.__name__
+        attr = args_and_kwargs(args, kwargs)
+        setattr(self, attr_name, attr)
+        return method(self, *args, **kwargs)
+
+    return wrapper
 
 
 class Stopwatch:
@@ -228,7 +239,7 @@ class BackoffDelay(collections.abc.Itera
     jitter = 0
     "Number or callable returning extra seconds to add to delay"
 
-    @jaraco.functools.save_method_args
+    @save_method_args
     def __init__(self, delay=0, factor=1, limit=float('inf'), jitter=0):
         self.delay = delay
         self.factor = factor
--- tempora-5.5.1/setup.cfg
+++ tempora-5.5.1/setup.cfg
@@ -17,7 +17,6 @@ include_package_data = true
 python_requires = >=3.8
 install_requires = 
 	pytz
-	jaraco.functools>=1.20
 
 [options.extras_require]
 testing = 
