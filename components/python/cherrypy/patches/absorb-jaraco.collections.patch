jaraco.collections package is not available on Solaris, and considering that it
would bring additional dependencies the necessary functions are moved directly
into cherrypy.

The code below is taken directly from jaraco.collections.
https://github.com/jaraco/jaraco.collections

Not intended for upstream.

--- cherrypy-18.10.0/cherrypy/lib/httputil.py
+++ cherrypy-18.10.0/cherrypy/lib/httputil.py
@@ -16,8 +16,6 @@ from email.header import decode_header
 from http.server import BaseHTTPRequestHandler
 from urllib.parse import unquote_plus
 
-import jaraco.collections
-
 import cherrypy
 from cherrypy._cpcompat import ntob, ntou
 from .headers import parse_header
@@ -383,7 +381,69 @@ def parse_query_string(query_string, kee
     return pm
 
 
-class CaseInsensitiveDict(jaraco.collections.KeyTransformingDict):
+"""
+The following function is taken from jaraco.collections
+licensed under MIT license
+  Copyright Jason R. Coombs
+"""
+class KeyTransformingDict(dict):
+    """
+    A dict subclass that transforms the keys before they're used.
+    Subclasses may override the default transform_key to customize behavior.
+    """
+
+    @staticmethod
+    def transform_key(key):  # pragma: nocover
+        return key
+
+    def __init__(self, *args, **kargs):
+        super(KeyTransformingDict, self).__init__()
+        # build a dictionary using the default constructs
+        d = dict(*args, **kargs)
+        # build this dictionary using transformed keys.
+        for item in d.items():
+            self.__setitem__(*item)
+
+    def __setitem__(self, key, val):
+        key = self.transform_key(key)
+        super(KeyTransformingDict, self).__setitem__(key, val)
+
+    def __getitem__(self, key):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).__getitem__(key)
+
+    def __contains__(self, key):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).__contains__(key)
+
+    def __delitem__(self, key):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).__delitem__(key)
+
+    def get(self, key, *args, **kwargs):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).get(key, *args, **kwargs)
+
+    def setdefault(self, key, *args, **kwargs):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).setdefault(key, *args, **kwargs)
+
+    def pop(self, key, *args, **kwargs):
+        key = self.transform_key(key)
+        return super(KeyTransformingDict, self).pop(key, *args, **kwargs)
+
+    def matching_key_for(self, key):
+        """
+        Given a key, return the actual key stored in self that matches.
+        Raise KeyError if the key isn't found.
+        """
+        try:
+            return next(e_key for e_key in self.keys() if e_key == key)
+        except StopIteration:
+            raise KeyError(key)
+
+
+class CaseInsensitiveDict(KeyTransformingDict):
     """A case-insensitive dict subclass.
 
     Each key is changed on entry to title case.
--- cherrypy-18.10.0/setup.py
+++ cherrypy-18.10.0/setup.py
@@ -69,7 +69,6 @@ params = dict(
         'portend>=2.1.1',
         'more_itertools',
         'zc.lockfile',
-        'jaraco.collections',
         'importlib-metadata; python_version<="3.7"',
     ],
     extras_require={
