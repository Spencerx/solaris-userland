Solaris specific patch, not suitable for upstream.

The pytest.ini changes are required as some of the
default options are not available in Solaris.

pytest-services and requests_toolbelt are not available
on Solaris and thus skipped.

Path package is not available on Solaris and thus all
its code is replaced with standard pathlib.

test_2_File_Concurrency assert won't pass because of incorrect locking
expectations. On Solaris, this function is emulated with fcntl (as flock is
not available), and that changes the semantics as fcntl is process based lock
rather than file description based one (and as such won't do anything within
the same process).

--- CherryPy-18.9.0/setup.py
+++ CherryPy-18.9.0/setup.py
@@ -91,7 +91,6 @@ params = dict(
             'objgraph',
 
             'pytest>=5.3.5',
-            'pytest-cov',
             'pytest-forked',
             'pytest-sugar',
             'path.py',
--- CherryPy-18.8.0/pytest.ini
+++ CherryPy-18.8.0/pytest.ini
@@ -27,19 +27,6 @@ addopts =
   # Dump the test results in junit format:
   --junitxml=.test-results/pytest/results.xml
 
-  # `pytest-cov`:
-  # `pytest-cov`, "-p" preloads the module early:
-  -p pytest_cov
-  --no-cov-on-fail
-  --cov=cherrypy
-  --cov-branch
-  --cov-report=term-missing:skip-covered
-  --cov-report=html:.tox/tmp/test-results/pytest/cov/
-  --cov-report=xml
-  # --cov-report xml:.test-results/pytest/cov.xml  # alternatively move it here
-  --cov-context=test
-  --cov-config=.coveragerc
-
 doctest_optionflags = ALLOW_UNICODE ELLIPSIS
 
 filterwarnings =
--- CherryPy-18.8.0/cherrypy/test/test_session.py
+++ CherryPy-18.8.0/cherrypy/test/test_session.py
@@ -407,6 +407,11 @@ def is_memcached_present():
 
 
 @pytest.fixture(scope='session')
+def watcher_getter():
+    pytest.skip("pytest-services is not available on Solaris")
+
+
+@pytest.fixture(scope='session')
 def memcached_server_present():
     is_memcached_present() or pytest.skip('memcached not available')
 
--- CherryPy-18.8.0/cherrypy/test/test_native.py
+++ CherryPy-18.8.0/cherrypy/test/test_native.py
@@ -1,7 +1,6 @@
 """Test the native server."""
 
 import pytest
-from requests_toolbelt import sessions
 
 import cherrypy._cpnative_server
 
@@ -30,6 +29,7 @@ def cp_native_server(request):
     return sessions.BaseUrlSession(url)
 
 
+@pytest.mark.skip(reason="requests_toolbelt is not available on Solaris")
 def test_basic_request(cp_native_server):
     """A request to a native server should succeed."""
     resp = cp_native_server.get('/')
locking issue

--- CherryPy-18.8.0/cherrypy/test/test_static.py
+++ CherryPy-18.8.0/cherrypy/test/test_static.py
@@ -11,7 +11,7 @@ from http.client import HTTPConnection
 
 import pytest
 import py.path
-import path
+import pathlib
 
 import cherrypy
 from cherrypy.lib import static
@@ -46,7 +46,7 @@ def ensure_unicode_filesystem():
         tmpdir.remove()
 
 
-curdir = path.Path(__file__).dirname()
+curdir = pathlib.Path(__file__).parent
 has_space_filepath = curdir / 'static' / 'has space.html'
 bigfile_filepath = curdir / 'static' / 'bigfile.log'
 
@@ -78,7 +78,7 @@ class StaticTest(helper.CPWebCase):
             @cherrypy.expose
             @cherrypy.config(**{'response.stream': True})
             def bigfile(self):
-                self.f = static.serve_file(bigfile_filepath)
+                self.f = static.serve_file(str(bigfile_filepath))
                 return self.f
 
             @cherrypy.expose
@@ -178,7 +178,10 @@ class StaticTest(helper.CPWebCase):
         files_to_remove = has_space_filepath, bigfile_filepath
         files_to_remove += tuple(cls.files_to_remove)
         for file in files_to_remove:
-            file.remove_p()
+            try:
+                file.unlink()
+            except FileNotFoundError:
+                pass
 
     def test_static(self):
         self.getPage('/static/index.html')
--- CherryPy-18.8.0/cherrypy/test/test_session.py
+++ CherryPy-18.8.0/cherrypy/test/test_session.py
@@ -6,7 +6,7 @@ from http.client import HTTPConnection
 
 from distutils.spawn import find_executable
 import pytest
-from path import Path
+from pathlib import Path
 from more_itertools import consume
 import portend
 
@@ -18,7 +18,7 @@ from cherrypy.lib.httputil import respon
 from cherrypy.test import helper
 from cherrypy import _json as json
 
-localDir = Path(__file__).dirname()
+localDir = Path(__file__).parent
 
 
 def http_methods_allowed(methods=['GET', 'HEAD']):
@@ -147,11 +147,11 @@ class SessionTest(helper.CPWebCase):
         """Clean up sessions."""
         super(cls, cls).teardown_class()
         consume(
-            file.remove_p()
-            for file in localDir.listdir()
-            if file.basename().startswith(
+            os.unlink(file)
+            for file in os.listdir(localDir)
+            if os.path.basename(file).startswith(
                 sessions.FileSession.SESSION_PREFIX
-            )
+            ) and os.path.exists(file)
         )
 
     def test_0_Session(self):
--- CherryPy-18.8.0/cherrypy/test/test_session.py
+++ CherryPy-18.8.0/cherrypy/test/test_session.py
@@ -289,7 +289,7 @@ class SessionTest(helper.CPWebCase):
         for e in errors:
             print(e)
         assert len(errors) == 0
-        assert hitcount == expected
+        #assert hitcount == expected
 
     def test_3_Redirect(self):
         # Start a new session
