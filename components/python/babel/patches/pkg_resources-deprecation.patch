Migrates Babel away from deprecated pkg_resources.

Not intended for upstream as they already migrated with a similar change:
https://github.com/python-babel/babel/commit/4d3fd0e0198185cd023f4d3cd1495bda211867f4

Compared to upstream, this one supports Python 3.9 as well with the help of
importlib_metadata backport package.

--- Babel-2.14.0/setup.py
+++ Babel-2.14.0/setup.py
@@ -67,6 +67,7 @@ setup(
         # higher.
         # Python 3.9 and later include zoneinfo which replaces pytz
         'pytz>=2015.7; python_version<"3.9"',
+        'importlib_metadata; python_version<"3.11"',
     ],
     extras_require={
         'dev': [
--- Babel-2.14.0/babel/messages/checkers.py
+++ Babel-2.14.0/babel/messages/checkers.py
@@ -157,14 +157,18 @@ def _validate_format(format: str, altern
 def _find_checkers() -> list[Callable[[Catalog | None, Message], object]]:
     checkers: list[Callable[[Catalog | None, Message], object]] = []
     try:
-        from pkg_resources import working_set
+        from importlib_metadata import entry_points
     except ImportError:
-        pass
-    else:
-        for entry_point in working_set.iter_entry_points('babel.checkers'):
+        try:
+            from importlib.metadata import entry_points
+        except ImportError:
+            entry_points = None
+
+    if entry_points:
+        for entry_point in entry_points(group='babel.checkers'):
             checkers.append(entry_point.load())
     if len(checkers) == 0:
-        # if pkg_resources is not available or no usable egg-info was found
+        # if entrypoints are not available or no usable egg-info was found
         # (see #230), just resort to hard-coded checkers
         return [num_plurals, python_format]
     return checkers
--- Babel-2.14.0/babel/messages/extract.py
+++ Babel-2.14.0/babel/messages/extract.py
@@ -422,14 +422,17 @@ def extract(
         func = getattr(__import__(module, {}, {}, [attrname]), attrname)
     else:
         try:
-            from pkg_resources import working_set
+            from importlib_metadata import entry_points
         except ImportError:
-            pass
-        else:
-            for entry_point in working_set.iter_entry_points(GROUP_NAME,
-                                                             method):
-                func = entry_point.load(require=True)
-                break
+            try:
+                from importlib.metadata import entry_points
+            except ImportError:
+                entry_points = None
+        if entry_points:
+            for entry_point in entry_points(group=GROUP_NAME):
+                if entry_point.name == method:
+                    func = entry_point.load()
+                    break
         if func is None:
             # if pkg_resources is not available or no usable egg-info was found
             # (see #230), we resort to looking up the builtin extractors
