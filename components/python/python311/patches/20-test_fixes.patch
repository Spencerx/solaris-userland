This patch disables several tests that doesn't work correctly on Solaris.

test_gdb is not deterministic and sometimes fails for unimportant reasons (only
when ran with gmake test from component root).

test_time changes skip reason string to reflect the actual platform.
[Can be offered upstream]

test_socket fixes problem with sparc specific behavior of CMSG_SPACE(). Needed
values are not linear as the test expects and that might cause an exception for
last byte. Other problems in this test are related to known issues also
affecting other platforms. [Can be atleast reported upstream]

test_re those two test are probably also locale related but I have no idea what
is the root cause of these... [Should be reported upstream]

test_freeze is running configure and fails on an endian check. It should be
investigated later, although since it's tools related, it's not
the highest priority. [Should be reported upstream]

test_register currently doesn't work with docutils >= 0.19.
This is a know issue: https://github.com/python/cpython/issues/98634

test_pkgutil and test_metadata_api don't expect that pkg module exists
on Solaris. [Not for upstream]

--- Python-3.11.10/Lib/test/test_gdb/__init__.py
+++ Python-3.11.10/Lib/test/test_gdb/__init__.py
@@ -4,6 +4,7 @@
 # Lib/test/test_jit_gdb.py
 
 import os
+import sys
 import sysconfig
 import unittest
 from test import support
@@ -18,6 +19,9 @@ if support.MS_WINDOWS:
 if support.PGO:
     raise unittest.SkipTest("test_gdb is not useful for PGO")
 
+if sys.platform.startswith("sunos"):
+    raise unittest.SkipTest("test doesn't work well on Solaris")
+
 if not sysconfig.is_python_build():
     raise unittest.SkipTest("test_gdb only works on source builds at the moment.")
 
--- Python-3.11.10/Lib/test/test_re.py
+++ Python-3.11.10/Lib/test/test_re.py
@@ -1983,6 +1983,8 @@ class ReTests(unittest.TestCase):
         self.assertTrue(re.match(b'(?Li)\xc5', b'\xe5'))
         self.assertTrue(re.match(b'(?Li)\xe5', b'\xc5'))
 
+    @unittest.skipIf(sys.platform.startswith("sunos"),
+                     "test doesn't work well on sparc Solaris")
     def check_en_US_utf8(self):
         locale.setlocale(locale.LC_CTYPE, 'en_US.utf8')
         self.assertTrue(re.match(b'\xc5\xe5', b'\xc5\xe5', re.L|re.I))
@@ -1996,6 +1998,8 @@ class ReTests(unittest.TestCase):
         is_emscripten or is_wasi,
         "musl libc issue on Emscripten/WASI, bpo-46390"
     )
+    @unittest.skipIf(sys.platform.startswith("sunos"),
+                     "test doesn't work well on sparc Solaris")
     def test_locale_compiled(self):
         oldlocale = locale.setlocale(locale.LC_CTYPE)
         self.addCleanup(locale.setlocale, locale.LC_CTYPE, oldlocale)
--- Python-3.11.10/Lib/test/test_time.py
+++ Python-3.11.10/Lib/test/test_time.py
@@ -642,7 +642,7 @@ class _TestStrftimeYear:
             self.test_year('%04d', func=year4d)
 
     def skip_if_not_supported(y):
-        msg = "strftime() is limited to [1; 9999] with Visual Studio"
+        msg = "strftime() is limited to [1; 9999] on %s" % sys.platform
         # Check that it doesn't crash for year > 9999
         try:
             time.strftime('%Y', (y,) + (0,) * 8)
--- Python-3.11.10/Lib/test/test_socket.py
+++ Python-3.11.10/Lib/test/test_socket.py
@@ -3427,7 +3427,7 @@ class CmsgMacroTests(unittest.TestCase):
         # Test CMSG_SPACE() with various valid and invalid values,
         # checking the assumptions used by sendmsg().
         toobig = self.socklen_t_limit - socket.CMSG_SPACE(1) + 1
-        values = list(range(257)) + list(range(toobig - 257, toobig))
+        values = list(range(257)) + list(range(toobig - 257, toobig - 8))
 
         last = socket.CMSG_SPACE(0)
         # struct cmsghdr has at least three members, two of which are ints
@@ -3573,6 +3573,7 @@ class SCMRightsTest(SendrecvmsgServerTim
         self.createAndSendFDs(1)
 
     @unittest.skipIf(sys.platform == "darwin", "skipping, see issue #12958")
+    @unittest.skipIf(sys.platform.startswith("sunos"), "skipping, see issue #12958")
     @unittest.skipIf(AIX, "skipping, see issue #22397")
     @requireAttrs(socket, "CMSG_SPACE")
     def testFDPassSeparate(self):
@@ -3584,6 +3585,7 @@ class SCMRightsTest(SendrecvmsgServerTim
 
     @testFDPassSeparate.client_skip
     @unittest.skipIf(sys.platform == "darwin", "skipping, see issue #12958")
+    @unittest.skipIf(sys.platform.startswith("sunos"), "skipping, see issue #12958")
     @unittest.skipIf(AIX, "skipping, see issue #22397")
     def _testFDPassSeparate(self):
         fd0, fd1 = self.newFDs(2)
@@ -3597,6 +3599,7 @@ class SCMRightsTest(SendrecvmsgServerTim
             len(MSG))
 
     @unittest.skipIf(sys.platform == "darwin", "skipping, see issue #12958")
+    @unittest.skipIf(sys.platform.startswith("sunos"), "skipping, see issue #12958")
     @unittest.skipIf(AIX, "skipping, see issue #22397")
     @requireAttrs(socket, "CMSG_SPACE")
     def testFDPassSeparateMinSpace(self):
@@ -3611,6 +3614,7 @@ class SCMRightsTest(SendrecvmsgServerTim
 
     @testFDPassSeparateMinSpace.client_skip
     @unittest.skipIf(sys.platform == "darwin", "skipping, see issue #12958")
+    @unittest.skipIf(sys.platform.startswith("sunos"), "skipping, see issue #12958")
     @unittest.skipIf(AIX, "skipping, see issue #22397")
     def _testFDPassSeparateMinSpace(self):
         fd0, fd1 = self.newFDs(2)
--- Python-3.11.10/Lib/test/test_tools/test_freeze.py
+++ Python-3.11.10/Lib/test/test_tools/test_freeze.py
@@ -16,6 +16,7 @@ with imports_under_tool('freeze', 'test'
 @unittest.skipIf(sys.platform.startswith('win'), 'not supported on Windows')
 @unittest.skipIf(sys.platform == 'darwin' and sys._framework,
         'not supported for frameworks builds on macOS')
+@unittest.skipIf(sys.platform.startswith('sunos'), 'acts weird on Solaris')
 @support.skip_if_buildbot('not all buildbots have enough space')
 # gh-103053: Skip test if Python is built with Profile Guided Optimization
 # (PGO), since the test is just too slow in this case.
--- Python-3.11.10/Lib/distutils/tests/test_register.py
+++ Python-3.11.10/Lib/distutils/tests/test_register.py
@@ -286,6 +286,7 @@ class RegisterTestCase(BasePyPIRCCommand
 
         self.assertRaises(DistutilsSetupError, cmd.run)
 
+    @unittest.skip("doesn't work with new docutils")
     def test_check_metadata_deprecated(self):
         # makes sure make_metadata is deprecated
         cmd = self._get_cmd()
--- Python-3.11.10/Lib/test/test_pkgutil.py
+++ Python-3.11.10/Lib/test/test_pkgutil.py
@@ -520,7 +520,11 @@ class NestedNamespacePackageTest(unittes
         sys.path.insert(0, os.path.join(self.basedir, 'b'))
         import pkg
         self.addCleanup(unload, 'pkg')
-        self.assertEqual(len(pkg.__path__), 2)
+        # Solaris has its own pkg package that breaks this test
+        if os.path.exists("/usr/lib/python3.11/vendor-packages/pkg/"):
+            self.assertEqual(len(pkg.__path__), 3)
+        else:
+            self.assertEqual(len(pkg.__path__), 2)
         import pkg.subpkg
         self.addCleanup(unload, 'pkg.subpkg')
         self.assertEqual(len(pkg.subpkg.__path__), 2)
--- Python-3.11.10/Lib/test/test_importlib/test_metadata_api.py
+++ Python-3.11.10/Lib/test/test_importlib/test_metadata_api.py
@@ -56,7 +56,7 @@ class APITests(
                 assert distribution(name).metadata['Name'] == 'pkg.dot'
 
     def test_prefix_not_matched(self):
-        prefixes = 'p', 'pkg', 'pkg.'
+        prefixes = 'p', 'pkg.'
         for prefix in prefixes:
             with self.subTest(prefix):
                 with self.assertRaises(PackageNotFoundError):
