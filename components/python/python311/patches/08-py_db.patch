This patch adds Python debugger support.  It may be contributed upstream at
some point, but the suitability (or lack thereof) has not yet been determined.

--- Python-3.11.8/Makefile.pre.in
+++ Python-3.11.8/Makefile.pre.in
@@ -586,7 +586,7 @@ LIBEXPAT_HEADERS= \
 # Default target
 all:		@DEF_MAKE_ALL_RULE@
 build_all:	check-clean-src $(BUILDPYTHON) platform oldsharedmods sharedmods \
-		gdbhooks Programs/_testembed python-config
+		gdbhooks Programs/_testembed python-config build-py_db
 build_wasm: check-clean-src $(BUILDPYTHON) platform oldsharedmods python-config
 
 # Check that the source is clean when building out of source.
@@ -965,6 +965,18 @@ regen-re: $(BUILDPYTHON)
 	# using Tools/scripts/generate_re_casefix.py
 	$(RUNSHARED) ./$(BUILDPYTHON) $(srcdir)/Tools/scripts/generate_re_casefix.py $(srcdir)/Lib/re/_casefix.py
 
+SHLIB_FLAGS = -shared -fpic
+
+libpython$(LDVERSION)_db.so.1.0:        $(srcdir)/py_db/libpython311_db.c
+	$(CC) -o $@ $(CFLAGS) $(PY_CPPFLAGS) $(CPPFLAGS) $(SHLIB_FLAGS) $<
+
+.PHONY: build-py_db
+build-py_db:   libpython$(LDVERSION)_db.so.1.0
+
+.PHONY: install-py_db
+install-py_db: libpython$(LDVERSION)_db.so.1.0
+	$(INSTALL_SHARED) libpython$(LDVERSION)_db.so.1.0 $(DESTDIR)$(LIBDIR)
+
 Programs/_testembed: Programs/_testembed.o $(LINK_PYTHON_DEPS)
 	$(LINKCC) $(PY_CORE_LDFLAGS) $(LINKFORSHARED) -o $@ Programs/_testembed.o $(LINK_PYTHON_OBJS) $(LIBS) $(MODLIBS) $(SYSLIBS)
 
@@ -1747,7 +1759,7 @@ multissltest: all
 # prevent race conditions with PGO builds. PGO builds use recursive make,
 # which can lead to two parallel `./python setup.py build` processes that
 # step on each others toes.
-install: @FRAMEWORKINSTALLFIRST@ commoninstall bininstall maninstall @FRAMEWORKINSTALLLAST@
+install: @FRAMEWORKINSTALLFIRST@ commoninstall bininstall maninstall install-py_db @FRAMEWORKINSTALLLAST@
 	if test "x$(ENSUREPIP)" != "xno"  ; then \
 		case $(ENSUREPIP) in \
 			upgrade) ensurepip="--upgrade" ;; \
--- Python-3.11.8/py_db/libpython311_db.c
+++ Python-3.11.8/py_db/libpython311_db.c
@@ -0,0 +1,858 @@
+/*
+ * Licensed to PSF under a Contributor Agreement.
+ * Copyright (c) 2012, 2024, Oracle and/or its affiliates.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <gelf.h>
+
+#define Py_BUILD_CORE
+
+#include <Python.h>
+#include <frameobject.h>
+#include "internal/pycore_runtime.h"
+#include "internal/pycore_interp.h"
+#include "internal/pycore_frame.h"
+
+#include "libpython311_db.h"
+
+/*
+ * Decoding Python Stack Frames
+ * ============================
+ *
+ * Note that there are significant changes compared to Python 3.9.
+ *
+ * Python3 uses a variety of objects to construct its call chain.  The address
+ * space is accessible via global _PyRuntime pointer to _PyRuntimeState, which
+ * is the base object for the runtime state.  This makes it possible for the
+ * debugger to get a toehold on data structures necessary to understand the
+ * interpreter.  Since most of these structures are linked out of the
+ * _PyRuntimeState, traversals generally start here.
+ *
+ * In order to decode a frame, the debugger needs to walk from
+ * _PyRuntimeState down to a PyCodeObject.  The diagram below shows the
+ * objects that must be examined in order to reach a leaf PyCodeObject.
+ *
+ *   +-----------------+
+ *   | _PyRuntimeState |  <----- PyRuntime
+ *   +-----------------+
+ *      | interpreters.head
+ *      V
+ *  +--------------------+ next  +--------------------+ next
+ *  | PyInterpreterState | ----> | PyInterpreterState | ----> ...
+ *  +--------------------+       +--------------------+
+ *      | threads.head                           | threads.head
+ *      V                                        V
+ *  +---------------+ cframe->current_frame    +---------------+  cframe
+ *  | PyThreadState | ---> ...                 | PyThreadState | -----> ...
+ *  +---------------+                          +---------------+
+ *      | next                                     | next
+ *      V                                          V
+ *  +---------------+ cframe->current_frame       ...
+ *  | PyThreadState | -------+
+ *  +---------------+        |
+ *      | next               |
+ *      V                    V
+ *     ...    +---------------------+ previous +---------------------+ previous
+ *            | _PyInterpreterFrame | -------> | _PyInterpreterFrame | ---> ...
+ *            +---------------------+          +---------------------+
+ *                               |                                |
+ *                               | f_code                         | f_code
+ *                               V                                V
+ *                              +--------------+                 ...
+ *                              | PyCodeObject |
+ *                              +--------------+
+ *                 co_filename   |      |     | co_linetable
+ *                 +-------------+      |     +-------------+
+ *                 |                    | co_name           |
+ *                 V                    V                   V
+ * +----------------+          +----------------+         +----------------+
+ * | PyStringObject |          | PyStringObject |         | PyStringObject |
+ * +----------------+          +----------------+         +----------------+
+ *
+ * The _PyRuntimeState points to a list of one or more PyInterpreterState
+ * objects.  Each of these objects can contain one or more PyThreadState
+ * objects.  The PyInterpreterState object keeps a pointer to the head
+ * of the list of PyThreadState objects as threads.head.
+ *
+ * Each thread keeps ahold of its stack frames.  The PyThreadState object
+ * has a pointer to the topmost _PyInterpreterFrame, kept in frame.  The
+ * successive frames on the stack are kept linked in the _PyInterpreterFrame's
+ * previous pointer, with each frame pointing to its caller.
+ *
+ * In order to decode each call frame, our code needs to look at the
+ * PyCodeObject for each frame.  Essentially, this is the code that is
+ * being executed in the frame.  The _PyInterpreterFrame keeps a pointer to
+ * this code object in f_code.  In order to print meaningful debug information,
+ * it's necessary to extract the Python filename (co_filename), the
+ * function name (co_name), and the line number within the file (co_linetable).
+ * The filename and function are stored as strings, but the line number
+ * is a mapping of bytecode offsets to line numbers.  The description
+ * of the algorithm lives here:
+ *
+ * https://github.com/python/cpython/blob/3.11/Objects/locations.md
+ *
+ * In order to decode the frame, the debugger needs to walk each
+ * InterpreterState object.  For each InterpreterState, every PyThreadState
+ * must be traversed.  The PyThreadState objects point to _PyInterpreterFrames.
+ * For every thread, we must walk the frames backwards and decode the strings
+ * that are in the PyCodeObjects.
+ */
+
+struct pydb_agent {
+	struct ps_prochandle *pdb_ph;
+	int pdb_vers;
+	int pdb_is_64bit;
+	int pdb_datamodel;
+};
+
+typedef uintptr_t (*pdi_next_cb_t)(pydb_iter_t *);
+
+struct pydb_iter {
+	struct ps_prochandle *pdi_ph;
+	uintptr_t pdi_current;
+	pdi_next_cb_t pdi_nextf;
+};
+
+#define	LIBPYTHON	"libpython3.11.so"
+
+#define	MIN(x, y)	(((x) < (y)) ? (x) : (y))
+
+/* Generic interface to helper functions */
+static ssize_t pydb_strobj_readdata(pydb_agent_t *py, uintptr_t addr,
+    unsigned char *buf, size_t buf_len);
+static int pydb_getlno(pydb_agent_t *py, uintptr_t lnotab_addr, int firstline,
+    int lastinst);
+static int pydb_frameinfo(pydb_agent_t *py, uintptr_t addr, char *funcnm,
+    size_t funcnm_sz, char *filenm, size_t filenm_sz, int *lineno);
+
+/* datamodel specific implementation of helper functions */
+static ssize_t pydb_strobj_readdata_native(pydb_agent_t *py, uintptr_t addr,
+    unsigned char *buf, size_t buf_len);
+static int pydb_frameinfo_native(pydb_agent_t *py, uintptr_t addr, char *funcnm,
+    size_t funcnm_sz, char *filenm, size_t filenm_sz, int *lineno);
+
+static ssize_t pydb_strobj_readstr(pydb_agent_t *py, uintptr_t addr, char *buf,
+    size_t len);
+
+/* Iterator function next routines.  Plugable, configured by iterator init */
+static uintptr_t pydb_frame_iter_next(pydb_iter_t *iter);
+static uintptr_t pydb_interp_iter_next(pydb_iter_t *iter);
+static uintptr_t pydb_thread_iter_next(pydb_iter_t *iter);
+
+static const char *strbasename(const char *s);
+
+static const char *
+strbasename(const char *s)
+{
+	const char *p = strrchr(s, '/');
+
+	if (p == NULL)
+		return (s);
+
+	return (++p);
+}
+
+/* Agent creation / destruction routines */
+
+pydb_agent_t *
+pydb_agent_create(struct ps_prochandle *P, int vers)
+{
+	pydb_agent_t *py;
+	int datamodel;
+
+	if (vers != PYDB_VERSION) {
+		errno = ENOTSUP;
+		return (NULL);
+	}
+
+	if (ps_pdmodel(P, &datamodel) != PS_OK) {
+		return (NULL);
+	}
+
+	py = (pydb_agent_t *)malloc(sizeof (pydb_agent_t));
+	if (py == NULL) {
+		return (NULL);
+	}
+
+	py->pdb_ph = P;
+	py->pdb_vers = vers;
+	py->pdb_datamodel = datamodel;
+	py->pdb_is_64bit = 0;
+
+	return (py);
+}
+
+void
+pydb_agent_destroy(pydb_agent_t *py)
+{
+	if (py == NULL) {
+		return;
+	}
+
+	free(py);
+}
+
+/* Helper functions */
+static ssize_t
+pydb_asciiobj_readdata(pydb_agent_t *py, uintptr_t addr,
+    unsigned char *buf, size_t buf_len)
+{
+	PyASCIIObject sobj;
+	ssize_t obj_sz;
+	ssize_t read_sz;
+	psaddr_t asciiaddr;
+
+	/*
+	 * PyASCIIObjects are a type of Unicode string.  They are identified
+	 * as follows:
+	 * - sobj.state.compact == 1
+	 * - sobj.state.ascii == 1
+	 * - sobj.state.ready == 1
+	 * The length of the string is stored in sobj.length.  The string
+	 * itself follows the PyASCIIObject.
+	 */
+
+	if (ps_pread(py->pdb_ph, addr, &sobj, sizeof (PyASCIIObject))
+	    != PS_OK) {
+		return (-1);
+	}
+
+	if (!sobj.state.compact || !sobj.state.ascii || !sobj.state.ready) {
+		return (-1);
+	}
+
+	obj_sz = (ssize_t)sobj.length;
+
+	read_sz = MIN(obj_sz, (ssize_t)buf_len);
+	asciiaddr = (psaddr_t)(addr + sizeof (PyASCIIObject));
+
+	if (ps_pread(py->pdb_ph, asciiaddr, buf, (size_t)read_sz) != PS_OK) {
+		return (-1);
+	}
+
+	return (read_sz);
+}
+
+static ssize_t
+pydb_asciiobj_readstr(pydb_agent_t *py, uintptr_t addr, char *buf,
+    size_t buf_len)
+{
+	ssize_t read_sz;
+
+	read_sz = pydb_asciiobj_readdata(py, addr, (unsigned char *)buf,
+	    buf_len);
+
+	if (read_sz >= 0) {
+		if (read_sz >= buf_len) {
+			read_sz = buf_len - 1;
+		}
+
+		buf[read_sz] = '\0';
+	}
+
+	return (read_sz);
+}
+
+static ssize_t
+pydb_strobj_readdata(pydb_agent_t *py, uintptr_t addr,
+    unsigned char *buf, size_t buf_len)
+{
+	PyBytesObject sobj;
+	ssize_t obj_sz;
+	ssize_t read_sz;
+	psaddr_t straddr;
+
+	/*
+	 * PyBytesObject are variable size.  The size of the PyBytesObject
+	 * struct is fixed, and known at compile time; however, the size of the
+	 * associated buffer is variable.  The char[1] element at the end of the
+	 * structure contains the string, and the ob_size of the PyBytesObject
+	 * indicates how much extra space was allocated to contain the string
+	 * buffer at the object's tail.  Read in the fixed size portion of the
+	 * object first, and then read the contents of the data buffer into the
+	 * buffer passed by the caller.
+	 */
+
+	if (ps_pread(py->pdb_ph, addr, &sobj, sizeof (PyBytesObject))
+	    != PS_OK) {
+		return (-1);
+	}
+
+	/*
+	 * If we want to emulate PyBytes_GET_SIZE() instead of just calling
+	 * Py_SIZE() directly, we need to do a ps_pread() of Py_TYPE(&sobj).
+	 * PyBytes_Check() will try to access the type structure, but the 
+	 * address is not in the debugger's address space.
+	 */
+	obj_sz = (ssize_t)Py_SIZE(&sobj);
+
+	read_sz = MIN(obj_sz, (ssize_t)buf_len);
+	straddr = (psaddr_t)(addr + offsetof(PyBytesObject, ob_sval));
+
+	if (ps_pread(py->pdb_ph, straddr, buf, (size_t)read_sz) != PS_OK) {
+		return (-1);
+	}
+
+	return (read_sz);
+}
+
+/*
+ * Most Python PyBytesObject contain strings, as one would expect.  However,
+ * due to some sleazy hackery in parts of the Python code, some string objects
+ * are used as buffers for binary data.  In the general case,
+ * pydb_strobj_readstr() should be used to read strings out of string objects.
+ * It wraps pydb_strobj_readdata(), which should be used by callers only when
+ * trying to retrieve binary data.  (This routine does some string cleanup).
+ */
+static ssize_t
+pydb_strobj_readstr(pydb_agent_t *py, uintptr_t addr, char *buf,
+    size_t buf_len)
+{
+	ssize_t read_sz;
+
+	read_sz = pydb_strobj_readdata(py, addr, (unsigned char *)buf, buf_len);
+
+	if (read_sz >= 0) {
+		if (read_sz >= buf_len) {
+			read_sz = buf_len - 1;
+		}
+
+		buf[read_sz] = '\0';
+	}
+
+	return (read_sz);
+}
+
+/*
+ * The following line number related functions are lifted directly from the
+ * Python source code [Objects/codeobject.c] with only minor modifications.
+ */
+static int
+pydb_scan_varint(const uint8_t *ptr)
+{
+    unsigned int read = *ptr++;
+    unsigned int val = read & 63;
+    unsigned int shift = 0;
+    while (read & 64) {
+        read = *ptr++;
+        shift += 6;
+        val |= (read & 63) << shift;
+    }
+    return val;
+}
+
+static int
+pydb_scan_signed_varint(const uint8_t *ptr)
+{
+    unsigned int uval = pydb_scan_varint(ptr);
+    if (uval & 1) {
+        return -(int)(uval >> 1);
+    }
+    else {
+        return uval >> 1;
+    }
+}
+
+static int
+pydb_get_line_delta(const uint8_t *ptr)
+{
+    int code = ((*ptr) >> 3) & 15;
+    switch (code) {
+        case PY_CODE_LOCATION_INFO_NONE:
+            return 0;
+        case PY_CODE_LOCATION_INFO_NO_COLUMNS:
+        case PY_CODE_LOCATION_INFO_LONG:
+            return pydb_scan_signed_varint(ptr+1);
+        case PY_CODE_LOCATION_INFO_ONE_LINE0:
+            return 0;
+        case PY_CODE_LOCATION_INFO_ONE_LINE1:
+            return 1;
+        case PY_CODE_LOCATION_INFO_ONE_LINE2:
+            return 2;
+        default:
+            /* Same line */
+            return 0;
+    }
+}
+
+static int
+pydb_is_no_line_marker(uint8_t b)
+{
+    return (b >> 3) == 0x1f;
+}
+
+static int
+pydb_next_code_delta(PyCodeAddressRange *bounds)
+{
+    return (((*bounds->opaque.lo_next) & 7) + 1) * sizeof(_Py_CODEUNIT);
+}
+
+static int
+pydb_previous_code_delta(PyCodeAddressRange *bounds)
+{
+    if (bounds->ar_start == 0) {
+        return 1;
+    }
+    const uint8_t *ptr = bounds->opaque.lo_next-1;
+    while (((*ptr) & 128) == 0) {
+        ptr--;
+    }
+    return (((*ptr) & 7) + 1) * sizeof(_Py_CODEUNIT);
+}
+
+static void
+pydb_retreat(PyCodeAddressRange *bounds)
+{
+    do {
+        bounds->opaque.lo_next--;
+    } while (((*bounds->opaque.lo_next) & 128) == 0);
+    bounds->opaque.computed_line -= pydb_get_line_delta(bounds->opaque.lo_next);
+    bounds->ar_end = bounds->ar_start;
+    bounds->ar_start -= pydb_previous_code_delta(bounds);
+    if (pydb_is_no_line_marker(bounds->opaque.lo_next[-1])) {
+        bounds->ar_line = -1;
+    } else {
+        bounds->ar_line = bounds->opaque.computed_line;
+    }
+}
+
+static void
+pydb_advance(PyCodeAddressRange *bounds)
+{
+    bounds->opaque.computed_line += pydb_get_line_delta(bounds->opaque.lo_next);
+    if (pydb_is_no_line_marker(*bounds->opaque.lo_next)) {
+        bounds->ar_line = -1;
+    } else {
+        bounds->ar_line = bounds->opaque.computed_line;
+    }
+    bounds->ar_start = bounds->ar_end;
+    bounds->ar_end += pydb_next_code_delta(bounds);
+    do {
+        bounds->opaque.lo_next++;
+    } while (bounds->opaque.lo_next < bounds->opaque.limit &&
+        ((*bounds->opaque.lo_next) & 128) == 0);
+}
+
+/* mirrors _PyCode_InitAddressRange &
+           _PyLineTable_InitAddressRange [codeobject.c] */
+int
+pydb_pycode_initaddressrange(pydb_agent_t *py, PyCodeObject* co,
+    PyCodeAddressRange *bounds)
+{
+    char linetable[4096];
+    ssize_t linetable_len;
+
+    linetable_len = pydb_strobj_readdata(py, (uintptr_t)(co->co_linetable),
+    linetable, sizeof (linetable));
+
+    bounds->opaque.lo_next = (const uint8_t *)linetable;
+    bounds->opaque.limit = bounds->opaque.lo_next + linetable_len;
+    bounds->ar_start = -1;
+    bounds->ar_end = 0;
+    bounds->opaque.computed_line = co->co_firstlineno;
+    bounds->ar_line = -1;
+
+    return bounds->ar_line;
+}
+
+/* mirrors _PyCode_CheckLineNumber, _PyLineTable_NextAddressRange &
+           _PyLineTable_PreviousAddressRange [codeobject.c] */
+int
+pydb_pycode_getlinenumber(int lasti, PyCodeAddressRange *bounds)
+{
+    while (bounds->ar_end <= lasti) {
+        if (bounds->opaque.lo_next >= bounds->opaque.limit) {
+            return -1;
+        }
+        pydb_advance(bounds);
+    }
+    while (bounds->ar_start > lasti) {
+        if (bounds->ar_start <= 0) {
+            return -1;
+        }
+        pydb_retreat(bounds);
+    }
+    return bounds->ar_line;
+}
+
+/* mirrors: _PyInterpreterFrame_GetLine [frame.c] & */
+/*          PyCode_Addr2Line [codeobject.c] */
+static int
+pydb_pyframe_getline(pydb_agent_t *py, _PyInterpreterFrame *frame,
+    PyCodeObject *co)
+{
+    int addr = _PyInterpreterFrame_LASTI(frame) * sizeof(_Py_CODEUNIT);
+    if (addr < 0) {
+    	return co->co_firstlineno;
+    }
+    if (co->_co_linearray) {
+    	int index = addr / sizeof(_Py_CODEUNIT);
+
+    	/* mirrors: _PyCode_LineNumberFromArray [pycore_code.h] */
+	    if (co->_co_linearray_entry_size == 2) {
+	        return ((int16_t *)co->_co_linearray)[index];
+	    }
+	    return ((int32_t *)co->_co_linearray)[index];
+    }
+
+    PyCodeAddressRange bounds;
+    pydb_pycode_initaddressrange(py, co, &bounds);
+    return pydb_pycode_getlinenumber(addr, &bounds);
+}
+
+static int
+pydb_frameinfo(pydb_agent_t *py, uintptr_t addr, char *funcnm,
+    size_t funcnm_sz, char *filenm, size_t filenm_sz, int *lineno)
+{
+	_PyInterpreterFrame frame;
+	PyCodeObject co;
+	ssize_t rc;
+
+	if (ps_pread(py->pdb_ph, addr, &frame, sizeof (_PyInterpreterFrame))
+	    != PS_OK) {
+		return (-1);
+	}
+
+	if (ps_pread(py->pdb_ph, (uintptr_t)frame.f_code, &co,
+	    sizeof (PyCodeObject)) != PS_OK) {
+		return (-1);
+	}
+
+	rc = pydb_asciiobj_readstr(py, (uintptr_t)co.co_name, funcnm,
+	    funcnm_sz);
+	if (rc < 0) {
+		return (-1);
+	}
+
+	rc = pydb_asciiobj_readstr(py, (uintptr_t)co.co_filename, filenm,
+	    filenm_sz);
+	if (rc < 0) {
+		return (-1);
+	}
+
+	*lineno = pydb_pyframe_getline(py, &frame, &co);
+	if (*lineno < 0) {
+		return (-1);
+	}
+
+	return (0);
+}
+
+/* Functions that are part of the library's interface */
+
+/*
+ * Given the address of a _PyInterpreterFrame, and a buffer of a known size,
+ * fill the buffer with a description of the frame.
+ */
+int
+pydb_get_frameinfo(pydb_agent_t *py, uintptr_t frame_addr, char *fbuf,
+    size_t bufsz, int verbose)
+{
+	char funcname[1024];
+	char filename[1024];
+	char *fn;
+	int lineno;
+	int length = (py->pdb_is_64bit ? 16 : 8);
+	int rc;
+
+	rc = pydb_frameinfo(py, frame_addr, funcname, sizeof (funcname),
+	    filename, sizeof (filename), &lineno);
+	if (rc < 0) {
+		return (-1);
+	}
+
+	if (!verbose) {
+		fn = (char *)strbasename(filename);
+	} else {
+		fn = filename;
+	}
+
+	(void) snprintf(fbuf, bufsz, "%0.*lx %s:%d %s()\n", length,
+	    frame_addr, fn, lineno, funcname);
+
+	return (0);
+}
+
+/*
+ * Return a description about a _PyInterpreterFrame, if the object is
+ * actually a _PyInterpreterFrame.  In this case, the pc argument is checked
+ * to make sure that it came from a function that takes a _PyInterpreterFrame
+ * as its second (argv[1]) argument.
+ */
+int
+pydb_pc_frameinfo(pydb_agent_t *py, uintptr_t pc, uintptr_t frame_addr,
+    char *fbuf, size_t bufsz)
+{
+	char funcname[1024];
+	char filename[1024];
+	int lineno;
+	int rc;
+	ps_sym_t psym;
+
+	/*
+	 * If PC doesn't match _PyEval_EvalFrameDefault in either libpython
+	 * or the executable, don't decode it.
+	 */
+	if (ps_pglobal_sym(py->pdb_ph, LIBPYTHON, "_PyEval_EvalFrameDefault",
+	    &psym) != PS_OK) {
+		return (-1);
+	}
+
+	/* If symbol found, ensure that PC falls within _PyEval_EvalFrameDefault. */
+	if (pc < psym.st_value || pc > psym.st_value + psym.st_size) {
+		return (-1);
+	}
+
+	rc = pydb_frameinfo(py, frame_addr, funcname, sizeof (funcname),
+	    filename, sizeof (filename), &lineno);
+	if (rc < 0) {
+		return (-1);
+	}
+
+	(void) snprintf(fbuf, bufsz, "[ %s:%d (%s) ]\n", filename, lineno,
+	    funcname);
+
+	return (0);
+}
+
+/*
+ * Walks the list of PyInterpreterState objects.  If caller doesn't
+ * supply address of list, this method will look it up.
+ *
+ * mirrors: PyInterpreterState_Head() [pystate.c]
+ */
+pydb_iter_t *
+pydb_interp_iter_init(pydb_agent_t *py, uintptr_t addr)
+{
+	pydb_iter_t *itr;
+	_PyRuntimeState st;
+	uintptr_t i_addr;
+	int rc;
+
+	if (addr == 0) {
+		rc = ps_pglobal_lookup(py->pdb_ph, LIBPYTHON, "_PyRuntime",
+		    (psaddr_t *)&addr);
+		if (rc != PS_OK) {
+			return (NULL);
+		}
+
+		if (ps_pread(py->pdb_ph, (uintptr_t)addr, &st,
+		    sizeof (_PyRuntimeState)) != PS_OK) {
+			return (NULL);
+		}
+
+		i_addr = (uintptr_t)st.interpreters.head;
+
+	} else {
+		if (ps_pread(py->pdb_ph, (uintptr_t)addr, &i_addr,
+		    sizeof (uintptr_t)) != PS_OK) {
+			return (NULL);
+		}
+	}
+
+	itr = malloc(sizeof (pydb_iter_t));
+	if (itr == NULL) {
+		return (NULL);
+	}
+
+	itr->pdi_ph = py->pdb_ph;
+	itr->pdi_current = i_addr;
+	itr->pdi_nextf = pydb_interp_iter_next;
+
+	return (itr);
+}
+
+/* mirrors: PyInterpreterState_Next() [pystate.c] */
+static uintptr_t
+pydb_interp_iter_next(pydb_iter_t *iter)
+{
+	PyInterpreterState st;
+	uintptr_t cur;
+
+	cur = iter->pdi_current;
+
+	if (cur == 0) {
+		return (cur);
+	}
+
+	if (ps_pread(iter->pdi_ph, cur, &st, sizeof (PyInterpreterState))
+	    != PS_OK) {
+		iter->pdi_current = 0;
+		return (0);
+	}
+
+	iter->pdi_current = (uintptr_t)st.next;
+
+	return (cur);
+}
+
+/* mirrors: _PyFrame_IsIncomplete [pycore_frame.h] */
+static inline bool
+pydb_pyframe_isincomplete(struct ps_prochandle *pdb_ph,
+    _PyInterpreterFrame *frame)
+{
+	PyCodeObject co;
+	if (ps_pread(pdb_ph, (uintptr_t)frame->f_code, &co,
+	    sizeof (PyCodeObject)) != PS_OK) {
+		return (-1);
+	}
+	return frame->owner != FRAME_OWNED_BY_GENERATOR &&
+	frame->prev_instr < _PyCode_CODE(frame->f_code) + co._co_firsttraceable;
+}
+
+/*
+ * Walk a list of Python _PyInterpreterFrames. The addr argument must be
+ * the address of a valid PyThreadState object.
+ *
+ * partially mirrors: PyThreadState_GetFrame() [pystate.c]
+ */
+pydb_iter_t *
+pydb_frame_iter_init(pydb_agent_t *py, uintptr_t addr)
+{
+	pydb_iter_t *itr;
+	PyThreadState ts;
+	_PyCFrame cframe;
+	_PyInterpreterFrame frame;
+
+	// _PyInterpreterFrame *frame = ts->cframe->current_frame;
+	if (ps_pread(py->pdb_ph, (uintptr_t)addr, &ts,
+	    sizeof (PyThreadState)) != PS_OK) {
+		return (NULL);
+	}
+	if (ps_pread(py->pdb_ph, (uintptr_t)ts.cframe, &cframe,
+	    sizeof (_PyCFrame)) != PS_OK) {
+		return (NULL);
+	}
+
+	// while (f && _PyFrame_IsIncomplete(f)) {
+	//     f = f->previous;
+	// }
+	uintptr_t address = (uintptr_t)cframe.current_frame;
+	while (address) {
+		if (ps_pread(py->pdb_ph, address, &frame,
+		    sizeof (_PyInterpreterFrame)) != PS_OK) {
+			return (NULL);
+		}
+		if (!pydb_pyframe_isincomplete(py->pdb_ph, &frame)) {
+			break;
+		}
+		address = (uintptr_t)frame.previous;
+	}
+
+	itr = malloc(sizeof (pydb_iter_t));
+	if (itr == NULL) {
+		return (NULL);
+	}
+
+	itr->pdi_ph = py->pdb_ph;
+	itr->pdi_current = (uintptr_t)address;
+	itr->pdi_nextf = pydb_frame_iter_next;
+
+	return (itr);
+}
+
+/* partially mirrors: PyFrame_GetBack() [frameobject.c] */
+static uintptr_t
+pydb_frame_iter_next(pydb_iter_t *iter)
+{
+	uintptr_t cur;
+	_PyInterpreterFrame frame;
+
+	cur = iter->pdi_current;
+
+	if (cur == 0) {
+		return (cur);
+	}
+	if (ps_pread(iter->pdi_ph, cur, &frame,
+	    sizeof (_PyInterpreterFrame)) != PS_OK) {
+		return (0);
+	}
+	uintptr_t address = (uintptr_t)frame.previous;
+	while (address) {
+		if (ps_pread(iter->pdi_ph, address, &frame,
+		    sizeof (_PyInterpreterFrame)) != PS_OK) {
+			return (0);
+		}
+		if (!pydb_pyframe_isincomplete(iter->pdi_ph, &frame)) {
+			break;
+		}
+		uintptr_t address = (uintptr_t)frame.previous;
+	}
+
+	iter->pdi_current = (uintptr_t)address;
+
+	return (cur);
+}
+
+/*
+ * Walk a list of Python PyThreadState objects.  The addr argument must be
+ * the address of a valid PyInterpreterState object.
+ *
+ * mirrors: PyInterpreterState_ThreadHead() [pystate.c]
+ */
+pydb_iter_t *
+pydb_thread_iter_init(pydb_agent_t *py, uintptr_t addr)
+{
+	pydb_iter_t *itr;
+	PyInterpreterState is;
+
+	if (ps_pread(py->pdb_ph, (uintptr_t)addr, &is,
+	    sizeof (PyInterpreterState)) != PS_OK) {
+		return (NULL);
+	}
+
+	itr = malloc(sizeof (pydb_iter_t));
+	if (itr == NULL) {
+		return (NULL);
+	}
+
+	itr->pdi_ph = py->pdb_ph;
+	itr->pdi_current = (uintptr_t)is.threads.head;
+	itr->pdi_nextf = pydb_thread_iter_next;
+
+	return (itr);
+}
+
+/* mirrors: PyThreadState_Next() [pystate.c] */
+static uintptr_t
+pydb_thread_iter_next(pydb_iter_t *iter)
+{
+	PyThreadState ts;
+	uintptr_t cur;
+
+	cur = iter->pdi_current;
+
+	if (cur == 0) {
+		return (cur);
+	}
+
+	if (ps_pread(iter->pdi_ph, cur, &ts, sizeof (PyThreadState)) != PS_OK) {
+		iter->pdi_current = 0;
+		return (0);
+	}
+
+	iter->pdi_current = (uintptr_t)ts.next;
+
+	return (cur);
+}
+
+
+uintptr_t
+pydb_iter_next(pydb_iter_t *iter)
+{
+	return (iter->pdi_nextf(iter));
+}
+
+void
+pydb_iter_fini(pydb_iter_t *iter)
+{
+	if (iter == NULL) {
+		return;
+	}
+
+	free(iter);
+}
--- Python-3.11.8/py_db/libpython311_db.h
+++ Python-3.11.8/py_db/libpython311_db.h
@@ -0,0 +1,73 @@
+/*
+ * CDDL HEADER START
+ *
+ * The contents of this file are subject to the terms of the
+ * Common Development and Distribution License (the "License").
+ * You may not use this file except in compliance with the License.
+ *
+ * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
+ * or http://www.opensolaris.org/os/licensing.
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ *
+ * When distributing Covered Code, include this CDDL HEADER in each
+ * file and include the License file at usr/src/OPENSOLARIS.LICENSE.
+ * If applicable, add the following below this CDDL HEADER, with the
+ * fields enclosed by brackets "[]" replaced with your own identifying
+ * information: Portions Copyright [yyyy] [name of copyright owner]
+ *
+ * CDDL HEADER END
+ */
+/*
+ * Copyright (c) 2012, 2024, Oracle and/or its affiliates.
+ */
+
+#ifndef	_LIBPYTHON311_DB_H
+#define	_LIBPYTHON311_DB_H
+
+#include <proc_service.h>
+
+#ifdef	__cplusplus
+extern "C" {
+#endif
+
+/* Agent is opaque to library's consumers.  */
+typedef struct pydb_agent pydb_agent_t;
+
+/*
+ * Library's debug version is 1.  Changes to interface should increase this
+ * number.
+ */
+#define	PYDB_VERSION	1
+
+/* Agent creation/destruction routines */
+extern	pydb_agent_t	*pydb_agent_create(struct ps_prochandle *P, int vers);
+extern	void		pydb_agent_destroy(pydb_agent_t *py);
+
+/* Used by callers that know they are looking at a _PyInterpreterFrame */
+extern	int	pydb_get_frameinfo(pydb_agent_t *py, uintptr_t frame_addr,
+    char *fbuf, size_t bufsz, int verbose);
+
+/*
+ * Used by callers that don't know if they're looking at _PyInterpreterFrame.
+ * Checks PC for traceable functions.
+ */
+extern	int	pydb_pc_frameinfo(pydb_agent_t *py, uintptr_t pc,
+    uintptr_t frame_addr, char *fbuf, size_t bufsz);
+
+/* Iterator functions */
+typedef struct pydb_iter pydb_iter_t;
+
+extern	pydb_iter_t	*pydb_frame_iter_init(pydb_agent_t *py, uintptr_t addr);
+extern	pydb_iter_t	*pydb_interp_iter_init(pydb_agent_t *py,
+    uintptr_t addr);
+extern	pydb_iter_t	*pydb_thread_iter_init(pydb_agent_t *py,
+    uintptr_t addr);
+extern	void		pydb_iter_fini(pydb_iter_t *iter);
+extern	uintptr_t	pydb_iter_next(pydb_iter_t *iter);
+
+#ifdef	__cplusplus
+}
+#endif
+
+#endif	/* _LIBPYTHON311_DB_H */
--- Python-3.11.8/py_db/mapfile-vers
+++ Python-3.11.8/py_db/mapfile-vers
@@ -0,0 +1,39 @@
+#
+# CDDL HEADER START
+#
+# The contents of this file are subject to the terms of the
+# Common Development and Distribution License (the "License").
+# You may not use this file except in compliance with the License.
+#
+# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
+# or http://www.opensolaris.org/os/licensing.
+# See the License for the specific language governing permissions
+# and limitations under the License.
+#
+# When distributing Covered Code, include this CDDL HEADER in each
+# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
+# If applicable, add the following below this CDDL HEADER, with the
+# fields enclosed by brackets "[]" replaced with your own identifying
+# information: Portions Copyright [yyyy] [name of copyright owner]
+#
+# CDDL HEADER END
+#
+
+#
+# Copyright (c) 2012, 2024, Oracle and/or its affiliates.
+#
+
+SUNWprivate_1.1 {
+    global:
+	pydb_agent_create;
+	pydb_agent_destroy;
+	pydb_frame_iter_init;
+	pydb_get_frameinfo;
+	pydb_pc_frameinfo;
+	pydb_interp_iter_init;
+	pydb_thread_iter_init;
+	pydb_iter_fini;
+	pydb_iter_next;
+    local:
+	*;
+};
