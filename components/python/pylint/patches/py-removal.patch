Backported from upstream:
https://github.com/pylint-dev/pylint/commit/7ebaad8b1790cf659fcb4017a57dd8686266a24a

From 7ebaad8b1790cf659fcb4017a57dd8686266a24a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lum=C3=ADr=20=27Frenzy=27=20Balhar?=
 <frenzy.madness@gmail.com>
Date: Wed, 23 Nov 2022 13:45:57 +0100
Subject: [PATCH] Drop dependency on py module (#7829)

* pytest 7.2 no longer depends on py so it's better to drop it.

`tmp_path` fixture is newer and uses `pathlib.Path` from stdlib
instead of `LocalPath` from `py._path`.

Co-authored-by: Pierre Sassoulas <pierre.sassoulas@gmail.com>
Co-authored-by: Andreas Finkler <3929834+DudeNr33@users.noreply.github.com>

--- pylint-2.15.2/tests/config/test_per_directory_config.py
+++ pylint-2.15.2/tests/config/test_per_directory_config.py
@@ -2,17 +2,16 @@
 # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
 # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt
 
-
-from py._path.local import LocalPath  # type: ignore[import]
+from pathlib import Path
 
 from pylint.lint import Run
 
 
-def test_fall_back_on_base_config(tmpdir: LocalPath) -> None:
+def test_fall_back_on_base_config(tmp_path: Path) -> None:
     """Test that we correctly fall back on the base config."""
     # A file under the current dir should fall back to the highest level
     # For pylint this is ./pylintrc
-    test_file = tmpdir / "test.py"
+    test_file = tmp_path / "test.py"
     runner = Run([__name__], exit=False)
     assert id(runner.linter.config) == id(runner.linter._base_config)
 
--- pylint-2.15.2/tests/lint/test_pylinter.py
+++ pylint-2.15.2/tests/lint/test_pylinter.py
@@ -2,12 +2,13 @@
 # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
 # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt
 
+import os
+from pathlib import Path
 from typing import Any, NoReturn
 from unittest import mock
 from unittest.mock import patch
 
 import pytest
-from py._path.local import LocalPath  # type: ignore[import]
 from pytest import CaptureFixture
 
 from pylint.lint.pylinter import PyLinter
@@ -20,16 +21,16 @@ def raise_exception(*args: Any, **kwargs
 
 @patch.object(FileState, "iter_spurious_suppression_messages", raise_exception)
 def test_crash_in_file(
-    linter: PyLinter, capsys: CaptureFixture, tmpdir: LocalPath
+    linter: PyLinter, capsys: CaptureFixture, tmp_path: Path
 ) -> None:
     with pytest.warns(DeprecationWarning):
         args = linter.load_command_line_configuration([__file__])
-    linter.crash_file_path = str(tmpdir / "pylint-crash-%Y")
+    linter.crash_file_path = str(tmp_path / "pylint-crash-%Y")
     linter.check(args)
     out, err = capsys.readouterr()
     assert not out
     assert not err
-    files = tmpdir.listdir()
+    files = os.listdir(tmp_path)
     assert len(files) == 1
     assert "pylint-crash-20" in str(files[0])
     assert any(m.symbol == "fatal" for m in linter.reporter.messages)
@@ -42,17 +43,17 @@ def test_check_deprecation(linter: PyLin
 
 
 def test_crash_during_linting(
-    linter: PyLinter, capsys: CaptureFixture[str], tmpdir: LocalPath
+    linter: PyLinter, capsys: CaptureFixture[str], tmp_path: Path
 ) -> None:
     with mock.patch(
         "pylint.lint.PyLinter.check_astroid_module", side_effect=RuntimeError
     ):
-        linter.crash_file_path = str(tmpdir / "pylint-crash-%Y")
+        linter.crash_file_path = str(tmp_path / "pylint-crash-%Y")
         linter.check([__file__])
         out, err = capsys.readouterr()
         assert not out
         assert not err
-        files = tmpdir.listdir()
+        files = os.listdir(tmp_path)
         assert len(files) == 1
         assert "pylint-crash-20" in str(files[0])
         assert any(m.symbol == "astroid-error" for m in linter.reporter.messages)
--- pylint-2.15.2/tests/pyreverse/test_pyreverse_functional.py
+++ pylint-2.15.2/tests/pyreverse/test_pyreverse_functional.py
@@ -5,7 +5,6 @@
 from pathlib import Path
 
 import pytest
-from py._path.local import LocalPath  # type: ignore[import]
 
 from pylint.pyreverse.main import Run
 from pylint.testutils.pyreverse import (
@@ -23,17 +22,15 @@ CLASS_DIAGRAM_TEST_IDS = [testfile.sourc
     CLASS_DIAGRAM_TESTS,
     ids=CLASS_DIAGRAM_TEST_IDS,
 )
-def test_class_diagrams(
-    testfile: FunctionalPyreverseTestfile, tmpdir: LocalPath
-) -> None:
+def test_class_diagrams(testfile: FunctionalPyreverseTestfile, tmp_path: Path) -> None:
     input_file = testfile.source
     for output_format in testfile.options["output_formats"]:
         with pytest.raises(SystemExit) as sys_exit:
-            args = ["-o", f"{output_format}", "-d", str(tmpdir)]
+            args = ["-o", f"{output_format}", "-d", str(tmp_path)]
             args.extend(testfile.options["command_line_args"])
             args += [str(input_file)]
             Run(args)
         assert sys_exit.value.code == 0
         assert testfile.source.with_suffix(f".{output_format}").read_text(
             encoding="utf8"
-        ) == Path(tmpdir / f"classes.{output_format}").read_text(encoding="utf8")
+        ) == (tmp_path / f"classes.{output_format}").read_text(encoding="utf8")
--- pylint-2.15.2/tests/test_pylint_runners.py
+++ pylint-2.15.2/tests/test_pylint_runners.py
@@ -14,20 +14,20 @@ from typing import Any
 from unittest.mock import MagicMock, mock_open, patch
 
 import pytest
-from py._path.local import LocalPath  # type: ignore[import]
 
 from pylint import run_epylint, run_pylint, run_pyreverse, run_symilar
 from pylint.lint import Run
 from pylint.testutils import GenericTestReporter as Reporter
+from pylint.testutils.utils import _test_cwd
 
 
 @pytest.mark.parametrize(
     "runner", [run_epylint, run_pylint, run_pyreverse, run_symilar]
 )
-def test_runner(runner: Callable, tmpdir: LocalPath) -> None:
+def test_runner(runner: Callable, tmp_path: pathlib.Path) -> None:
     filepath = os.path.abspath(__file__)
     testargs = ["", filepath]
-    with tmpdir.as_cwd():
+    with _test_cwd(tmp_path):
         with patch.object(sys, "argv", testargs):
             with pytest.raises(SystemExit) as err:
                 runner()
@@ -37,18 +37,18 @@ def test_runner(runner: Callable, tmpdir
 @pytest.mark.parametrize(
     "runner", [run_epylint, run_pylint, run_pyreverse, run_symilar]
 )
-def test_runner_with_arguments(runner: Callable, tmpdir: LocalPath) -> None:
+def test_runner_with_arguments(runner: Callable, tmp_path: pathlib.Path) -> None:
     """Check the runners with arguments as parameter instead of sys.argv."""
     filepath = os.path.abspath(__file__)
     testargs = [filepath]
-    with tmpdir.as_cwd():
+    with _test_cwd(tmp_path):
         with pytest.raises(SystemExit) as err:
             runner(testargs)
         assert err.value.code == 0
 
 
 def test_pylint_run_jobs_equal_zero_dont_crash_with_cpu_fraction(
-    tmpdir: LocalPath,
+    tmp_path: pathlib.Path,
 ) -> None:
     """Check that the pylint runner does not crash if `pylint.lint.run._query_cpu`
     determines only a fraction of a CPU core to be available.
@@ -71,7 +71,7 @@ def test_pylint_run_jobs_equal_zero_dont
 
     filepath = os.path.abspath(__file__)
     testargs = [filepath, "--jobs=0"]
-    with tmpdir.as_cwd():
+    with _test_cwd(tmp_path):
         with pytest.raises(SystemExit) as err:
             with patch("builtins.open", _mock_open):
                 with patch("pylint.lint.run.Path", _mock_path):
--- pylint-2.15.2/tests/test_self.py
+++ pylint-2.15.2/tests/test_self.py
@@ -27,7 +27,6 @@ from unittest import mock
 from unittest.mock import patch
 
 import pytest
-from py._path.local import LocalPath  # type: ignore[import]
 
 from pylint import extensions, modify_sys_path
 from pylint.constants import MAIN_CHECKER_NAME, MSG_TYPES_STATUS
@@ -157,7 +156,7 @@ class TestRunTC:
         assert expected_output.strip() in actual_output.strip()
 
     def _test_output_file(
-        self, args: list[str], filename: LocalPath, expected_output: str
+        self, args: list[str], filename: Path, expected_output: str
     ) -> None:
         """Run Pylint with the ``output`` option set (must be included in
         the ``args`` passed to this method!) and check the file content afterwards.
@@ -517,8 +516,8 @@ class TestRunTC:
         self._runtest(["--from-stdin"], code=32)
 
     @pytest.mark.parametrize("write_bpy_to_disk", [False, True])
-    def test_relative_imports(self, write_bpy_to_disk, tmpdir):
-        a = tmpdir.join("a")
+    def test_relative_imports(self, write_bpy_to_disk, tmp_path: Path):
+        a = tmp_path / "a"
 
         b_code = textwrap.dedent(
             """
@@ -538,12 +537,12 @@ class TestRunTC:
         )
 
         a.mkdir()
-        a.join("__init__.py").write("")
+        (a / "__init__.py").write_text("")
         if write_bpy_to_disk:
-            a.join("b.py").write(b_code)
-        a.join("c.py").write(c_code)
+            (a / "b.py").write_text(b_code)
+        (a / "c.py").write_text(c_code)
 
-        with tmpdir.as_cwd():
+        with _test_cwd(tmp_path):
             # why don't we start pylint in a sub-process?
             expected = (
                 "************* Module a.b\n"
@@ -842,34 +841,34 @@ a.py:1:4: E0001: Parsing failed: 'invali
         ],
     )
     def test_do_not_import_files_from_local_directory(
-        self, tmpdir: LocalPath, args: list[str]
+        self, tmp_path: Path, args: list[str]
     ) -> None:
         for path in ("astroid.py", "hmac.py"):
-            file_path = tmpdir / path
-            file_path.write("'Docstring'\nimport completely_unknown\n")
+            file_path = tmp_path / path
+            file_path.write_text("'Docstring'\nimport completely_unknown\n")
             pylint_call = [sys.executable, "-m", "pylint"] + args + [path]
-            with tmpdir.as_cwd():
-                subprocess.check_output(pylint_call, cwd=str(tmpdir))
+            with _test_cwd(tmp_path):
+                subprocess.check_output(pylint_call, cwd=str(tmp_path))
             new_python_path = os.environ.get("PYTHONPATH", "").strip(":")
-            with tmpdir.as_cwd(), _test_environ_pythonpath(f"{new_python_path}:"):
+            with _test_cwd(tmp_path), _test_environ_pythonpath(f"{new_python_path}:"):
                 # Appending a colon to PYTHONPATH should not break path stripping
                 # https://github.com/PyCQA/pylint/issues/3636
-                subprocess.check_output(pylint_call, cwd=str(tmpdir))
+                subprocess.check_output(pylint_call, cwd=str(tmp_path))
 
     @staticmethod
     def test_import_plugin_from_local_directory_if_pythonpath_cwd(
-        tmpdir: LocalPath,
+        tmp_path: Path,
     ) -> None:
-        p_plugin = tmpdir / "plugin.py"
-        p_plugin.write("# Some plugin content")
+        p_plugin = tmp_path / "plugin.py"
+        p_plugin.write_text("# Some plugin content")
         if sys.platform == "win32":
             python_path = "."
         else:
             python_path = f"{os.environ.get('PYTHONPATH', '').strip(':')}:."
-        with tmpdir.as_cwd(), _test_environ_pythonpath(python_path):
+        with _test_cwd(tmp_path), _test_environ_pythonpath(python_path):
             args = [sys.executable, "-m", "pylint", "--load-plugins", "plugin"]
             process = subprocess.run(
-                args, cwd=str(tmpdir), stderr=subprocess.PIPE, check=False
+                args, cwd=str(tmp_path), stderr=subprocess.PIPE, check=False
             )
             assert (
                 "AttributeError: module 'plugin' has no attribute 'register'"
@@ -877,18 +876,18 @@ a.py:1:4: E0001: Parsing failed: 'invali
             )
 
     def test_allow_import_of_files_found_in_modules_during_parallel_check(
-        self, tmpdir: LocalPath
+        self, tmp_path: Path
     ) -> None:
-        test_directory = tmpdir / "test_directory"
+        test_directory = tmp_path / "test_directory"
         test_directory.mkdir()
         spam_module = test_directory / "spam.py"
-        spam_module.write("'Empty'")
+        spam_module.write_text("'Empty'")
 
         init_module = test_directory / "__init__.py"
-        init_module.write("'Empty'")
+        init_module.write_text("'Empty'")
 
         # For multiple jobs we could not find the `spam.py` file.
-        with tmpdir.as_cwd():
+        with _test_cwd(tmp_path):
             args = [
                 "-j2",
                 "--disable=missing-docstring, missing-final-newline",
@@ -897,7 +896,7 @@ a.py:1:4: E0001: Parsing failed: 'invali
             self._runtest(args, code=0)
 
         # A single job should be fine as well
-        with tmpdir.as_cwd():
+        with _test_cwd(tmp_path):
             args = [
                 "-j1",
                 "--disable=missing-docstring, missing-final-newline",
@@ -906,11 +905,11 @@ a.py:1:4: E0001: Parsing failed: 'invali
             self._runtest(args, code=0)
 
     @staticmethod
-    def test_can_list_directories_without_dunder_init(tmpdir: LocalPath) -> None:
-        test_directory = tmpdir / "test_directory"
+    def test_can_list_directories_without_dunder_init(tmp_path: Path) -> None:
+        test_directory = tmp_path / "test_directory"
         test_directory.mkdir()
         spam_module = test_directory / "spam.py"
-        spam_module.write("'Empty'")
+        spam_module.write_text("'Empty'")
 
         subprocess.check_output(
             [
@@ -920,7 +919,7 @@ a.py:1:4: E0001: Parsing failed: 'invali
                 "--disable=missing-docstring, missing-final-newline",
                 "test_directory",
             ],
-            cwd=str(tmpdir),
+            cwd=str(tmp_path),
             stderr=subprocess.PIPE,
         )
 
@@ -938,9 +937,9 @@ a.py:1:4: E0001: Parsing failed: 'invali
         )
         self._test_output([path, "-j2"], expected_output="")
 
-    def test_output_file_valid_path(self, tmpdir: LocalPath) -> None:
+    def test_output_file_valid_path(self, tmp_path: Path) -> None:
         path = join(HERE, "regrtest_data", "unused_variable.py")
-        output_file = tmpdir / "output.txt"
+        output_file = tmp_path / "output.txt"
         expected = "Your code has been rated at 7.50/10"
         self._test_output_file(
             [path, f"--output={output_file}"],
@@ -1020,10 +1019,10 @@ a.py:1:4: E0001: Parsing failed: 'invali
         ],
     )
     def test_output_file_can_be_combined_with_output_format_option(
-        self, tmpdir, output_format, expected_output
+        self, tmp_path, output_format, expected_output
     ):
         path = join(HERE, "regrtest_data", "unused_variable.py")
-        output_file = tmpdir / "output.txt"
+        output_file = tmp_path / "output.txt"
         self._test_output_file(
             [path, f"--output={output_file}", f"--output-format={output_format}"],
             output_file,
@@ -1031,10 +1030,10 @@ a.py:1:4: E0001: Parsing failed: 'invali
         )
 
     def test_output_file_can_be_combined_with_custom_reporter(
-        self, tmpdir: LocalPath
+        self, tmp_path: Path
     ) -> None:
         path = join(HERE, "regrtest_data", "unused_variable.py")
-        output_file = tmpdir / "output.txt"
+        output_file = tmp_path / "output.txt"
         # It does not really have to be a truly custom reporter.
         # It is only important that it is being passed explicitly to ``Run``.
         myreporter = TextReporter()
@@ -1045,9 +1044,9 @@ a.py:1:4: E0001: Parsing failed: 'invali
         )
         assert output_file.exists()
 
-    def test_output_file_specified_in_rcfile(self, tmpdir: LocalPath) -> None:
-        output_file = tmpdir / "output.txt"
-        rcfile = tmpdir / "pylintrc"
+    def test_output_file_specified_in_rcfile(self, tmp_path: Path) -> None:
+        output_file = tmp_path / "output.txt"
+        rcfile = tmp_path / "pylintrc"
         rcfile_contents = textwrap.dedent(
             f"""
         [MAIN]
