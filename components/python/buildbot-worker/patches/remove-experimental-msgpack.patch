Buildbot recently introduced new and experimental msgpack protocol that needs
several new dependencies.

Bringing autobahn in would mean an introduction of several new components,
and since the msgpack protocol is experimental and not necessary for our
needs, its support is patched out.

Not suitable for upstream.

--- buildbot_worker-4.2.1/buildbot_worker.egg-info/requires.txt
+++ buildbot_worker-4.2.1/buildbot_worker.egg-info/requires.txt
@@ -1,6 +1,4 @@
 twisted>=21.2.0
-autobahn>=0.16.0
-msgpack>=0.6.0

 [test]
 psutil
--- buildbot_worker-4.2.1/setup.py
+++ buildbot_worker-4.2.1/setup.py
@@ -139,11 +139,6 @@ setup_args['install_requires'] = [
     'twisted ' + twisted_ver,
 ]
 
-setup_args['install_requires'] += [
-    'autobahn >= 0.16.0',
-    'msgpack >= 0.6.0',
-]
-
 # buildbot_worker_windows_service needs pywin32
 if sys.platform == "win32":
     setup_args['install_requires'].append('pywin32')
--- buildbot_worker-4.2.1/buildbot_worker/pb.py
+++ buildbot_worker-4.2.1/buildbot_worker/pb.py
@@ -38,9 +38,6 @@ from buildbot_worker.base import WorkerB
 from buildbot_worker.base import WorkerForBuilderBase
 from buildbot_worker.compat import bytes2unicode
 from buildbot_worker.compat import unicode2bytes
-from buildbot_worker.msgpack import BuildbotWebSocketClientFactory
-from buildbot_worker.msgpack import BuildbotWebSocketClientProtocol
-from buildbot_worker.msgpack import ProtocolCommandMsgpack
 from buildbot_worker.pbutil import AutoLoginPBFactory
 from buildbot_worker.pbutil import decode
 from buildbot_worker.tunnel import HTTPTunnelEndpoint
@@ -428,95 +425,6 @@ class BotPb(BotPbLike, pb.Referenceable)
     WorkerForBuilder = WorkerForBuilderPb
 
 
-class BotMsgpack(BotBase):
-    def __init__(self, basedir, unicode_encoding=None, delete_leftover_dirs=False):
-        BotBase.__init__(
-            self,
-            basedir,
-            unicode_encoding=unicode_encoding,
-            delete_leftover_dirs=delete_leftover_dirs,
-        )
-        self.protocol_commands = {}
-
-    @defer.inlineCallbacks
-    def startService(self):
-        yield BotBase.startService(self)
-
-    @defer.inlineCallbacks
-    def stopService(self):
-        yield BotBase.stopService(self)
-
-        # Make any currently-running command die, with no further status
-        # output. This is used when the worker is shutting down or the
-        # connection to the master has been lost.
-        for protocol_command in self.protocol_commands:
-            protocol_command.builder_is_running = False
-            log.msg(f"stopCommand: halting current command {protocol_command.command}")
-            protocol_command.command.doInterrupt()
-        self.protocol_commands = {}
-
-    def calculate_basedir(self, builddir):
-        return os.path.join(bytes2unicode(self.basedir), bytes2unicode(builddir))
-
-    def create_dirs(self, basedir):
-        if not os.path.isdir(basedir):
-            os.makedirs(basedir)
-
-    def start_command(self, protocol, command_id, command, args):
-        """
-        This gets invoked by L{buildbot.process.step.RemoteCommand.start}, as
-        part of various master-side BuildSteps, to start various commands
-        that actually do the build. I return nothing. Eventually I will call
-        .commandComplete() to notify the master-side RemoteCommand that I'm
-        done.
-        """
-        command = decode(command)
-        args = decode(args)
-
-        def on_command_complete():
-            del self.protocol_commands[command_id]
-
-        protocol_command = ProtocolCommandMsgpack(
-            self.unicode_encoding,
-            self.basedir,
-            self.buffer_size,
-            self.buffer_timeout,
-            self.max_line_length,
-            self.newline_re,
-            self.running,
-            on_command_complete,
-            protocol,
-            command_id,
-            command,
-            args,
-        )
-
-        self.protocol_commands[command_id] = protocol_command
-
-        log.msg(f" startCommand:{command} [id {command_id}]")
-        protocol_command.protocol_notify_on_disconnect()
-        d = protocol_command.command.doStart()
-        d.addCallback(lambda res: None)
-        d.addBoth(protocol_command.command_complete)
-        return None
-
-    def interrupt_command(self, command_id, why):
-        """Halt the current step."""
-        log.msg(f"asked to interrupt current command: {why}")
-
-        if command_id not in self.protocol_commands:
-            # TODO: just log it, a race could result in their interrupting a
-            # command that wasn't actually running
-            log.msg(" .. but none was running")
-            return
-        d = self.protocol_commands[command_id].flush_command_output()
-        d.addErrback(
-            self.protocol_commands[command_id]._ack_failed,
-            "ProtocolCommandMsgpack.flush_command_output",
-        )
-        self.protocol_commands[command_id].command.doInterrupt()
-
-
 class BotFactory(AutoLoginPBFactory):
     """The protocol factory for the worker.
 
@@ -668,8 +576,6 @@ class Worker(WorkerBase):
 
         if protocol == 'pb':
             bot_class = BotPb
-        elif protocol == 'msgpack_experimental_v7':
-            bot_class = BotMsgpack
         else:
             raise ValueError(f'Unknown protocol {protocol}')
 
@@ -710,22 +616,6 @@ class Worker(WorkerBase):
                 buildmaster_host, port, keepalive, maxdelay, retryPolicy=policy
             )
             bf.startLogin(credentials.UsernamePassword(name, passwd), client=self.bot)
-        elif protocol == 'msgpack_experimental_v7':
-            if connection_string is None:
-                ws_conn_string = f"ws://{buildmaster_host}:{port}"
-            else:
-                ws_conn_string = util.twisted_connection_string_to_ws_url(connection_string)
-
-            if path is not None:
-                if not path.startswith('/'):
-                    ws_conn_string += '/'
-                ws_conn_string += path
-
-            bf = self.bf = BuildbotWebSocketClientFactory(ws_conn_string)
-            bf.protocol = BuildbotWebSocketClientProtocol
-            self.bf.buildbot_bot = self.bot
-            self.bf.name = name
-            self.bf.password = passwd
         else:
             raise ValueError(f'Unknown protocol {protocol}')
 
