--- ply-3.8/test/testlex.py
+++ ply-3.8/test/testlex.py
@@ -91,6 +91,9 @@ class LexErrorWarningTests(unittest.Test
         if sys.hexversion >= 0x3020000:
             warnings.filterwarnings('ignore',category=ResourceWarning)
 
+    def assert_(self, *args, **kwargs):
+        self.assertTrue(*args, **kwargs)
+
     def tearDown(self):
         sys.stderr = sys.__stderr__
         sys.stdout = sys.__stdout__
@@ -191,7 +194,7 @@ class LexErrorWarningTests(unittest.Test
                    "Make sure '#' in rule 't_POUND' is escaped with '\\#'\n")
         else:
             msg = ("Invalid regular expression for rule 't_POUND'. missing ), unterminated subpattern at position 0\n"
-                   "ERROR: Make sure '#' in rule 't_POUND' is escaped with '\#'")
+                   "ERROR: Make sure '#' in rule 't_POUND' is escaped with '\\#'")
         self.assert_(check_expected(result,
                                     msg,
                                     contains=True), result)
@@ -337,6 +340,9 @@ class LexBuildOptionTests(unittest.TestC
         except OSError:
             pass
 
+    def assert_(self, *args, **kwargs):
+        self.assertTrue(*args, **kwargs)
+
     def test_lex_module(self):
         run_import("lex_module")
         result = sys.stdout.getvalue()
@@ -634,6 +640,9 @@ class LexRunTests(unittest.TestCase):
         sys.stderr = sys.__stderr__
         sys.stdout = sys.__stdout__
 
+    def assert_(self, *args, **kwargs):
+        self.assertTrue(*args, **kwargs)
+
     def test_lex_hedit(self):
         run_import("lex_hedit")
         result = sys.stdout.getvalue()
--- ply-3.8/test/testyacc.py
+++ ply-3.8/test/testyacc.py
@@ -91,6 +91,9 @@ class YaccErrorWarningTests(unittest.Tes
             warnings.filterwarnings('ignore', category=ResourceWarning)
         warnings.filterwarnings('ignore', category=DeprecationWarning)
 
+    def assert_(self, *args, **kwargs):
+        self.assertTrue(*args, **kwargs)
+
     def tearDown(self):
         sys.stderr = sys.__stderr__
         sys.stdout = sys.__stdout__
