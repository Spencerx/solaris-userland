Snowballstemmer is not available on Solaris and considering that its
functionality is fairly insubstantial and not necessary to us, it
is patched out.

Not intended for upstream.

--- sphinx-8.2.0/PKG-INFO
+++ sphinx-8.2.0/PKG-INFO
@@ -53,7 +53,6 @@
 Requires-Dist: Jinja2>=3.1
 Requires-Dist: Pygments>=2.17
 Requires-Dist: docutils>=0.20,<0.22
-Requires-Dist: snowballstemmer>=2.2
 Requires-Dist: babel>=2.13
 Requires-Dist: alabaster>=0.7.14
 Requires-Dist: requests>=2.30.0
--- sphinx-8.2.0/pyproject.toml
+++ sphinx-8.2.0/pyproject.toml
@@ -68,7 +68,6 @@
     "Jinja2>=3.1",
     "Pygments>=2.17",
     "docutils>=0.20,<0.22",
-    "snowballstemmer>=2.2",
     "babel>=2.13",
     "alabaster>=0.7.14",
     "requests>=2.30.0",
--- sphinx-8.2.0/sphinx/search/da.py
+++ sphinx-8.2.0/sphinx/search/da.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -112,7 +115,14 @@ class SearchDanish(SearchLanguage):
     stopwords = danish_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('danish')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('danish')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/de.py
+++ sphinx-8.2.0/sphinx/search/de.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -295,7 +298,14 @@ class SearchGerman(SearchLanguage):
     stopwords = german_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('german')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('german')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/en.py
+++ sphinx-8.2.0/sphinx/search/en.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage
 
@@ -212,7 +215,14 @@ class SearchEnglish(SearchLanguage):
     stopwords = english_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('porter')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('porter')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/es.py
+++ sphinx-8.2.0/sphinx/search/es.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -355,7 +358,14 @@ class SearchSpanish(SearchLanguage):
     stopwords = spanish_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('spanish')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('spanish')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/fi.py
+++ sphinx-8.2.0/sphinx/search/fi.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -105,7 +108,14 @@ class SearchFinnish(SearchLanguage):
     stopwords = finnish_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('finnish')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('finnish')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/fr.py
+++ sphinx-8.2.0/sphinx/search/fr.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -191,7 +194,14 @@ class SearchFrench(SearchLanguage):
     stopwords = french_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('french')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('french')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/hu.py
+++ sphinx-8.2.0/sphinx/search/hu.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -218,7 +221,14 @@ class SearchHungarian(SearchLanguage):
     stopwords = hungarian_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('hungarian')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('hungarian')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/it.py
+++ sphinx-8.2.0/sphinx/search/it.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -308,7 +311,14 @@ class SearchItalian(SearchLanguage):
     stopwords = italian_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('italian')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('italian')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/nl.py
+++ sphinx-8.2.0/sphinx/search/nl.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -119,7 +122,14 @@ class SearchDutch(SearchLanguage):
     stopwords = dutch_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('dutch')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('dutch')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/no.py
+++ sphinx-8.2.0/sphinx/search/no.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -194,7 +197,14 @@ class SearchNorwegian(SearchLanguage):
     stopwords = norwegian_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('norwegian')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('norwegian')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/pt.py
+++ sphinx-8.2.0/sphinx/search/pt.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -253,7 +256,14 @@ class SearchPortuguese(SearchLanguage):
     stopwords = portuguese_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('portuguese')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('portuguese')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/ro.py
+++ sphinx-8.2.0/sphinx/search/ro.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage
 
@@ -14,7 +17,14 @@ class SearchRomanian(SearchLanguage):
     stopwords: set[str] = set()
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('romanian')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('romanian')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/ru.py
+++ sphinx-8.2.0/sphinx/search/ru.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -243,7 +246,14 @@ class SearchRussian(SearchLanguage):
     stopwords = russian_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('russian')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('russian')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/sv.py
+++ sphinx-8.2.0/sphinx/search/sv.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage, parse_stop_word
 
@@ -132,7 +135,14 @@ class SearchSwedish(SearchLanguage):
     stopwords = swedish_stopwords
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('swedish')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('swedish')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/tr.py
+++ sphinx-8.2.0/sphinx/search/tr.py
@@ -2,7 +2,10 @@
 
 from __future__ import annotations
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage
 
@@ -14,7 +17,14 @@ class SearchTurkish(SearchLanguage):
     stopwords: set[str] = set()
 
     def init(self, options: dict[str, str]) -> None:
-        self.stemmer = snowballstemmer.stemmer('turkish')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('turkish')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def stem(self, word: str) -> str:
+        if self.stemmer is None:
+            return word.lower()
         return self.stemmer.stemWord(word.lower())
--- sphinx-8.2.0/sphinx/search/zh.py
+++ sphinx-8.2.0/sphinx/search/zh.py
@@ -5,7 +5,10 @@ from __future__ import annotations
 import re
 from pathlib import Path
 
-import snowballstemmer
+try:
+    import snowballstemmer
+except ImportError:
+    snowballstemmer = None
 
 from sphinx.search import SearchLanguage
 
@@ -236,7 +239,12 @@ class SearchChinese(SearchLanguage):
             if dict_path and Path(dict_path).is_file():
                 jieba.load_userdict(dict_path)
 
-        self.stemmer = snowballstemmer.stemmer('english')
+        if snowballstemmer is not None:
+            self.stemmer = snowballstemmer.stemmer('english')
+        else:
+            import warnings
+            warnings.warn("snowballstemmer is not installed and stemming is thus very limited.")
+            self.stemmer = None
 
     def split(self, input: str) -> list[str]:
         if JIEBA:
@@ -255,6 +263,8 @@ class SearchChinese(SearchLanguage):
         # Don't stem Latin words that are long enough to be relevant for search
         # if not stemmed, but would be too short after being stemmed
         # avoids some issues with acronyms
+        if self.stemmer is None:
+            return word.lower()
         stemmed = self.stemmer.stemWord(word.lower())
         should_not_be_stemmed = (
             len(word) >= 3 > len(stemmed) and word in self.latin_terms
--- sphinx-8.2.0/tests/test_search.py
+++ sphinx-8.2.0/tests/test_search.py
@@ -29,6 +29,9 @@ JAVASCRIPT_TEST_ROOTS = [
     if (directory / 'conf.py').exists()
 ]
 
+import pytest
+pytestmark = pytest.mark.skip("snowballstemmer is not available on Solaris")
+
 
 class DummyDomainsContainer:
     def __init__(self, **domains: DummyDomain) -> None:
