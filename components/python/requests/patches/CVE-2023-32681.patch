Fixes CVE-2023-32681.
Desc:
  Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers
  to destination servers when redirected to an HTTPS endpoint. This is a product
  of how we use `rebuild_proxies` to reattach the `Proxy-Authorization` header
  to requests. For HTTP connections sent through the tunnel, the proxy will
  identify the header in the request itself and remove it prior to forwarding
  to the destination server. However when sent over HTTPS, the
  `Proxy-Authorization` header must be sent in the CONNECT request as the proxy
  has no visibility into the tunneled request. This results in Requests
  forwarding proxy credentials to the destination server unintentionally,
  allowing a malicious actor to potentially exfiltrate sensitive information.

Upstream PR:
https://github.com/pyca/cryptography/pull/8230

--- requests-2.28.2/requests/sessions.py
+++ requests-2.28.2/requests/sessions.py
@@ -324,7 +324,9 @@ class SessionRedirectMixin:
         except KeyError:
             username, password = None, None
 
-        if username and password:
+        # urllib3 handles proxy authorization for us in the standard adapter.
+        # Avoid appending this to TLS tunneled requests where it may be leaked.
+        if not scheme.startswith('https') and username and password:
             headers["Proxy-Authorization"] = _basic_auth_str(username, password)
 
         return new_proxies
--- requests-2.28.2/tests/test_requests.py
+++ requests-2.28.2/tests/test_requests.py
@@ -646,6 +646,26 @@ class TestRequests:
 
         assert sent_headers.get("Proxy-Authorization") == proxy_auth_value
 
+
+    @pytest.mark.parametrize(
+        "url,has_proxy_auth",
+        (
+            ('http://example.com', True),
+            ('https://example.com', False),
+        ),
+    )
+    def test_proxy_authorization_not_appended_to_https_request(self, url, has_proxy_auth):
+        session = requests.Session()
+        proxies = {
+            'http': 'http://test:pass@localhost:8080',
+            'https': 'http://test:pass@localhost:8090',
+        }
+        req = requests.Request('GET', url)
+        prep = req.prepare()
+        session.rebuild_proxies(prep, proxies)
+
+        assert ('Proxy-Authorization' in prep.headers) is has_proxy_auth
+
     def test_basicauth_with_netrc(self, httpbin):
         auth = ("user", "pass")
         wrong_auth = ("wronguser", "wrongpass")
