Packages jaraco.itertools, jaraco.functools and jaraco.test
are not available on Solaris.

The compose() code below is taken directly from jaraco.functools.
https://github.com/jaraco/jaraco.functools

--- zipp-3.19.2/tests/test_path.py
+++ zipp-3.19.2/tests/test_path.py
@@ -1,6 +1,7 @@
 import io
 import itertools
 import contextlib
+import functools
 import pathlib
 import pickle
 import stat
@@ -10,8 +11,33 @@ from .compat.overlay import zipfile
 
 from .compat.py39.os_helper import temp_dir, FakePath
 
-import jaraco.itertools
-from jaraco.functools import compose
+"""
+The following function is taken from jaraco.functools
+licensed under MIT license
+  Copyright Jason R. Coombs
+"""
+def compose(*funcs):
+    """
+    Compose any number of unary functions into a single unary function.
+
+    >>> import textwrap
+    >>> expected = str.strip(textwrap.dedent(compose.__doc__))
+    >>> strip_and_dedent = compose(str.strip, textwrap.dedent)
+    >>> strip_and_dedent(compose.__doc__) == expected
+    True
+
+    Compose also allows the innermost function to take arbitrary arguments.
+
+    >>> round_three = lambda x: round(x, ndigits=3)
+    >>> f = compose(round_three, int.__truediv__)
+    >>> [f(3*x, x+1) for x in range(1,10)]
+    [1.5, 2.0, 2.25, 2.4, 2.5, 2.571, 2.625, 2.667, 2.7]
+    """
+
+    def compose_two(f1, f2):
+        return lambda *args, **kwargs: f1(f2(*args, **kwargs))
+
+    return functools.reduce(compose_two, funcs)
 
 from ._test_params import parameterize, Invoked
 
@@ -319,17 +345,6 @@ class TestPath(unittest.TestCase):
         zf.mode = 'r'
         return zf
 
-    def test_joinpath_constant_time(self):
-        """
-        Ensure joinpath on items in zipfile is linear time.
-        """
-        root = zipfile.Path(self.huge_zipfile())
-        entries = jaraco.itertools.Counter(root.iterdir())
-        for entry in entries:
-            entry.joinpath('suffix')
-        # Check the file iterated all items
-        assert entries.count == self.HUGE_ZIPFILE_NUM_ENTRIES
-
     @pass_alpharep
     def test_read_does_not_close(self, alpharep):
         alpharep = self.zipfile_ondisk(alpharep)
--- zipp-3.19.2/tests/compat/py39.py
+++ zipp-3.19.2/tests/compat/py39.py
@@ -1,11 +1,15 @@
 import sys
 
-from jaraco.test.cpython import from_test_support, try_import
-
-
-os_helper = try_import('os_helper') or from_test_support(
-    'FakePath',
-    'temp_dir',
-)
+try:
+    from test.support import os_helper
+except ImportError:
+    import test.support
+    import types
+    os_helper = types.SimpleNamespace(
+        **{
+            "FakePath": test.support.FakePath,
+            "temp_dir": test.support.temp_dir,
+        }
+    )
 
 sys.modules[__name__ + '.os_helper'] = os_helper
