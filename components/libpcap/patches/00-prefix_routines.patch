This is edited upstream commit d14fb11:
https://github.com/the-tcpdump-group/libpcap/commit/d14fb11d0dfc06ee5dac58146497aa5b0aa7c6fa

commit d14fb11d0dfc06ee5dac58146497aa5b0aa7c6fa
Author: Guy Harris <gharris@sonic.net>
Date:   Tue May 16 20:12:25 2023 -0700

    Prefix routines declared in pcap-int.h with pcap_.
    
    This avoids potential and, in one case (SIMH), actual collisions with
    names in other libraries or in applications using libpcap.

--- a/fad-getad.c
+++ b/fad-getad.c
@@ -263,7 +263,7 @@ }
 		/*
 		 * Add information for this address to the list.
 		 */
-		if (add_addr_to_if(devlistp, ifa->ifa_name, ifa->ifa_flags,
+		if (pcap_add_addr_to_if(devlistp, ifa->ifa_name, ifa->ifa_flags,
 		    get_flags_func,
 		    addr, addr_size, netmask, addr_size,
 		    broadaddr, broadaddr_size, dstaddr, dstaddr_size,
--- a/fad-gifc.c
+++ b/fad-gifc.c
@@ -409,7 +409,7 @@ #endif
 		/*
 		 * Add information for this address to the list.
 		 */
-		if (add_addr_to_if(devlistp, ifrp->ifr_name,
+		if (pcap_add_addr_to_if(devlistp, ifrp->ifr_name,
 		    ifrflags.ifr_flags, get_flags_func,
 		    &ifrp->ifr_addr, SA_LEN(&ifrp->ifr_addr),
 		    netmask, netmask_size, broadaddr, broadaddr_size,
--- a/fad-glifc.c
+++ b/fad-glifc.c
@@ -326,7 +326,7 @@ #endif
 		/*
 		 * Add information for this address to the list.
 		 */
-		if (add_addr_to_if(devlistp, ifrp->lifr_name,
+		if (pcap_add_addr_to_if(devlistp, ifrp->lifr_name,
 		    ifrflags.lifr_flags, get_flags_func,
 		    (struct sockaddr *)&ifrp->lifr_addr,
 		    sizeof (struct sockaddr_storage),
--- a/optimize.c
+++ b/optimize.c
@@ -2942,7 +2942,7 @@ * member of the "pcap_t" with an error m
  * otherwise, return 0.
  */
 int
-install_bpf_program(pcap_t *p, struct bpf_program *fp)
+pcap_install_bpf_program(pcap_t *p, struct bpf_program *fp)
 {
 	size_t prog_size;
 
--- a/pcap-airpcap.c
+++ b/pcap-airpcap.c
@@ -275,11 +275,11 @@ * all cases.
 		 */
 
 		/*
-		 * install_bpf_program() validates the program.
+		 * pcap_install_bpf_program() validates the program.
 		 *
 		 * XXX - what if we already have a filter in the kernel?
 		 */
-		if (install_bpf_program(p, fp) < 0)
+		if (pcap_install_bpf_program(p, fp) < 0)
 			return (-1);
 		pa->filtering_in_kernel = 0;	/* filtering in userland */
 		return (0);
@@ -1040,7 +1040,7 @@ }
 
 	for (airpcap_device = airpcap_devices; airpcap_device != NULL;
 	    airpcap_device = airpcap_device->next) {
-		if (add_dev(devlistp, airpcap_device->Name, 0,
+		if (pcap_add_dev(devlistp, airpcap_device->Name, 0,
 		    airpcap_device->Description, errbuf) == NULL) {
 			/*
 			 * Failure.
--- a/pcap-bpf.c
+++ b/pcap-bpf.c
@@ -2868,7 +2868,7 @@ * the bus, there'll be more than one ent
 		 * so we need to avoid adding multiple capture devices
 		 * for each bus.
 		 */
-		if (find_or_add_dev(devlistp, name, PCAP_IF_UP,
+		if (pcap_find_or_add_dev(devlistp, name, PCAP_IF_UP,
 		    get_usb_if_flags, NULL, errbuf) == NULL) {
 			free(name);
 			closedir(usbdir);
@@ -3403,11 +3403,11 @@ return (-1);
 	}
 
 	/*
-	 * install_bpf_program() validates the program.
+	 * pcap_install_bpf_program() validates the program.
 	 *
 	 * XXX - what if we already have a filter in the kernel?
 	 */
-	if (install_bpf_program(p, fp) < 0)
+	if (pcap_install_bpf_program(p, fp) < 0)
 		return (-1);
 	pb->filtering_in_kernel = 0;	/* filtering in userland */
 	return (0);
--- a/pcap-bt-linux.c
+++ b/pcap-bt-linux.c
@@ -131,7 +131,7 @@ * is associated with a network, check th
 		 * the status to PCAP_IF_CONNECTION_STATUS_CONNECTED
 		 * or PCAP_IF_CONNECTION_STATUS_DISCONNECTED.
 		 */
-		if (add_dev(devlistp, dev_name, PCAP_IF_WIRELESS, dev_descr, err_str)  == NULL)
+		if (pcap_add_dev(devlistp, dev_name, PCAP_IF_WIRELESS, dev_descr, err_str)  == NULL)
 		{
 			ret = -1;
 			break;
@@ -225,7 +225,7 @@ handle->linktype = DLT_BLUETOOTH_HCI_H4_
 
 	handle->read_op = bt_read_linux;
 	handle->inject_op = bt_inject_linux;
-	handle->setfilter_op = install_bpf_program; /* no kernel filtering */
+	handle->setfilter_op = pcap_install_bpf_program; /* no kernel filtering */
 	handle->setdirection_op = bt_setdirection_linux;
 	handle->set_datalink_op = NULL;	/* can't change data link type */
 	handle->getnonblock_op = pcap_getnonblock_fd;
--- a/pcap-bt-monitor-linux.c
+++ b/pcap-bt-monitor-linux.c
@@ -80,7 +80,7 @@ * there's no notion of "connected" or "d
      * more than there's a notion of "connected" or "disconnected"
      * for the "any" device.
      */
-    if (add_dev(devlistp, INTERFACE_NAME,
+    if (pcap_add_dev(devlistp, INTERFACE_NAME,
                 PCAP_IF_WIRELESS|PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE,
                 "Bluetooth Linux Monitor", err_str) == NULL)
     {
@@ -204,7 +204,7 @@ handle->linktype = DLT_BLUETOOTH_LINUX_M
 
     handle->read_op = bt_monitor_read;
     handle->inject_op = bt_monitor_inject;
-    handle->setfilter_op = install_bpf_program; /* no kernel filtering */
+    handle->setfilter_op = pcap_install_bpf_program; /* no kernel filtering */
     handle->setdirection_op = NULL; /* Not implemented */
     handle->set_datalink_op = NULL; /* can't change data link type */
     handle->getnonblock_op = pcap_getnonblock_fd;
--- a/pcap-dag.c
+++ b/pcap-dag.c
@@ -996,7 +996,7 @@ }
 
 	p->read_op = dag_read;
 	p->inject_op = dag_inject;
-	p->setfilter_op = install_bpf_program;
+	p->setfilter_op = pcap_install_bpf_program;
 	p->setdirection_op = NULL; /* Not implemented.*/
 	p->set_datalink_op = dag_set_datalink;
 	p->getnonblock_op = pcap_getnonblock_fd;
@@ -1179,7 +1179,7 @@ * PCAP_IF_CONNECTION_STATUS_DISCONNECTED
 			 *
 			 * Also, are there notions of "up" and "running"?
 			 */
-			if (add_dev(devlistp, name, 0, description, errbuf) == NULL) {
+			if (pcap_add_dev(devlistp, name, 0, description, errbuf) == NULL) {
 				/*
 				 * Failure.
 				 */
@@ -1191,7 +1191,7 @@ if (0 == dag_attach_stream64(dagfd, stre
 					dag_detach_stream(dagfd, stream);
 
 					snprintf(name,  10, "dag%d:%d", c, stream);
-					if (add_dev(devlistp, name, 0, description, errbuf) == NULL) {
+					if (pcap_add_dev(devlistp, name, 0, description, errbuf) == NULL) {
 						/*
 						 * Failure.
 						 */
--- a/pcap-dbus.c
+++ b/pcap-dbus.c
@@ -227,7 +227,7 @@ handle->offset = 0;
 	handle->linktype = DLT_DBUS;
 	handle->read_op = dbus_read;
 	handle->inject_op = dbus_write;
-	handle->setfilter_op = install_bpf_program; /* XXX, later add support for dbus_bus_add_match() */
+	handle->setfilter_op = pcap_install_bpf_program; /* XXX, later add support for dbus_bus_add_match() */
 	handle->setdirection_op = NULL;
 	handle->set_datalink_op = NULL;      /* can't change data link type */
 	handle->getnonblock_op = dbus_getnonblock;
@@ -338,11 +338,11 @@ /*
 	 * The notion of "connected" vs. "disconnected" doesn't apply.
 	 * XXX - what about the notions of "up" and "running"?
 	 */
-	if (add_dev(devlistp, "dbus-system",
+	if (pcap_add_dev(devlistp, "dbus-system",
 	    PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE, "D-Bus system bus",
 	    err_str) == NULL)
 		return -1;
-	if (add_dev(devlistp, "dbus-session",
+	if (pcap_add_dev(devlistp, "dbus-session",
 	    PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE, "D-Bus session bus",
 	    err_str) == NULL)
 		return -1;
--- a/pcap-dlpi.c
+++ b/pcap-dlpi.c
@@ -865,7 +865,7 @@ p->selectable_fd = p->fd;
 
 	p->read_op = pcap_read_dlpi;
 	p->inject_op = pcap_inject_dlpi;
-	p->setfilter_op = install_bpf_program;	/* no kernel filtering */
+	p->setfilter_op = pcap_install_bpf_program;	/* no kernel filtering */
 	p->setdirection_op = NULL;	/* Not implemented.*/
 	p->set_datalink_op = NULL;	/* can't change data link type */
 	p->getnonblock_op = pcap_getnonblock_fd;
@@ -1148,7 +1148,7 @@ * XXX - is there a notion of "up" and "r
 		 * And is there a way to determine whether the
 		 * interface is plugged into a network?
 		 */
-		if (add_dev(devlistp, baname, 0, NULL, errbuf) == NULL)
+		if (pcap_add_dev(devlistp, baname, 0, NULL, errbuf) == NULL)
 			return (-1);
 	}
 #endif
--- a/pcap-dos.c
+++ b/pcap-dos.c
@@ -599,7 +599,7 @@ * Can we find out if anything's plugged
      * a wired device, and set PCAP_IF_CONNECTION_STATUS_CONNECTED
      * or PCAP_IF_CONNECTION_STATUS_DISCONNECTED?
      */
-    if ((curdev = add_dev(devlistp, dev->name, 0,
+    if ((curdev = pcap_add_dev(devlistp, dev->name, 0,
                 dev->long_name, errbuf)) == NULL)
     {
       ret = -1;
@@ -618,7 +618,7 @@ dstaddr   = (struct sockaddr*) &sa_ll_1;
     broadaddr = (struct sockaddr*) &sa_ll_2;
     memset (&sa_ll_2.sin_addr, 0xFF, sizeof(sa_ll_2.sin_addr));
 
-    if (add_addr_to_dev(curdev, addr, sizeof(*addr),
+    if (pcap_add_addr_to_dev(curdev, addr, sizeof(*addr),
                         netmask, sizeof(*netmask),
                         broadaddr, sizeof(*broadaddr),
                         dstaddr, sizeof(*dstaddr), errbuf) < 0)
--- a/pcap-dpdk.c
+++ b/pcap-dpdk.c
@@ -949,7 +949,7 @@ p->selectable_fd = p->fd;
 		p->read_op = pcap_dpdk_dispatch;
 		p->inject_op = pcap_dpdk_inject;
 		// using pcap_filter currently, though DPDK provides their own BPF function. Because DPDK BPF needs load a ELF file as a filter.
-		p->setfilter_op = install_bpf_program;
+		p->setfilter_op = pcap_install_bpf_program;
 		p->setdirection_op = NULL;
 		p->set_datalink_op = NULL;
 		p->getnonblock_op = pcap_dpdk_getnonblock;
@@ -1041,7 +1041,7 @@ eth_addr_str(&eth_addr,mac_addr,DPDK_MAC
 			// PCI addr
 			rte_eth_dev_get_name_by_port(i,pci_addr);
 			snprintf(dpdk_desc,DPDK_DEV_DESC_MAX-1,"%s %s, MAC:%s, PCI:%s", DPDK_DESC, dpdk_name, mac_addr, pci_addr);
-			if (add_dev(devlistp, dpdk_name, 0, dpdk_desc, ebuf)==NULL){
+			if (pcap_add_dev(devlistp, dpdk_name, 0, dpdk_desc, ebuf)==NULL){
 				ret = PCAP_ERROR;
 				break;
 			}
--- a/pcap-int.h
+++ b/pcap-int.h
@@ -515,12 +515,12 @@ *
  * "pcap_findalldevs_interfaces()" is a helper to find those interfaces
  * using the "standard" mechanisms (SIOCGIFCONF, "getifaddrs()", etc.).
  *
- * "add_dev()" adds an entry to a pcap_if_list_t.
+ * "pcap_add_dev()" adds an entry to a pcap_if_list_t.
  *
- * "find_dev()" tries to find a device, by name, in a pcap_if_list_t.
+ * "pcap_find_dev()" tries to find a device, by name, in a pcap_if_list_t.
  *
- * "find_or_add_dev()" checks whether a device is already in a pcap_if_list_t
- * and, if not, adds an entry for it.
+ * "pcap_find_or_add_dev()" checks whether a device is already in a
+ * pcap_if_list_t and, if not, adds an entry for it.
  */
 struct pcap_if_list;
 typedef struct pcap_if_list pcap_if_list_t;
@@ -530,18 +530,18 @@ #if !defined(_WIN32) && !defined(MSDOS)
 int	pcap_findalldevs_interfaces(pcap_if_list_t *, char *,
 	    int (*)(const char *), get_if_flags_func);
 #endif
-pcap_if_t *find_or_add_dev(pcap_if_list_t *, const char *, bpf_u_int32,
+pcap_if_t *pcap_find_or_add_dev(pcap_if_list_t *, const char *, bpf_u_int32,
 	    get_if_flags_func, const char *, char *);
-pcap_if_t *find_dev(pcap_if_list_t *, const char *);
-pcap_if_t *add_dev(pcap_if_list_t *, const char *, bpf_u_int32, const char *,
-	    char *);
-int	add_addr_to_dev(pcap_if_t *, struct sockaddr *, size_t,
+pcap_if_t *pcap_find_dev(pcap_if_list_t *, const char *);
+pcap_if_t *pcap_add_dev(pcap_if_list_t *, const char *, bpf_u_int32,
+	    const char *, char *);
+int	pcap_add_addr_to_dev(pcap_if_t *, struct sockaddr *, size_t,
 	    struct sockaddr *, size_t, struct sockaddr *, size_t,
 	    struct sockaddr *dstaddr, size_t, char *errbuf);
 #ifndef _WIN32
-pcap_if_t *find_or_add_if(pcap_if_list_t *, const char *, bpf_u_int32,
+pcap_if_t *pcap_find_or_add_if(pcap_if_list_t *, const char *, bpf_u_int32,
 	    get_if_flags_func, char *);
-int	add_addr_to_if(pcap_if_list_t *, const char *, bpf_u_int32,
+int	pcap_add_addr_to_if(pcap_if_list_t *, const char *, bpf_u_int32,
 	    get_if_flags_func,
 	    struct sockaddr *, size_t, struct sockaddr *, size_t,
 	    struct sockaddr *, size_t, struct sockaddr *, size_t, char *);
@@ -557,11 +557,11 @@ *
  * "pcap_adjust_snapshot()" adjusts the snapshot to be non-zero and
  * fit within an int.
  *
- * "sf_cleanup()" closes the file handle associated with a pcap_t, if
+ * "pcap_sf_cleanup()" closes the file handle associated with a pcap_t, if
  * appropriate, and frees all data common to all modules for handling
  * savefile types.
  *
- * "charset_fopen()", in UTF-8 mode on Windows, does an fopen() that
+ * "pcap_charset_fopen()", in UTF-8 mode on Windows, does an fopen() that
  * treats the pathname as being in UTF-8, rather than the local
  * code page, on Windows.
  */
@@ -580,14 +580,14 @@ offsetof (struct { pcap_t __common; type
 pcap_t	*pcap_open_offline_common(char *ebuf, size_t total_size,
     size_t private_data);
 bpf_u_int32 pcap_adjust_snapshot(bpf_u_int32 linktype, bpf_u_int32 snaplen);
-void	sf_cleanup(pcap_t *p);
+void	pcap_sf_cleanup(pcap_t *p);
 #ifdef _WIN32
-FILE	*charset_fopen(const char *path, const char *mode);
+FILE	*pcap_charset_fopen(const char *path, const char *mode);
 #else
 /*
  * On other OSes, just use Boring Old fopen().
  */
-#define charset_fopen(path, mode)	fopen((path), (mode))
+#define pcap_charset_fopen(path, mode)	fopen((path), (mode))
 #endif
 
 /*
@@ -641,7 +641,7 @@ * and "pcap_next_ex()".
  */
 void	pcap_oneshot(u_char *, const struct pcap_pkthdr *, const u_char *);
 
-int	install_bpf_program(pcap_t *, struct bpf_program *);
+int	pcap_install_bpf_program(pcap_t *, struct bpf_program *);
 
 int	pcap_strcasecmp(const char *, const char *);
 
--- a/pcap-libdlpi.c
+++ b/pcap-libdlpi.c
@@ -248,7 +248,7 @@ p->selectable_fd = p->fd;
 
 	p->read_op = pcap_read_libdlpi;
 	p->inject_op = pcap_inject_libdlpi;
-	p->setfilter_op = install_bpf_program;	/* No kernel filtering */
+	p->setfilter_op = pcap_install_bpf_program;	/* No kernel filtering */
 	p->setdirection_op = NULL;	/* Not implemented */
 	p->set_datalink_op = NULL;	/* Can't change data link type */
 	p->getnonblock_op = pcap_getnonblock_fd;
@@ -377,7 +377,7 @@ /*
 		 * If it isn't already in the list of devices, try to
 		 * add it.
 		 */
-		if (find_or_add_dev(devlistp, entry->linkname, 0, get_if_flags,
+		if (pcap_find_or_add_dev(devlistp, entry->linkname, 0, get_if_flags,
 		    NULL, errbuf) == NULL)
 			retv = -1;
 	}
--- a/pcap-linux.c
+++ b/pcap-linux.c
@@ -1760,7 +1760,7 @@ * As it refers to all network devices, n
 	 * network device, the notion of "connected" vs. "disconnected"
 	 * doesn't apply.
 	 */
-	if (add_dev(devlistp, "any",
+	if (pcap_add_dev(devlistp, "any",
 	    PCAP_IF_UP|PCAP_IF_RUNNING|PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE,
 	    any_descr, errbuf) == NULL)
 		return (-1);
@@ -4333,8 +4333,8 @@ handlep = handle->priv;
 
 	/* Make our private copy of the filter */
 
-	if (install_bpf_program(handle, filter) < 0)
-		/* install_bpf_program() filled in errbuf */
+	if (pcap_install_bpf_program(handle, filter) < 0)
+		/* pcap_install_bpf_program() filled in errbuf */
 		return -1;
 
 	/*
--- a/pcap-netfilter-linux.c
+++ b/pcap-netfilter-linux.c
@@ -595,7 +595,7 @@ handle->bufsize = 128 + handle->snapshot
 	handle->offset = 0;
 	handle->read_op = netfilter_read_linux;
 	handle->inject_op = netfilter_inject_linux;
-	handle->setfilter_op = install_bpf_program; /* no kernel filtering */
+	handle->setfilter_op = pcap_install_bpf_program; /* no kernel filtering */
 	handle->setdirection_op = NULL;
 	handle->set_datalink_op = netfilter_set_datalink;
 	handle->getnonblock_op = pcap_getnonblock_fd;
@@ -781,11 +781,11 @@ /*
 	 * The notion of "connected" vs. "disconnected" doesn't apply.
 	 * XXX - what about "up" and "running"?
 	 */
-	if (add_dev(devlistp, NFLOG_IFACE,
+	if (pcap_add_dev(devlistp, NFLOG_IFACE,
 	    PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE,
 	    "Linux netfilter log (NFLOG) interface", err_str) == NULL)
 		return -1;
-	if (add_dev(devlistp, NFQUEUE_IFACE,
+	if (pcap_add_dev(devlistp, NFQUEUE_IFACE,
 	    PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE,
 	    "Linux netfilter queue (NFQUEUE) interface", err_str) == NULL)
 		return -1;
--- a/pcap-netmap.c
+++ b/pcap-netmap.c
@@ -266,7 +266,7 @@ p->linktype = DLT_EN10MB;
 	p->selectable_fd = p->fd;
 	p->read_op = pcap_netmap_dispatch;
 	p->inject_op = pcap_netmap_inject;
-	p->setfilter_op = install_bpf_program;
+	p->setfilter_op = pcap_install_bpf_program;
 	p->setdirection_op = NULL;
 	p->set_datalink_op = NULL;
 	p->getnonblock_op = pcap_getnonblock_fd;
--- a/pcap-nit.c
+++ b/pcap-nit.c
@@ -355,7 +355,7 @@ }
 
 	p->read_op = pcap_read_nit;
 	p->inject_op = pcap_inject_nit;
-	p->setfilter_op = install_bpf_program;	/* no kernel filtering */
+	p->setfilter_op = pcap_install_bpf_program;	/* no kernel filtering */
 	p->setdirection_op = NULL;	/* Not implemented. */
 	p->set_datalink_op = NULL;	/* can't change data link type */
 	p->getnonblock_op = pcap_getnonblock_fd;
--- a/pcap-npf.c
+++ b/pcap-npf.c
@@ -1915,11 +1915,11 @@ * all cases.
 		 */
 
 		/*
-		 * install_bpf_program() validates the program.
+		 * pcap_install_bpf_program() validates the program.
 		 *
 		 * XXX - what if we already have a filter in the kernel?
 		 */
-		if (install_bpf_program(p, fp) < 0)
+		if (pcap_install_bpf_program(p, fp) < 0)
 			return (-1);
 		pw->filtering_in_kernel = 0;	/* filtering in userland */
 		return (0);
@@ -1953,7 +1953,7 @@ return (-1);
 	}
 
 	/* Install a user level filter */
-	if (install_bpf_program(p, fp) < 0)
+	if (pcap_install_bpf_program(p, fp) < 0)
 		return (-1);
 
 	return (0);
@@ -2018,7 +2018,7 @@ if_addr_size = MAX_NETWORK_ADDRESSES;
 	/*
 	 * Add an entry for this interface, with no addresses.
 	 */
-	curdev = add_dev(devlistp, name, flags, description, errbuf);
+	curdev = pcap_add_dev(devlistp, name, flags, description, errbuf);
 	if (curdev == NULL) {
 		/*
 		 * Failure.
@@ -2050,7 +2050,7 @@ /*
 		 * "curdev" is an entry for this interface; add an entry for
 		 * this address to its list of addresses.
 		 */
-		res = add_addr_to_dev(curdev,
+		res = pcap_add_addr_to_dev(curdev,
 		    (struct sockaddr *)&if_addrs[if_addr_size].IPAddress,
 		    sizeof (struct sockaddr_storage),
 		    (struct sockaddr *)&if_addrs[if_addr_size].SubnetMask,
--- a/pcap-pf.c
+++ b/pcap-pf.c
@@ -659,7 +659,7 @@ }
 	/*
 	 * We couldn't do filtering in the kernel; do it in userland.
 	 */
-	if (install_bpf_program(p, fp) < 0)
+	if (pcap_install_bpf_program(p, fp) < 0)
 		return (-1);
 
 	/*
--- a/pcap-rdmasniff.c
+++ b/pcap-rdmasniff.c
@@ -323,7 +323,7 @@ handle->offset = 0;
 	handle->read_op = rdmasniff_read;
 	handle->stats_op = rdmasniff_stats;
 	handle->cleanup_op = rdmasniff_cleanup;
-	handle->setfilter_op = install_bpf_program;
+	handle->setfilter_op = pcap_install_bpf_program;
 	handle->setdirection_op = NULL;
 	handle->set_datalink_op = NULL;
 	handle->getnonblock_op = pcap_getnonblock_fd;
@@ -444,7 +444,7 @@ /*
 		 * XXX - do the notions of "up", "running", or
 		 * "connected" apply here?
 		 */
-		if (!add_dev(devlistp, dev_list[i]->name, 0, "RDMA sniffer", err_str)) {
+		if (!pcap_add_dev(devlistp, dev_list[i]->name, 0, "RDMA sniffer", err_str)) {
 			ret = -1;
 			break;
 		}
--- a/pcap-rpcap.c
+++ b/pcap-rpcap.c
@@ -1701,7 +1701,7 @@ struct pcap_rpcap *pr = fp->priv;	/* str
 	if (!pr->rmt_capstarted)
 	{
 		/* copy filter into the pcap_t structure */
-		if (install_bpf_program(fp, prog) == -1)
+		if (pcap_install_bpf_program(fp, prog) == -1)
 			return -1;
 		return 0;
 	}
--- a/pcap-septel.c
+++ b/pcap-septel.c
@@ -207,7 +207,7 @@ handle->selectable_fd = -1;
 
   handle->read_op = septel_read;
   handle->inject_op = septel_inject;
-  handle->setfilter_op = install_bpf_program;
+  handle->setfilter_op = pcap_install_bpf_program;
   handle->set_datalink_op = NULL; /* can't change data link type */
   handle->getnonblock_op = septel_getnonblock;
   handle->setnonblock_op = septel_setnonblock;
@@ -267,7 +267,7 @@ {
   /*
    * XXX - do the notions of "up", "running", or "connected" apply here?
    */
-  if (add_dev(devlistp,"septel",0,"Intel/Septel device",errbuf) == NULL)
+  if (pcap_add_dev(devlistp,"septel",0,"Intel/Septel device",errbuf) == NULL)
     return -1;
   return 0;
 }
--- a/pcap-snf.c
+++ b/pcap-snf.c
@@ -323,7 +323,7 @@ #endif /* !_WIN32 */
 	p->linktype = DLT_EN10MB;
 	p->read_op = snf_read;
 	p->inject_op = snf_inject;
-	p->setfilter_op = install_bpf_program;
+	p->setfilter_op = pcap_install_bpf_program;
 	p->setdirection_op = NULL; /* Not implemented.*/
 	p->set_datalink_op = snf_set_datalink;
 	p->getnonblock_op = snf_getnonblock;
@@ -416,7 +416,7 @@ /*
 		 * See if there's already an entry for the device
 		 * with the name ifa->snf_ifa_name.
 		 */
-		dev = find_dev(devlistp, ifa->snf_ifa_name);
+		dev = pcap_find_dev(devlistp, ifa->snf_ifa_name);
 		if (dev != NULL) {
 			/*
 			 * Yes.  Update its description.
@@ -442,7 +442,7 @@ * plugged into the adapter and set
 			 * PCAP_IF_CONNECTION_STATUS_CONNECTED or
 			 * PCAP_IF_CONNECTION_STATUS_DISCONNECTED?
 			 */
-			dev = add_dev(devlistp, ifa->snf_ifa_name, 0, desc,
+			dev = pcap_add_dev(devlistp, ifa->snf_ifa_name, 0, desc,
 			    errbuf);
 			if (dev == NULL)
 				return -1;
@@ -457,7 +457,7 @@ * Successful conversion of device name
 				 * to IPv4 address.
 				 */
 				addr.sin_family = AF_INET;
-				if (add_addr_to_dev(dev, &addr, sizeof(addr),
+				if (pcap_add_addr_to_dev(dev, &addr, sizeof(addr),
 				    NULL, 0, NULL, 0, NULL, 0, errbuf) == -1)
 					return -1;
                         } else if (ret == -1) {
@@ -492,7 +492,7 @@ * Presumably, there's no notion of "conn
 		 * "disconnected", as "is this plugged into a network?"
 		 * would be a per-port property.
 		 */
-		if (add_dev(devlistp, name,
+		if (pcap_add_dev(devlistp, name,
 		    PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE, desc,
 		    errbuf) == NULL)
 			return (-1);
--- a/pcap-snit.c
+++ b/pcap-snit.c
@@ -448,7 +448,7 @@ }
 
 	p->read_op = pcap_read_snit;
 	p->inject_op = pcap_inject_snit;
-	p->setfilter_op = install_bpf_program;	/* no kernel filtering */
+	p->setfilter_op = pcap_install_bpf_program;	/* no kernel filtering */
 	p->setdirection_op = NULL;	/* Not implemented. */
 	p->set_datalink_op = NULL;	/* can't change data link type */
 	p->getnonblock_op = pcap_getnonblock_fd;
--- a/pcap-snoop.c
+++ b/pcap-snoop.c
@@ -403,7 +403,7 @@ p->selectable_fd = p->fd;
 
 	p->read_op = pcap_read_snoop;
 	p->inject_op = pcap_inject_snoop;
-	p->setfilter_op = install_bpf_program;	/* no kernel filtering */
+	p->setfilter_op = pcap_install_bpf_program;	/* no kernel filtering */
 	p->setdirection_op = NULL;	/* Not implemented. */
 	p->set_datalink_op = NULL;	/* can't change data link type */
 	p->getnonblock_op = pcap_getnonblock_fd;
--- a/pcap-tc.c
+++ b/pcap-tc.c
@@ -419,7 +419,7 @@ */
 			dev = TcCreatePcapIfFromPort(pPorts[i]);
 
 			if (dev != NULL)
-				add_dev(devlist, dev->name, dev->flags, dev->description, errbuf);
+				pcap_add_dev(devlist, dev->name, dev->flags, dev->description, errbuf);
 		}
 
 		if (numPorts > 0)
@@ -610,7 +610,7 @@ goto bad;
 	}
 
 	p->read_op = TcRead;
-	p->setfilter_op = install_bpf_program;
+	p->setfilter_op = pcap_install_bpf_program;
 	p->setdirection_op = NULL;	/* Not implemented. */
 	p->set_datalink_op = TcSetDatalink;
 	p->getnonblock_op = TcGetNonBlock;
--- a/pcap-usb-linux.c
+++ b/pcap-usb-linux.c
@@ -157,7 +157,7 @@ * As this refers to all buses, there's n
 		 * "connected" vs. "disconnected", as that's a property
 		 * that would apply to a particular USB interface.
 		 */
-		if (add_dev(devlistp, dev_name,
+		if (pcap_add_dev(devlistp, dev_name,
 		    PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE,
 		    "Raw USB traffic, all USB buses", err_str) == NULL)
 			return -1;
@@ -169,7 +169,7 @@ * PCAP_IF_CONNECTION_STATUS_CONNECTED or
 		 * PCAP_IF_CONNECTION_STATUS_DISCONNECTED?
 		 */
 		snprintf(dev_descr, 30, "Raw USB traffic, bus number %d", n);
-		if (add_dev(devlistp, dev_name, 0, dev_descr, err_str) == NULL)
+		if (pcap_add_dev(devlistp, dev_name, 0, dev_descr, err_str) == NULL)
 			return -1;
 	}
 
@@ -482,7 +482,7 @@ handle->offset = 0;
 	handle->linktype = DLT_USB_LINUX;
 
 	handle->inject_op = usb_inject_linux;
-	handle->setfilter_op = install_bpf_program; /* no kernel filtering */
+	handle->setfilter_op = pcap_install_bpf_program; /* no kernel filtering */
 	handle->setdirection_op = usb_setdirection_linux;
 	handle->set_datalink_op = NULL;	/* can't change data link type */
 	handle->getnonblock_op = pcap_getnonblock_fd;
--- a/pcap.c
+++ b/pcap.c
@@ -1007,7 +1007,7 @@ * IFF_ flags and description, and, if th
  * the new entry, otherwise return NULL and set errbuf to an error message.
  */
 pcap_if_t *
-find_or_add_if(pcap_if_list_t *devlistp, const char *name,
+pcap_find_or_add_if(pcap_if_list_t *devlistp, const char *name,
     bpf_u_int32 if_flags, get_if_flags_func get_flags_func, char *errbuf)
 {
 	bpf_u_int32 pcap_flags;
@@ -1041,7 +1041,7 @@ /*
 	 * Attempt to find an entry for this device; if we don't find one,
 	 * attempt to add one.
 	 */
-	return (find_or_add_dev(devlistp, name, pcap_flags,
+	return (pcap_find_or_add_dev(devlistp, name, pcap_flags,
 	    get_flags_func, get_if_description(name), errbuf));
 }
 
@@ -1064,7 +1064,7 @@ * call may be the only call made to add
  * add interfaces even if they have no addresses.)
  */
 int
-add_addr_to_if(pcap_if_list_t *devlistp, const char *name,
+pcap_add_addr_to_if(pcap_if_list_t *devlistp, const char *name,
     bpf_u_int32 if_flags, get_if_flags_func get_flags_func,
     struct sockaddr *addr, size_t addr_size,
     struct sockaddr *netmask, size_t netmask_size,
@@ -1077,7 +1077,7 @@ pcap_if_t *curdev;
 	/*
 	 * Check whether the device exists and, if not, add it.
 	 */
-	curdev = find_or_add_if(devlistp, name, if_flags, get_flags_func,
+	curdev = pcap_find_or_add_if(devlistp, name, if_flags, get_flags_func,
 	    errbuf);
 	if (curdev == NULL) {
 		/*
@@ -1099,7 +1099,7 @@ * "curdev" is an entry for this interfac
 	 * address for it; add an entry for that address to the
 	 * interface's list of addresses.
 	 */
-	return (add_addr_to_dev(curdev, addr, addr_size, netmask,
+	return (pcap_add_addr_to_dev(curdev, addr, addr_size, netmask,
 	    netmask_size, broadaddr, broadaddr_size, dstaddr,
 	    dstaddr_size, errbuf));
 }
@@ -1110,7 +1110,7 @@ * Add an entry to the list of addresses
  * "curdev" is the entry for that interface.
  */
 int
-add_addr_to_dev(pcap_if_t *curdev,
+pcap_add_addr_to_dev(pcap_if_t *curdev,
     struct sockaddr *addr, size_t addr_size,
     struct sockaddr *netmask, size_t netmask_size,
     struct sockaddr *broadaddr, size_t broadaddr_size,
@@ -1225,7 +1225,7 @@ * flags and description, and, if that su
  * return -1 and set errbuf to an error message.
  */
 pcap_if_t *
-find_or_add_dev(pcap_if_list_t *devlistp, const char *name, bpf_u_int32 flags,
+pcap_find_or_add_dev(pcap_if_list_t *devlistp, const char *name, bpf_u_int32 flags,
     get_if_flags_func get_flags_func, const char *description, char *errbuf)
 {
 	pcap_if_t *curdev;
@@ -1233,7 +1233,7 @@ pcap_if_t *curdev;
 	/*
 	 * Is there already an entry in the list for this device?
 	 */
-	curdev = find_dev(devlistp, name);
+	curdev = pcap_find_dev(devlistp, name);
 	if (curdev != NULL) {
 		/*
 		 * Yes, return it.
@@ -1258,7 +1258,7 @@ }
 	/*
 	 * Now, try to add it to the list of devices.
 	 */
-	return (add_dev(devlistp, name, flags, description, errbuf));
+	return (pcap_add_dev(devlistp, name, flags, description, errbuf));
 }
 
 /*
@@ -1266,7 +1266,7 @@ * Look for a given device in the specifi
  * the entry for it if we find it or NULL if we don't.
  */
 pcap_if_t *
-find_dev(pcap_if_list_t *devlistp, const char *name)
+pcap_find_dev(pcap_if_list_t *devlistp, const char *name)
 {
 	pcap_if_t *curdev;
 
@@ -1300,7 +1300,7 @@ *
  * If we weren't given a description, try to get one.
  */
 pcap_if_t *
-add_dev(pcap_if_list_t *devlistp, const char *name, bpf_u_int32 flags,
+pcap_add_dev(pcap_if_list_t *devlistp, const char *name, bpf_u_int32 flags,
     const char *description, char *errbuf)
 {
 	pcap_if_t *curdev, *prevdev, *nextdev;
--- a/savefile.c
+++ b/savefile.c
@@ -248,7 +248,7 @@ return (-1);
 }
 
 void
-sf_cleanup(pcap_t *p)
+pcap_sf_cleanup(pcap_t *p)
 {
 	if (p->rfile != stdin)
 		(void)fclose(p->rfile);
@@ -268,7 +268,7 @@ * If we're not, just use fopen(); that'l
  * local code page.
  */
 FILE *
-charset_fopen(const char *path, const char *mode)
+pcap_charset_fopen(const char *path, const char *mode)
 {
 	wchar_t *utf16_path;
 #define MAX_MODE_LEN	16
@@ -375,7 +375,7 @@ #endif
 	}
 	else {
 		/*
-		 * Use charset_fopen(); on Windows, it tests whether we're
+		 * Use pcap_charset_fopen(); on Windows, it tests whether we're
 		 * in "local code page" or "UTF-8" mode, and treats the
 		 * pathname appropriately, and on other platforms, it just
 		 * wraps fopen().
@@ -384,7 +384,7 @@ * "b" is supported as of C90, so *all* U
 		 * support it, even though it does nothing.  For MS-DOS,
 		 * we again need it.
 		 */
-		fp = charset_fopen(fname, "rb");
+		fp = pcap_charset_fopen(fname, "rb");
 		if (fp == NULL) {
 			pcap_fmt_errmsg_for_errno(errbuf, PCAP_ERRBUF_SIZE,
 			    errno, "%s", fname);
@@ -564,7 +564,7 @@ #endif
 	p->can_set_rfmon_op = sf_cant_set_rfmon;
 	p->read_op = pcap_offline_read;
 	p->inject_op = sf_inject;
-	p->setfilter_op = install_bpf_program;
+	p->setfilter_op = pcap_install_bpf_program;
 	p->setdirection_op = sf_setdirection;
 	p->set_datalink_op = NULL;	/* we don't support munging link-layer headers */
 	p->getnonblock_op = sf_getnonblock;
--- a/sf-pcap.c
+++ b/sf-pcap.c
@@ -414,7 +414,7 @@ *err = 1;
 		return (NULL);
 	}
 
-	p->cleanup_op = sf_cleanup;
+	p->cleanup_op = pcap_sf_cleanup;
 
 	return (p);
 }
@@ -861,7 +861,7 @@ * support it, even though it does nothin
 		 * required on Windows, as the file is a binary file
 		 * and must be written in binary mode.
 		 */
-		f = charset_fopen(fname, "wb");
+		f = pcap_charset_fopen(fname, "wb");
 		if (f == NULL) {
 			pcap_fmt_errmsg_for_errno(p->errbuf, PCAP_ERRBUF_SIZE,
 			    errno, "%s", fname);
@@ -961,7 +961,7 @@ * "b" is supported as of C90, so *all* U
 	 * even though it does nothing.  It's required on Windows, as the
 	 * file is a binary file and must be read in binary mode.
 	 */
-	f = charset_fopen(fname, "ab+");
+	f = pcap_charset_fopen(fname, "ab+");
 	if (f == NULL) {
 		pcap_fmt_errmsg_for_errno(p->errbuf, PCAP_ERRBUF_SIZE,
 		    errno, "%s", fname);
--- a/sf-pcapng.c
+++ b/sf-pcapng.c
@@ -1090,7 +1090,7 @@ {
 	struct pcap_ng_sf *ps = p->priv;
 
 	free(ps->ifaces);
-	sf_cleanup(p);
+	pcap_sf_cleanup(p);
 }
 
 /*
