This is edited upstream commit 841507c:
https://github.com/the-tcpdump-group/libpcap/commit/841507c824c1e3adffca4ec8b3d986fbc1244ba1

It fixes #1057:

https://github.com/the-tcpdump-group/tcpdump/issues/1057

commit 841507c824c1e3adffca4ec8b3d986fbc1244ba1
Author: Guy Harris <gharris@sonic.net>
Date:   Tue Jun 13 17:17:15 2023 -0700

    Add the Solaris "any" device in pcap_findalldevs() if we have it.
    
    There's no good run-time test, so we test at configure time, by checking
    whether /usr/include/inet/ipnet.h exists and contains IPNET_ANY_LINK.
    See https://github.com/the-tcpdump-group/tcpdump/issues/1057#issuecomment-1584088911
    
    We make a common routine to use to add that device.

--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1756,6 +1756,29 @@ set(CMAKE_EXTRA_INCLUDE_FILES  sys/types
             check_type_size("struct BPF_TIMEVAL" STRUCT_BPF_TIMEVAL)
         endif()
         cmake_pop_check_state()
+
+        #
+        # Check whether there's a inet/ipnet.h header and,
+        # if so, whether it defines IPNET_ANY_LINK - if so,
+        # we assume we have the "any" device (that's a
+        # Solaris header, and later versions of Solaris
+        # have an "any" device).
+        #
+        # Attempting to include it at compile time could
+        # be a pain, as it's a kernel header.
+        #
+        message(STATUS "Checking whether the Solaris \"any\" device is supported")
+        if(EXISTS /usr/include/inet/ipnet.h)
+            file(STRINGS /usr/include/inet/ipnet.h IPNET_ANY_LINK_LINES REGEX IPNET_ANY_LINK)
+            if(NOT IPNET_ANY_LINK_LINES STREQUAL "")
+                set(HAVE_SOLARIS_ANY_DEVICE TRUE)
+            endif()
+        endif()
+        if(HAVE_SOLARIS_ANY_DEVICE)
+            message(STATUS "Checking whether the Solaris \"any\" device is supported - supported")
+        else()
+            message(STATUS "Checking whether the Solaris \"any\" device is supported - not supported")
+        endif()
     elseif(PCAP_TYPE STREQUAL "haiku")
         #
         # Check for some headers just in case.
--- a/cmakeconfig.h.in
+++ b/cmakeconfig.h.in
@@ -150,6 +150,9 @@ #cmakedefine HAVE_SOCKLEN_T 1
 /* On solaris */
 #cmakedefine HAVE_SOLARIS 1
 
+/* target host supports Solaris "any" device */
+#cmakedefine HAVE_SOLARIS_ANY_DEVICE 1
+
 /* define if we have the Solaris/IRIX getnetbyname_r() */
 #cmakedefine HAVE_SOLARIS_IRIX_GETNETBYNAME_R 1
 
--- a/configure.ac
+++ b/configure.ac
@@ -1121,6 +1121,25 @@ #include <sys/ioccom.h>
 		#endif
 		#include <net/bpf.h>
 	    ])
+
+	#
+	# Check whether there's a net/ipnet.h header and,
+	# if so, whether it defines IPNET_ANY_LINK - if so,
+	# we assume we have the "any" device (that's a
+	# Solaris header, and later versions of Solaris
+	# have an "any" device).
+	#
+	# Attempting to include it at compile time could
+	# be a pain, as it's a kernel header.
+	#
+	AC_MSG_CHECKING(whether the Solaris "any" device is supported)
+	if test -e /usr/include/inet/ipnet.h &&
+	    grep -q IPNET_ANY_LINK /usr/include/inet/ipnet.h; then
+		AC_MSG_RESULT(yes)
+		AC_DEFINE(HAVE_SOLARIS_ANY_DEVICE, , [target host supports Solaris "any" device])
+	else
+		AC_MSG_RESULT(no)
+	fi
 	;;
 
 pf)
--- a/pcap-bpf.c
+++ b/pcap-bpf.c
@@ -3014,6 +3014,14 @@ if (pcap_findalldevs_interfaces(devlistp
 	    get_if_flags) == -1)
 		return (-1);	/* failure */
 
+#if defined(HAVE_SOLARIS_ANY_DEVICE)
+	/*
+	 * Add the "any" device.
+	 */
+	if (pcap_add_any_dev(devlistp, errbuf) == NULL)
+		return (-1);
+#endif
+
 #if defined(__FreeBSD__) && defined(SIOCIFCREATE2)
 	if (finddevs_usb(devlistp, errbuf) == -1)
 		return (-1);
--- a/pcap-int.h
+++ b/pcap-int.h
@@ -517,6 +517,8 @@ * using the "standard" mechanisms (SIOCG
  *
  * "pcap_add_dev()" adds an entry to a pcap_if_list_t.
  *
+ * "pcap_add_any_dev()" adds an entry for the "any" device to a pcap_if_list_t.
+ *
  * "pcap_find_dev()" tries to find a device, by name, in a pcap_if_list_t.
  *
  * "pcap_find_or_add_dev()" checks whether a device is already in a
@@ -535,6 +537,7 @@ get_if_flags_func, const char *, char *)
 pcap_if_t *pcap_find_dev(pcap_if_list_t *, const char *);
 pcap_if_t *pcap_add_dev(pcap_if_list_t *, const char *, bpf_u_int32,
 	    const char *, char *);
+pcap_if_t *pcap_add_any_dev(pcap_if_list_t *, char *);
 int	pcap_add_addr_to_dev(pcap_if_t *, struct sockaddr *, size_t,
 	    struct sockaddr *, size_t, struct sockaddr *, size_t,
 	    struct sockaddr *dstaddr, size_t, char *errbuf);
--- a/pcap-linux.c
+++ b/pcap-linux.c
@@ -1431,11 +1431,6 @@ return -1;
 }
 
 /*
- * Description string for the "any" device.
- */
-static const char any_descr[] = "Pseudo-device that captures on all interfaces";
-
-/*
  * A PF_PACKET socket can be bound to any network interface.
  */
 static int
@@ -1756,13 +1751,8 @@ return (-1);	/* failure */
 
 	/*
 	 * Add the "any" device.
-	 * As it refers to all network devices, not to any particular
-	 * network device, the notion of "connected" vs. "disconnected"
-	 * doesn't apply.
 	 */
-	if (pcap_add_dev(devlistp, "any",
-	    PCAP_IF_UP|PCAP_IF_RUNNING|PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE,
-	    any_descr, errbuf) == NULL)
+	if (pcap_add_any_dev(devlistp, errbuf) == NULL)
 		return (-1);
 
 	return (0);
--- a/pcap.c
+++ b/pcap.c
@@ -1420,6 +1420,24 @@ return (curdev);
 }
 
 /*
+ * Add an entry for the "any" device.
+ */
+pcap_if_t *
+pcap_add_any_dev(pcap_if_list_t *devlistp, char *errbuf)
+{
+	static const char any_descr[] = "Pseudo-device that captures on all interfaces";
+
+	/*
+	 * As it refers to all network devices, not to any particular
+	 * network device, the notion of "connected" vs. "disconnected"
+	 * doesn't apply to the "any" device.
+	 */
+	return pcap_add_dev(devlistp, "any",
+	    PCAP_IF_UP|PCAP_IF_RUNNING|PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE,
+	    any_descr, errbuf);
+}
+
+/*
  * Free a list of interfaces.
  */
 void
