Changes to make gnome-clocks build with seeded libgweather and
geocode-glib.  Once everything is integrated, this needs to be 
reworked to adapt to gtk4 and potentially libadwaita instead of
libhandy

--- a/src/geocoding.vala	2021-10-17 03:01:20.319497000 -0700
+++ b/src/geocoding.vala	2024-01-30 17:41:37.393079843 -0800
@@ -102,27 +102,6 @@
             }
         }
 
-        var locations = location.get_children ();
-        for (int i = 0; i < locations.length; i++) {
-            if (locations[i].get_level () == GWeather.LocationLevel.CITY) {
-                if (locations[i].has_coords ()) {
-                    double latitude, longitude, distance;
-
-                    locations[i].get_coords (out latitude, out longitude);
-                    distance = get_distance (((GClue.Location) geo_location).latitude,
-                                             ((GClue.Location) geo_location).longitude,
-                                             latitude,
-                                             longitude);
-
-                    if (distance < minimal_distance) {
-                        found_location = locations[i];
-                        minimal_distance = distance;
-                    }
-                }
-            }
-
-            yield search_locations (locations[i]);
-        }
     }
 
     public bool is_location_similar (GWeather.Location location) {
@@ -133,13 +112,6 @@
                 var timezone = location.get_timezone ();
                 var found_timezone = ((GWeather.Location) found_location).get_timezone ();
 
-                if (timezone != null && found_timezone != null) {
-                    var tzid = ((GWeather.Timezone) timezone).get_tzid ();
-                    var found_tzid = ((GWeather.Timezone) found_timezone).get_tzid ();
-                    if (tzid == found_tzid) {
-                        return true;
-                    }
-                }
             }
         }
 
--- a/src/search-provider.vala	2021-10-17 03:01:20.319497000 -0700
+++ b/src/search-provider.vala	2024-01-30 17:41:37.393282361 -0800
@@ -75,17 +75,6 @@
 
     private async void search_locations_recurse (GWeather.Location location, string[] normalized_terms,
                                                  GenericArray<GWeather.Location> matches) {
-        var locations = location.get_children ();
-        foreach (var child_location in locations) {
-            var level = child_location.get_level ();
-            if (level == CITY || level == NAMED_TIMEZONE) {
-                if (location_matches (child_location, normalized_terms)) {
-                    matches.add (child_location);
-                }
-            }
-
-            yield search_locations_recurse (child_location, normalized_terms, matches);
-        }
     }
 
     private async string[] search_locations (string[] normalized_terms) {
@@ -103,12 +92,6 @@
         string[] result = {};
         matches.foreach ((location) => {
             // FIXME: Avoid cities without children locations
-            if (location.get_level () == GWeather.LocationLevel.CITY &&
-                location.get_children ().length == 0) {
-                return;
-            }
-            // HACK: the search provider interface does not currently allow variants as result IDs
-            result += serialize_location (location);
         });
 
         return result;
--- a/src/world-face.vala	2021-10-17 03:01:20.320497000 -0700
+++ b/src/world-face.vala	2024-01-30 17:41:37.397235594 -0800
@@ -44,16 +44,6 @@
         locations = new ContentStore ();
         settings = new GLib.Settings ("org.gnome.clocks");
 
-        locations.set_sorting ((item1, item2) => {
-            var offset1 = ((GWeather.Timezone) ((Item) item1).location.get_timezone ()).get_offset ();
-            var offset2 = ((GWeather.Timezone) ((Item) item2).location.get_timezone ()).get_offset ();
-            if (offset1 < offset2)
-                return -1;
-            if (offset1 > offset2)
-                return 1;
-            return 0;
-        });
-
         listbox.bind_model (locations, (item) => {
             var row = new Row ((Item) item);
 
--- a/src/world-item.vala	2021-10-17 03:01:20.320497000 -0700
+++ b/src/world-item.vala	2024-01-30 17:41:37.396402674 -0800
@@ -224,7 +224,7 @@
                          (string) weather_time_zone);
             }
         } else {
-            warning ("Failed to get a timezone for %s", location.get_name ());
+            warning ("Failed to get a timezone for ");
         }
 
         tick ();
@@ -402,8 +402,7 @@
         if (location == null) {
             return null;
         } else if (((GWeather.Location) location).get_timezone_str () == null) {
-            warning ("Invalid location “%s” – timezone unknown. Ignoring.",
-                     ((GWeather.Location) location).get_name ());
+            warning ("Invalid location – timezone unknown. Ignoring.");
             return null;
         } else {
             return new Item ((GWeather.Location) location);
--- a/src/world-location-dialog-row.vala	2021-10-17 03:01:20.320497000 -0700
+++ b/src/world-location-dialog-row.vala	2024-01-30 17:41:37.395345042 -0800
@@ -37,21 +37,8 @@
         var wallclock = Utils.WallClock.get_default ();
         var local_time = wallclock.date_time;
         var weather_time_zone = data.location.get_timezone ();
-        if (weather_time_zone != null) {
-            var time_zone = new TimeZone.identifier (((GWeather.Timezone) weather_time_zone).get_tzid ());
-            var date_time = local_time.to_timezone (time_zone);
-            var local_offset = local_time.get_utc_offset () - date_time.get_utc_offset ();
-            var time_diff_message = Utils.get_time_difference_message (local_offset);
-            var time_zone_name = ((GWeather.Timezone) weather_time_zone).get_name ();
 
-            if ((string?) time_zone_name != null) {
-                clock_description = "%s • %s".printf (time_zone_name, time_diff_message);
-            } else {
-                clock_description = "%s".printf (time_diff_message);
-            }
-        } else {
-            clock_description = null;
-        }
+        clock_description = null;
 
         sensitive = !data.selected;
 
--- a/src/world-location-dialog.vala	2021-10-17 03:01:20.320497000 -0700
+++ b/src/world-location-dialog.vala	2024-01-30 17:41:37.392061502 -0800
@@ -132,44 +132,13 @@
 
         switch (location.get_level ()) {
             case CITY:
-                var contains_name = location.get_sort_name ().contains (search);
-
-                var country_name = location.get_country_name ();
-                if (country_name != null) {
-                    country_name = ((string) country_name).normalize ().casefold ();
-                }
-                var contains_country_name = country_name != null && ((string) country_name).contains (search);
-
-                string? timezone_name = null;
-                var timezone = location.get_timezone ();
-                if (timezone != null) {
-                    timezone_name = ((GWeather.Timezone) timezone).get_name ();
-                    if (timezone_name != null) {
-                        timezone_name = ((string) timezone_name).normalize ().casefold ();
-                    }
-                }
-                var contains_timezone_name = timezone_name != null && ((string) timezone_name).contains (search);
-
-                if (contains_name || contains_country_name || contains_timezone_name) {
-                    bool selected = world.location_exists (location);
-                    locations.append (new ClockLocation (location, selected));
-                }
                 return;
             case NAMED_TIMEZONE:
-                if (location.get_sort_name ().contains (search)) {
-                    bool selected = world.location_exists (location);
-                    locations.append (new ClockLocation (location, selected));
-                }
                 return;
             default:
                 break;
-        }
-        foreach (var child in location.get_children ()) {
-            query_locations (child, search);
-            if (locations.get_n_items () >= RESULT_COUNT_LIMIT) {
-                return;
-            }
-        }
+    	}
+
     }
 }
 
