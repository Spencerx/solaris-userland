Cherry picked from
https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/402
https://gitlab.gnome.org/GNOME/libsoup/-/merge_requests/410

--- a/libsoup/soup-headers.c	2024-11-12 14:55:09.002276165 -0800
+++ b/libsoup/soup-headers.c	2024-11-12 15:22:07.489778255 -0800
@@ -50,13 +50,14 @@
 	 * ignorable trailing whitespace.
 	 */
 
+	/* No '\0's are allowed */
+	if (memchr (str, '\0', len))
+		return FALSE;
+
 	/* Skip over the Request-Line / Status-Line */
 	headers_start = memchr (str, '\n', len);
 	if (!headers_start)
 		return FALSE;
-	/* No '\0's in the Request-Line / Status-Line */
-	if (memchr (str, '\0', headers_start - str))
-		return FALSE;
 
 	/* We work on a copy of the headers, which we can write '\0's
 	 * into, so that we don't have to individually g_strndup and
@@ -68,14 +69,6 @@
 	headers_copy[copy_len] = '\0';
 	value_end = headers_copy;
 
-	/* There shouldn't be any '\0's in the headers already, but
-	 * this is the web we're talking about.
-	 */
-	while ((p = memchr (headers_copy, '\0', copy_len))) {
-		memmove (p, p + 1, copy_len - (p - headers_copy));
-		copy_len--;
-	}
-
 	while (*(value_end + 1)) {
 		name = value_end + 1;
 		name_end = strchr (name, ':');
--- a/tests/header-parsing-test.c	2024-11-12 15:22:42.644899395 -0800
+++ b/tests/header-parsing-test.c	2024-11-12 15:33:20.194072935 -0800
@@ -358,24 +358,6 @@
 	  }
 	},
 
-	{ "NUL in header name", "760832",
-	  "GET / HTTP/1.1\r\nHost\x00: example.com\r\n", 36,
-	  SOUP_STATUS_OK,
-	  "GET", "/", SOUP_HTTP_1_1,
-	  { { "Host", "example.com" },
-	    { NULL }
-	  }
-	},
-
-	{ "NUL in header value", "760832",
-	  "GET / HTTP/1.1\r\nHost: example\x00" "com\r\n", 35,
-	  SOUP_STATUS_OK,
-	  "GET", "/", SOUP_HTTP_1_1,
-	  { { "Host", "examplecom" },
-	    { NULL }
-	  }
-	},
-
 	/************************/
 	/*** INVALID REQUESTS ***/
 	/************************/
@@ -448,6 +430,21 @@
 	  SOUP_STATUS_EXPECTATION_FAILED,
 	  NULL, NULL, -1,
 	  { { NULL } }
+	},
+
+        // https://gitlab.gnome.org/GNOME/libsoup/-/issues/377
+        { "NUL in header name", NULL,
+          "GET / HTTP/1.1\r\nHost\x00: example.com\r\n", 36,
+          SOUP_STATUS_BAD_REQUEST,
+          NULL, NULL, -1,
+          { { NULL } }
+        },
+
+        { "NUL in header value", NULL,
+          "HTTP/1.1 200 OK\r\nFoo: b\x00" "ar\r\n", 28,
+          SOUP_STATUS_BAD_REQUEST,
+            NULL, NULL, -1,
+          { { NULL } }
 	}
 };
 static const int num_reqtests = G_N_ELEMENTS (reqtests);
@@ -620,22 +617,6 @@
 	    { NULL } }
 	},
 
-	{ "NUL in header name", "760832",
-	  "HTTP/1.1 200 OK\r\nF\x00oo: bar\r\n", 28,
-	  SOUP_HTTP_1_1, SOUP_STATUS_OK, "OK",
-	  { { "Foo", "bar" },
-	    { NULL }
-	  }
-	},
-
-	{ "NUL in header value", "760832",
-	  "HTTP/1.1 200 OK\r\nFoo: b\x00" "ar\r\n", 28,
-	  SOUP_HTTP_1_1, SOUP_STATUS_OK, "OK",
-	  { { "Foo", "bar" },
-	    { NULL }
-	  }
-	},
-
 	/********************************/
 	/*** VALID CONTINUE RESPONSES ***/
 	/********************************/
@@ -768,6 +749,19 @@
 	  { { NULL }
 	  }
 	},
+	
+	// https://gitlab.gnome.org/GNOME/libsoup/-/issues/377
+	{ "NUL in header name", NULL,
+	  "HTTP/1.1 200 OK\r\nF\x00oo: bar\r\n", 28,
+	  -1, 0, NULL,
+	  { { NULL } }
+	},
+
+	{ "NUL in header value", "760832",
+	  "HTTP/1.1 200 OK\r\nFoo: b\x00" "ar\r\n", 28,
+	  -1, 0, NULL,
+	  { { NULL } }
+	},
 };
 static const int num_resptests = G_N_ELEMENTS (resptests);
 
--- a/libsoup/soup-websocket-connection.c	2024-11-12 15:34:03.265314215 -0800
+++ b/libsoup/soup-websocket-connection.c	2024-11-12 15:35:13.528229250 -0800
@@ -1140,10 +1140,9 @@
 		}
 
 		pv->incoming->len = len + count;
-	} while (count > 0);
+		process_incoming (self);
+	} while (count > 0 && !pv->close_sent && !pv->io_closing);
 
-	process_incoming (self);
-
 	if (end) {
 		if (!pv->close_sent || !pv->close_received) {
 			pv->dirty_close = TRUE;
--- a/tests/websocket-test.c	2024-11-12 15:35:44.637612650 -0800
+++ b/tests/websocket-test.c	2024-11-12 15:36:48.477748665 -0800
@@ -1331,8 +1331,9 @@
 	GError *error = NULL;
 	InvalidEncodeLengthTest context = { test, NULL };
 	guint i;
+	guint error_id;
 
-	g_signal_connect (test->client, "error", G_CALLBACK (on_error_copy), &error);
+	error_id = g_signal_connect (test->client, "error", G_CALLBACK (on_error_copy), &error);
 	g_signal_connect (test->client, "message", G_CALLBACK (on_binary_message), &received);
 
 	/* We use 127(\x7f) as payload length with 65535 extended length */
@@ -1345,6 +1346,7 @@
 	WAIT_UNTIL (error != NULL || received != NULL);
 	g_assert_error (error, SOUP_WEBSOCKET_ERROR, SOUP_WEBSOCKET_CLOSE_PROTOCOL_ERROR);
 	g_clear_error (&error);
+	g_signal_handler_disconnect (test->client, error_id);
 	g_assert_null (received);
 
         g_thread_join (thread);
